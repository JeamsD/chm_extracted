<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get All Elements of Sketch Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=8433>
<meta name=layout-width content=628>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">


 <META NAME="MS-HKWD" CONTENT="VBA examples,sketches">
</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Get All Elements of Sketch Example (VBA)</h1>

<p>This example shows how to get all of the elements of a sketch.</p>
<pre>'---------------------------------------------
' Preconditions:
' 1. Open a part and select a sketch.
' 2. Open the Immediate window.
'
' Postconditions:
' 1. Gets all elements of the sketch.
' 2. Examine the Immediate window.
'---------------------------------------------
Option Explicit</pre>
<pre>Public Enum swSkSegments_e
    swSketchLINE = 0
    swSketchARC = 1
    swSketchELLIPSE = 2
    swSketchSPLINE = 3
    swSketchTEXT = 4
    swSketchPARABOLA = 5
End Enum</pre>
<pre>Sub ProcessTextFormat(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swTextFormat As SldWorks.TextFormat)</pre>
<pre>    Debug.Print &quot;        BackWards                    = &quot; &amp; swTextFormat.<b>BackWards</b>
    Debug.Print &quot;        Bold                         = &quot; &amp; swTextFormat.<b>Bold</b>
    Debug.Print &quot;        CharHeight                   = &quot; &amp; swTextFormat.<b>CharHeight</b>
    Debug.Print &quot;        CharHeightInPts              = &quot; &amp; swTextFormat.<b>CharHeightInPts</b>
    Debug.Print &quot;        CharSpacingFactor            = &quot; &amp; swTextFormat.<b>CharSpacingFactor</b>
    Debug.Print &quot;        Escapement                   = &quot; &amp; swTextFormat.<b>Escapement</b>
    Debug.Print &quot;        IsHeightSpecifiedInPts       = &quot; &amp; swTextFormat.<b>IsHeightSpecifiedInPts</b>
    Debug.Print &quot;        Italic                       = &quot; &amp; swTextFormat.<b>Italic</b>
    Debug.Print &quot;        LineLength                   = &quot; &amp; swTextFormat.<b>LineLength</b>
    Debug.Print &quot;        LineSpacing                  = &quot; &amp; swTextFormat.<b>LineSpacing</b>
    Debug.Print &quot;        ObliqueAngle                 = &quot; &amp; swTextFormat.<b>ObliqueAngle</b>
    Debug.Print &quot;        Strikeout                    = &quot; &amp; swTextFormat.<b>Strikeout</b>
    Debug.Print &quot;        TypeFaceName                 = &quot; &amp; swTextFormat.<b>TypeFaceName</b>
    Debug.Print &quot;        Underline                    = &quot; &amp; swTextFormat.<b>Underline</b>
    Debug.Print &quot;        UpsideDown                   = &quot; &amp; swTextFormat.<b>UpsideDown</b>
    Debug.Print &quot;        Vertical                     = &quot; &amp; swTextFormat.<b>Vertical</b>
    Debug.Print &quot;        WidthFactor                  = &quot; &amp; swTextFormat.<b>WidthFactor</b>
    Debug.Print &quot;&quot;
End Sub</pre>
<pre>Function TransformSketchPointToModelSpace(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSkPt As SldWorks.SketchPoint) As SldWorks.MathPoint</pre>
<pre>    Dim swMathUtil As SldWorks.MathUtility
    Dim swXform As SldWorks.MathTransform
    Dim nPt(2) As Double
    Dim vPt  As Variant
    Dim swMathPt As SldWorks.MathPoint</pre>
<pre>    nPt(0) = swSkPt.X:      nPt(1) = swSkPt.Y:      nPt(2) = swSkPt.Z
    vPt = nPt</pre>
<pre>    Set swMathUtil = swApp.<b>GetMathUtility</b>
    Set swXform = swSketch.<b>ModelToSketchTransform</b>
    Set swXform = swXform.<b>Inverse</b>
    Set swMathPt = swMathUtil.<b>CreatePoint</b>((vPt))
    Set swMathPt = swMathPt.<b>MultiplyTransform</b>(swXform)
    Set TransformSketchPointToModelSpace = swMathPt</pre>
<pre>End Function</pre>
<pre>Sub ProcessSketchLine(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSkLine As SldWorks.SketchLine)</pre>
<pre>    Dim swStartPt As SldWorks.SketchPoint
    Dim swEndPt As SldWorks.SketchPoint
    Dim swStartModPt As SldWorks.MathPoint
    Dim swEndModPt As SldWorks.MathPoint

    Set swStartPt = swSkLine.<b>GetStartPoint2</b>
    Set swEndPt = swSkLine.<b>GetEndPoint2</b></pre>
<pre>    Set swStartModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swStartPt)
    Set swEndModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swEndPt)
    Debug.Print &quot;      Start (sketch)   = (&quot; &amp; swStartPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Start (model )   = (&quot; &amp; swStartModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swStartModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swStartModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      End   (sketch)   = (&quot; &amp; swEndPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swEndPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swEndPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      End   (model )   = (&quot; &amp; swEndModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swEndModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swEndModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
End Sub</pre>
<pre>Sub ProcessSketchArc(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSkArc As SldWorks.SketchArc)</pre>
<pre>    Dim swStartPt As SldWorks.SketchPoint
    Dim swEndPt As SldWorks.SketchPoint
    Dim swCtrPt As SldWorks.SketchPoint
    Dim vNormal As Variant
    Dim swStartModPt As SldWorks.MathPoint
    Dim swEndModPt As SldWorks.MathPoint
    Dim swCtrModPt As SldWorks.MathPoint

    Set swStartPt = swSkArc.<b>GetStartPoint2</b>
    Set swEndPt = swSkArc.<b>GetEndPoint2</b>
    Set swCtrPt = swSkArc.<b>GetCenterPoint2</b>
    Set swStartModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swStartPt)
    Set swEndModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swEndPt)
    Set swCtrModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swCtrPt)</pre>
<pre>    vNormal = swSkArc.<b>GetNormalVector</b>
    Debug.Print &quot;      Start (sketch)   = (&quot; &amp; swStartPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Start (model )   = (&quot; &amp; swStartModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swStartModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swStartModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      End   (sketch)   = (&quot; &amp; swEndPt.<b>X</b> * 1000#<b> </b>&amp; &quot;, &quot; &amp; swEndPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swEndPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      End   (model )   = (&quot; &amp; swEndModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swEndModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swEndModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Center(sketch)   = (&quot; &amp; swCtrPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swCtrPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swCtrPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Center(model )   = (&quot; &amp; swCtrModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swCtrModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swCtrModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Radius           = &quot; &amp; swSkArc.<b>GetRadius</b> * 1000# &amp; &quot; mm&quot;
    Debug.Print &quot;      IsCircle         = &quot; &amp; CBool(swSkArc.<b>IsCircle</b>)
    Debug.Print &quot;      Rot dirn         = &quot; &amp; swSkArc.<b>GetRotationDir</b></pre>
<pre>End Sub</pre>
<pre>Sub ProcessSketchEllipse(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSkEllipse As SldWorks.SketchEllipse)</pre>
<pre>    Dim swStartPt As SldWorks.SketchPoint
    Dim swEndPt As SldWorks.SketchPoint
    Dim swCtrPt As SldWorks.SketchPoint
    Dim swMajPt As SldWorks.SketchPoint
    Dim swMinPt As SldWorks.SketchPoint
    Dim swStartModPt As SldWorks.MathPoint
    Dim swEndModPt As SldWorks.MathPoint
    Dim swCtrModPt As SldWorks.MathPoint
    Dim swMajModPt As SldWorks.MathPoint
    Dim swMinModPt As SldWorks.MathPoint</pre>
<pre>    Set swStartPt = swSkEllipse.<b>GetStartPoint2</b>
    Set swEndPt = swSkEllipse.<b>GetEndPoint2</b>
    Set swCtrPt = swSkEllipse.<b>GetCenterPoint2</b>
    Set swMajPt = swSkEllipse.<b>GetMajorPoint2</b>
    Set swMinPt = swSkEllipse.<b>GetMinorPoint2</b>
    Set swStartModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swStartPt)
    Set swEndModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swEndPt)
    Set swCtrModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swCtrPt)
    Set swMajModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swMajPt)
    Set swMinModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swMinPt)</pre>
<pre>    Debug.Print &quot;      Start (sketch)   = (&quot; &amp; swStartPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>Z </b>* 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Start (model )   = (&quot; &amp; swStartModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swStartModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swStartModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      End   (sketch)   = (&quot; &amp; swEndPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swEndPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swEndPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      End   (model )   = (&quot; &amp; swEndModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swEndModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swEndModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Center(sketch)   = (&quot; &amp; swCtrPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swCtrPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swCtrPt.Z * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Center(model )   = (&quot; &amp; swCtrModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swCtrModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swCtrModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Major (sketch)   = (&quot; &amp; swMajPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swMajPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swMajPt.<b>Z </b>* 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Major (model )   = (&quot; &amp; swMajModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swMajModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swMajModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Minor (sketch)   = (&quot; &amp; swMinPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swMinPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swMinPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Minor (model )   = (&quot; &amp; swMinModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swMinModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swMinModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
End Sub</pre>
<pre>Sub ProcessSketchSpline(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSkSpline As SldWorks.SketchSpline)</pre>
<pre>    Dim vSplinePtArr As Variant
    Dim vSplinePt As Variant
    Dim swSplinePt As SldWorks.SketchPoint
    Dim swSplineModPt As SldWorks.MathPoint</pre>
<pre>    vSplinePtArr = swSkSpline.<b>GetPoints2</b>
    For Each vSplinePt In vSplinePtArr
        Set swSplinePt = vSplinePt
        Set swSplineModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swSplinePt)</pre>
<pre>        Debug.Print &quot;      Spline (sketch)  = (&quot; &amp; swSplinePt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swSplinePt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swSplinePt.<b>Z </b>* 1000# &amp; &quot;) mm&quot;
        Debug.Print &quot;      Spline (model )  = (&quot; &amp; swSplineModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swSplineModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swSplineModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Next vSplinePt</pre>
<pre>End Sub</pre>
<pre>Sub ProcessSketchText(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSkText As SldWorks.SketchText)</pre>
<pre>    Dim vCoordPt As Variant
    Dim swMathUtil  As SldWorks.MathUtility
    Dim swXform As SldWorks.MathTransform
    Dim swCoordModPt As SldWorks.MathPoint</pre>
<pre>    vCoordPt = swSkText.<b>GetCoordinates</b>
    Set swMathUtil = swApp.<b>GetMathUtility</b>
    Set swXform = swSketch.<b>ModelToSketchTransform</b>
    Set swXform = swXform.<b>Inverse</b>
    Set swCoordModPt = swMathUtil.<b>CreatePoint</b>((vCoordPt))
    Set swCoordModPt = swCoordModPt.<b>MultiplyTransform</b>(swXform)
    Debug.Print &quot;      Coords (sketch)  = (&quot; &amp; vCoordPt(0) * 1000# &amp; &quot;, &quot; &amp; vCoordPt(1) * 1000# &amp; &quot;, &quot; &amp; vCoordPt(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Coords (model )  = (&quot; &amp; swCoordModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swCoordModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swCoordModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Use doc fmt      = &quot; &amp; swSkText.<b>GetUseDocTextFormat</b>
    Debug.Print &quot;      Text             = &quot; &amp; swSkText.<b>Text</b></pre>
<pre>    ProcessTextFormat swApp, swModel, swSkText.<b>GetTextFormat</b></pre>
<pre>End Sub</pre>
<pre>Sub ProcessSketchParabola(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSkParabola As SldWorks.SketchParabola)</pre>
<pre>    Dim swApexPt As SldWorks.SketchPoint
    Dim swStartPt As SldWorks.SketchPoint
    Dim swEndPt As SldWorks.SketchPoint
    Dim swFocalPt As SldWorks.SketchPoint
    Dim swApexModPt As SldWorks.MathPoint
    Dim swStartModPt As SldWorks.MathPoint
    Dim swEndModPt As SldWorks.MathPoint
    Dim swFocalModPt As SldWorks.MathPoint</pre>
<pre>    Set swApexPt = swSkParabola.<b>GetApexPoint2</b>
    Set swStartPt = swSkParabola.<b>GetStartPoint2</b>
    Set swEndPt = swSkParabola.<b>GetEndPoint2</b>
    Set swFocalPt = swSkParabola.<b>GetFocalPoint2</b>
    Set swApexModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swApexPt)
    Set swStartModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swStartPt)
    Set swEndModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swEndPt)
    Set swFocalModPt = TransformSketchPointToModelSpace(swApp, swModel, swSketch, swFocalPt)
    Debug.Print &quot;      Apex  (sketch)   = (&quot; &amp; swApexPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swApexPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swApexPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Apex  (model )   = (&quot; &amp; swApexModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swApexModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swApexModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Start (sketch)   = (&quot; &amp; swStartPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Start (model )   = (&quot; &amp; swStartModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swStartModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swStartModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      End   (sketch)   = (&quot; &amp; swEndPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swEndPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swEndPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      End   (model )   = (&quot; &amp; swEndModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swEndModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swEndModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Focal (sketch)   = (&quot; &amp; swFocalPt.<b>X</b> * 1000# &amp; &quot;, &quot; &amp; swFocalPt.<b>Y</b> * 1000# &amp; &quot;, &quot; &amp; swFocalPt.<b>Z</b> * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Focal (model )   = (&quot; &amp; swFocalModPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swFocalModPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swFocalModPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    </pre>
<pre>End Sub</pre>
<pre>Sub main()</pre>
<pre>    Dim sSkSegmentsName(5) As String
    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swFeat As SldWorks.Feature
    Dim swSketch As SldWorks.Sketch
    Dim vSkSegArr As Variant
    Dim vSkSeg As Variant
    Dim swSkSeg  As SldWorks.SketchSegment
    Dim swSkLine As SldWorks.SketchLine
    Dim swSkArc As SldWorks.SketchArc
    Dim swSkEllipse As SldWorks.SketchEllipse
    Dim swSkSpline As SldWorks.SketchSpline
    Dim swSkText As SldWorks.SketchText
    Dim swSkParabola As SldWorks.SketchParabola
    Dim vID As Variant
    Dim i As Long
    Dim bRet As Boolean
    </pre>
<pre>    sSkSegmentsName(swSketchLINE) = &quot;swSketchLINE&quot;
    sSkSegmentsName(swSketchARC) = &quot;swSketchARC&quot;
    sSkSegmentsName(swSketchELLIPSE) = &quot;swSketchELLIPSE&quot;
    sSkSegmentsName(swSketchSPLINE) = &quot;swSketchSPLINE&quot;
    sSkSegmentsName(swSketchTEXT) = &quot;swSketchTEXT&quot;
    sSkSegmentsName(swSketchPARABOLA) = &quot;swSketchPARABOLA&quot;</pre>
<pre>    Set swApp = Application.SldWorks
    Set swModel = swApp.<b>ActiveDoc</b>
    Set swSelMgr = swModel.<b>SelectionManager</b>
    Set swFeat = swSelMgr.<b>GetSelectedObject5</b>(1)
    Set swSketch = swFeat.<b>GetSpecificFeature</b>
    Debug.Print &quot;Feature = &quot; &amp; swFeat.<b>Name</b> &amp; &quot; [&quot; &amp; swSketch.<b>Is3D</b> &amp; &quot;]&quot;
    Debug.Print &quot;  Sketch Segments:&quot;</pre>
<pre>    vSkSegArr = swSketch.<b>GetSketchSegments</b>
    For Each vSkSeg In vSkSegArr
        Set swSkSeg = vSkSeg
        vID = swSkSeg.<b>GetID</b>
        Debug.Print &quot;    ID = [&quot; &amp; vID(0) &amp; &quot;,&quot; &amp; vID(1) &amp; &quot;]&quot;
        Debug.Print &quot;      Type             = &quot; &amp; sSkSegmentsName(swSkSeg.<b>GetType</b>)
        Debug.Print &quot;      ConstGeom        = &quot; &amp; swSkSeg.<b>ConstructionGeometry</b>
        Select Case swSkSeg.<b>GetType</b>
            Case swSketchLINE
                Set swSkLine = swSkSeg
                ProcessSketchLine swApp, swModel, swSketch, swSkLine
            Case swSketchARC
                Set swSkArc = swSkSeg
                ProcessSketchArc swApp, swModel, swSketch, swSkArc
            Case swSketchELLIPSE
                Set swSkEllipse = swSkSeg
                ProcessSketchEllipse swApp, swModel, swSketch, swSkEllipse
            Case swSketchSPLINE
                Set swSkSpline = swSkSeg
                ProcessSketchSpline swApp, swModel, swSketch, swSkSpline
            Case swSketchTEXT
                Set swSkText = swSkSeg
                ProcessSketchText swApp, swModel, swSketch, swSkText
                Case swSketchPARABOLA
                Set swSkParabola = swSkSeg
                ProcessSketchParabola swApp, swModel, swSketch, swSkParabola
            Case Default
                Debug.Assert False
        End Select</pre>
<pre>    Next vSkSeg</pre>
<pre>End Sub

</pre>

</body>

</html>
