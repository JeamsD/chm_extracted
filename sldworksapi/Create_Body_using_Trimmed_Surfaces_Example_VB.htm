<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Create Body using Trimmed Surfaces Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=date content="06 13, 2002 8:09:55 AM">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=6171>
<meta name=layout-width content=723>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">

 <META NAME="MS-HKWD" CONTENT="VBA examples,surfaces">
 <META NAME="MS-HKWD" CONTENT="VBA examples,bodies">
</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Create Body Using Trimmed Surfaces Example (VBA)</h1>

<p>The basic outline for creating a body using trimmed surfaces is as follows:</p>

<ol style="list-style-type:decimal; font-family:Verdana; font-size:10">
	
	<li class=kadov-p-CapiStep><p class=apiStep>Create a new temporary 
 body in a part using IPartDoc::CreateNewBody.</p></li>
	
	<li class=kadov-p-CapiStep>
	<p class=apiStep>Create trimmed surfaces to create a body (for example, 
	create six square surfaces that intersect at the edges to form a cube):</p>
	
	<ol style="list-style: lower-alpha;"
		type=a>
		
		<li class=kadov-p-CapiStep><p class=apiStep
										style="margin-left: 0px;">Create 
 a planar surface using IBody2::CreatePlanarSurface(RootPoint, Normal).</p></li>
		
		<li class=kadov-p-CapiStep><p class=apiStep
										style="margin-left: 0px;">Add a 
 trimming loop to the planar surface using <br>
		ISurface::AddTrimmingLoop2(Numcurves, _<span style="margin-left: 48px;"> 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--><br>
		Order, _<br>
		Dimen, _<br>
		Periodic, _<br>
		NumKnots, _<br>
		NumCtrlPoints, _<br>
		Knots, _<br>
		CtrlPointDbls, _<br>
		UVRange)</span></p></li>
		
		<li class=kadov-p-CapiStep>
		<p class=apiStep
			style="margin-left: 0px;">The arguments for Surface::AddTrimmingLoop2 
 and their values for a square trimming loop are:<br>&nbsp;</p>
		
		<!--(Table)=================================================-->
		<!--begin!kadov{{--><div align=left><!--}}end!kadov-->
		<table x-use-null-cells
				style="x-cell-content-align: top;
						float: alignleft;
						border-spacing: 0px;
						border-spacing: 0px;"
				cellspacing=0>
		<col style="width: 27.563%;">
		<col style="width: 72.437%;">
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td colspan=1
			rowspan=1
			style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-left-style: None;
					border-top-style: None;
					border-right-style: None;
					border-bottom-style: None;
					background-color: #dbdbdb;"
			bgcolor=#DBDBDB
			width=27.563%>
		<p class=apiTableColHeading
			style="margin-left: 36px; font-weight: bold;">Argument</td>
		<td colspan=1
			rowspan=1
			style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-top-style: None;
					border-right-style: None;
					border-bottom-style: None;
					background-color: #dbdbdb;"
			bgcolor=#DBDBDB
			width=72.437%>
		<p class=apiTableColHeading
			style="font-weight: bold;">Description</td></tr>
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-left-style: None;
					border-right-style: None;
					border-bottom-style: None;"
			width=27.563%>
		<p style="margin-left: 36px;">NumCurves</td>
		<td style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-right-style: None;
					border-bottom-style: None;"
			width=72.437%>
		<p>Number of spline curves that make up the trimming loop (Long 4)</td></tr>
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;
					border-left-style: None;"
			width=27.563%>
		<p style="margin-left: 36px;">Order</td>
		<td style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;"
			width=72.437%>
		<p>Orders for the spline curves ({2, 2, 2, 2} Array of Longs. 
		Second-order linear curves)</td></tr>
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;
					border-left-style: None;"
			width=27.563%>
		<p style="margin-left: 36px;">Dimen</td>
		<td style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;"
			width=72.437%>
		<p>Dimension of the control points for the spline curves ({2, 2, 
 2, 2} Array of Longs)</td></tr>
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;
					border-left-style: None;"
			width=27.563%>
		<p style="margin-left: 36px;">Periodic</td>
		<td style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;"
			width=72.437%>
		<p>Periodicity of the spline curves ({0, 0, 0, 0} Array of Longs)</td></tr>
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;
					border-left-style: None;"
			width=27.563%>
		<p style="margin-left: 36px;">NumKnots</td>
		<td style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;"
			width=72.437%>
		<p>Number of knots of the spline curves ({4, 4, 4, 4} Array of 
 Longs)</td></tr>
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;
					border-left-style: None;"
			width=27.563%>
		<p style="margin-left: 36px;">NumCtrlPoints</td>
		<td style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;"
			width=72.437%>
		<p>Number of control points for the spline curves ({2, 2, 2, 2} 
 Array of Longs)</td></tr>
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;
					border-left-style: None;"
			width=27.563%>
		<p style="margin-left: 36px;">Knots</td>
		<td style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;"
			width=72.437%>
		<p>Describes the locations of the knots on the spline curves ({0, 0, 1, 
		1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1} Array of Doubles. Each spline 
		curve contains 4 knots)</td></tr>
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-right-style: None;
					border-left-style: None;
					border-bottom-style: None;"
			width=27.563%>
		<p style="margin-left: 36px;">CtrlPointDbls</td>
		<td style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;"
			width=72.437%>
		<p>Coordinates of control points for the square trimming loop ({0, 0, 1, 0, 1, 0, 1, 1, 
 1, 1, 0, 1, 0, 1, 0, 0} Array of Doubles. (Two for each spline curve of the 
		square trimming loop * Dimen) = 16 coordinates for the square trimming 
		loop)</td></tr>
		
		<tr style="x-cell-content-align: top;"
			valign=top>
		<td colspan=1
			rowspan=1
			style="width: 27.563%;
					padding-right: 10px;
					padding-left: 10px;
					border-right-style: None;
					border-left-style: None;
					border-bottom-style: None;"
			width=27.563%>
		<p style="margin-left: 36px;">UVRange</td>
		<td colspan=1
			rowspan=1
			style="width: 72.437%;
					padding-right: 10px;
					padding-left: 10px;
					border-bottom-style: None;
					border-right-style: None;"
			width=72.437%>
		<p>Min and max for the U and V values ({0, 1, 0, 1} Array of Doubles)</td></tr>
		</table>
		<!--begin!kadov{{--></div><!--}}end!kadov-->
		<p style="margin-left: 88px;">&nbsp;</p>
		</li>
		<li class=kadov-p-CapiStep>
		<p class=apiStep>Create a trimmed surface on the body based on the 
		trimming loop that was just created. </p>
		</li>
	</ol>
	</li>
	
	<li class=kadov-p-CapiStep>
	<p class=apiStep>Sew the surfaces together 
 into a new body using IBody2::CreateBodyFromSurfaces.</p></li>
</ol>

<p>&nbsp;</p>

<p>This example shows how to create trimmed surfaces and use them to create 
bodies.</p>

<pre>'-------------------------------------------------------------
' Preconditions: Verify that the specified
' part document template exists.
'
' Postconditions:
' 1. Opens a new part document.
' 2. Creates a temporary body.
' 3. Creates six trimmed surfaces. For each:
'    a. Creates a planar surface.
'    b. Adds a trimming loop to the planar surface.
'    c. Creates a trimmed surface on the temporary body based
'       on the trimming loop.
' 4. Sews the six trimmed surfaces together to form a new cube body.
' 5. Creates a trimmed surface that is offset from the back of the cube.
' 6. Examine the FeatureManager design tree and
'    graphics area.
'----------------------------------------------
Option Explicit</pre>
<pre>Dim swApp As SldWorks.SldWorks
Dim Model As SldWorks.ModelDoc2
Dim Part As SldWorks.PartDoc
Dim RootPoint(2) As Double
Dim Normal(2) As Double
Dim TempBody As SldWorks.Body2
Dim isGood As Boolean</pre>
<pre>Sub main()       
</pre>
<pre>   'Get the SOLIDWORKS application
    Set swApp = CreateObject(&quot;SldWorks.Application&quot;)
    swApp.<b>UserControl</b> = True</pre>
<pre>    'Create a new blank document
    Set swModel = swApp.<b>NewDocument</b>(&quot;C:\ProgramData\SOLIDWORKS\SOLIDWORKS 2020\templates\part.prtdot&quot;, 0, 0, 0)
    Set Part = Model</pre>
<pre>    'Create a new temporary body in the part
    Set TempBody = Part.<b>CreateNewBody</b></pre>
<pre>    If TempBody Is Nothing Then
        MsgBox &quot;Could not create the new body.&quot;
        Exit Sub
    End If</pre>
<pre>    'Create the trimmed surfaces for a cube with one meter length sides

    'LEFT
    RootPoint(0) = 0 'X
    RootPoint(1) = 0 'Y
    RootPoint(2) = 0 'Z
    Normal(0) = 1 'X
    Normal(1) = 0 'Y
    Normal(2) = 0 'Z
    isGood = <b>CreateSquareSurface</b>(Part, TempBody, RootPoint, Normal, True)</pre>
<pre>    'RIGHT
    RootPoint(0) = 1
    RootPoint(1) = 0
    RootPoint(2) = 0
    Normal(0) = 1
    Normal(1) = 0
    Normal(2) = 0
    isGood = <b>CreateSquareSurface</b>(Part, TempBody, RootPoint, Normal, True)</pre>
<pre>    'BOTTOM
    RootPoint(0) = 0
    RootPoint(1) = 0
    RootPoint(2) = -1
    Normal(0) = 0
    Normal(1) = 1
    Normal(2) = 0
    isGood = <b>CreateSquareSurface</b>(Part, TempBody, RootPoint, Normal, True)
</pre>
<pre>    'TOP
    RootPoint(0) = 0
    RootPoint(1) = 1
    RootPoint(2) = -1
    Normal(0) = 0
    Normal(1) = 1
    Normal(2) = 0
    isGood = <b>CreateSquareSurface</b>(Part, TempBody, RootPoint, Normal, True)</pre>
<pre>    'FRONT
    RootPoint(0) = 0
    RootPoint(1) = 0
    RootPoint(2) = 0
    Normal(0) = 0
    Normal(1) = 0
    Normal(2) = 1
    isGood = <b>CreateSquareSurface</b>(Part, TempBody, RootPoint, Normal, True)</pre>
<pre>    'BACK
    RootPoint(0) = 0
    RootPoint(1) = 0
    RootPoint(2) = -1
    Normal(0) = 0
    Normal(1) = 0
    Normal(2) = 1
    isGood = <b>CreateSquareSurface</b>(Part, TempBody, RootPoint, Normal, True)</pre>
<pre>    'Create the body using the trimmed surfaces just created
    TempBody.<b>CreateBodyFromSurfaces</b></pre>
<pre>    'Create an offset surface from the back of the cube body
    RootPoint(0) = 0
    RootPoint(1) = 0
    RootPoint(2) = -2
    Normal(0) = 0
    Normal(1) = 0
    Normal(2) = 1
    isGood = <b>CreateSquareSurface</b>(Part, TempBody, RootPoint, Normal, False)

    Model.<b>ViewZoomtofit2</b></pre>
<pre>    'Clean up the memory
    Set swApp = Nothing
    Set Model = Nothing
    Set Part = Nothing</pre>
<pre>End Sub
 
</pre>
<pre>'CreateSquareSurface creates a square trimmed surface

Private Function CreateSquareSurface(Part As PartDoc, SurfaceBody As Body2, RootPoint As Variant, Normal As Variant, IsPartOfTempBody As Boolean) As Boolean</pre>
<pre>    Dim isGood As Boolean    </pre>
<pre>    'Temporary surface
    Dim TmpSurf As SldWorks.Surface</pre>
<pre>    'Arguments that define the trimming loop
    Dim NumCurves As Long
    Dim Order(3) As Long
    Dim Dimen(3) As Long
    Dim Periodic(3) As Long
    Dim NumKnots(3) As Long
    Dim NumCtrlPoints(3) As Long
    Dim Knots(15) As Double
    Dim CtrlPointDbls(15) As Double
    Dim UVRange(3) As Double</pre>
<pre>   'Initially this function has no problems,
   'set this value to false if errors encountered
    CreateSquareSurface = True</pre>
<pre>   'Create a new planar surface based at RootPoint with the normal vector Normal
    Set TmpSurf = SurfaceBody.<b>CreatePlanarSurface</b>(RootPoint, Normal)
    If TmpSurf Is Nothing Then
        CreateSquareSurface = False
        Exit Function
    End If</pre>
<pre>    'Set the arguments to define a square trimming loop

   'There are four spline curves (four sides) in the square
    NumCurves = 4</pre>
<pre>    'Order of each of the four sides of the square
    Order(0) = 2
    Order(1) = 2
    Order(2) = 2
    Order(3) = 2</pre>
<pre>    'Dimensions for the control points of each side of the square
    Dimen(0) = 2
    Dimen(1) = 2
    Dimen(2) = 2
    Dimen(3) = 2</pre>
<pre>    'Non-periodic sides of the square
    Periodic(0) = 0
    Periodic(1) = 0
    Periodic(2) = 0
    Periodic(3) = 0</pre>
<pre>    'Number of knots in each side of the square
    NumKnots(0) = 4
    NumKnots(1) = 4
    NumKnots(2) = 4
    NumKnots(3) = 4</pre>
<pre>    'Number of control points in each side of the square
    NumCtrlPoints(0) = 2
    NumCtrlPoints(1) = 2
    NumCtrlPoints(2) = 2
    NumCtrlPoints(3) = 2</pre>
<pre>    'Sixteen knots, four for each side of the square
    Knots(0) = 0
    Knots(1) = 0
    Knots(2) = 1
    Knots(3) = 1
    Knots(4) = 0
    Knots(5) = 0
    Knots(6) = 1
    Knots(7) = 1
    Knots(8) = 0
    Knots(9) = 0
    Knots(10) = 1
    Knots(11) = 1
    Knots(12) = 0
    Knots(13) = 0
    Knots(14) = 1
    Knots(15) = 1</pre>
<pre>    '16 control point coordinates for the square
    CtrlPointDbls(0) = 0: CtrlPointDbls(1) = 0
    CtrlPointDbls(2) = 1: CtrlPointDbls(3) = 0
    CtrlPointDbls(4) = 1: CtrlPointDbls(5) = 0
    CtrlPointDbls(6) = 1: CtrlPointDbls(7) = 1
    CtrlPointDbls(8) = 1: CtrlPointDbls(9) = 1
    CtrlPointDbls(10) = 0: CtrlPointDbls(11) = 1
    CtrlPointDbls(12) = 0: CtrlPointDbls(13) = 1
    CtrlPointDbls(14) = 0: CtrlPointDbls(15) = 0</pre>
<pre>    'UV ranges
    UVRange(0) = 0
    UVRange(1) = 1
    UVRange(2) = 0
    UVRange(3) = 1</pre>
<pre>    'Create the trimming loop on the surface
    isGood = TmpSurf.<b>AddTrimmingLoop2</b>(NumCurves, Order, Dimen, Periodic, NumKnots, NumCtrlPoints, Knots, CtrlPointDbls, UVRange)
    If isGood = False Then
        CreateSquareSurface = False
        Exit Function
    End If

    'Create the trimmed surface on the body
    'based on the trimming loop just created
    isGood = SurfaceBody.<b>CreateTrimmedSurface</b>
    If isGood = False Then
        CreateSquareSurface = False
        Exit Function
    End If

    If IsPartOfTempBody Then
       'If this surface is to be used in
       'a temporary body, then you must generate it
    Else
        SurfaceBody.<b>CreateBodyFromSurfaces</b>
    End If</pre>
<pre>End Function
</pre>
 

</body>

</html>
