<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Create Drag Arrow Manipulator Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta NAME=MS-HAID CONTENT=EXCreateDragArrowManipulator>
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=3484>
<meta name=layout-width content=844>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>
<meta name=MS-HKWD content="VBA examples,drag arrow manipulators">

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Create Drag Arrow Manipulator Example (VBA)</h1>

<p>This example shows how to create a drag arrow manipulator, which is 
 called a handle in the user interface.</p>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p><a href="#Modules">Main Module</a></p></li>
	
	<li class=kadov-p><p><a href="#Class">Handler Module</a></p></li>
</ul>

<h3><a name=Modules></a>Main module</h3>

<p class="APICODE">
'---------------------------------------------------------------------------<br>
' Preconditions:<br>
' 1. Open a part or assembly and select a face.<br>
' 2. Select:<br>
'&nbsp;&nbsp;&nbsp; <b>Tools &gt; References &gt; SOLIDWORKS &lt;version&gt; exposed type 
libraries for add-in</b><br>
' 3. Open an Immediate window.<br>
'<br>
' Postconditions:<br>
' 1. A unidirectional drag arrow manipulator or handle is created on the 
selected face.<br>
' 2. Drag the handle to another location. The first time you drag the handle,<br>
'&nbsp;&nbsp;&nbsp; IDragArrowManipulator::FixedLength is set to true,<br>
'&nbsp;&nbsp;&nbsp; and the origin is moved in the direction of the drag. For 
second and<br>
'&nbsp;&nbsp;&nbsp; subsequent drags, IDragArrowManipulator::FixedLength is set 
to false,<br>
'&nbsp;&nbsp;&nbsp; and the origin is not changed.<br>
' 3. When you drag the handle a ruler displays. <br>
'&nbsp;&nbsp;&nbsp; IDragArrowManipulator::ShowRuler is true.<br>
' 4. When you drag the handle past length = 0, the handle flips direction.<br>
'&nbsp;&nbsp;&nbsp; IDragArrowManipulator::AllowFlip is true.<br>
' 5. Inspect the Immediate window.<br>
'--------------------------------------------------------------------------</p>
<p class="APICODE">Option Explicit</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim swManip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.Manipulator<br>
&nbsp;&nbsp;&nbsp; Public swDrag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.DragArrowManipulator<br>
&nbsp;&nbsp;&nbsp; Dim swDragHdlr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As swDragManipHdlr<br>
&nbsp;&nbsp;&nbsp; Public swFace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.Face2</p>
<p class="APICODE">Sub main()</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim swApp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.SldWorks<br>
&nbsp;&nbsp;&nbsp; Dim swMathUtil&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.MathUtility<br>
&nbsp;&nbsp;&nbsp; Dim swModel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.ModelDoc2<br>
&nbsp;&nbsp;&nbsp; Dim swModViewMgr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.ModelViewManager<br>
&nbsp;&nbsp;&nbsp; Dim swSelMgr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.SelectionMgr<br>
&nbsp;&nbsp;&nbsp; Dim vPickPt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Variant<br>
&nbsp;&nbsp;&nbsp; Dim swPickPt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.MathPoint<br>
&nbsp;&nbsp;&nbsp; Dim boolstatus As Boolean</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Set swDragHdlr = New swDragManipHdlr<br>
&nbsp;&nbsp;&nbsp; Set swApp = Application.<b>SldWorks</b><br>
&nbsp;&nbsp;&nbsp; Set swMathUtil = swApp.<b>GetMathUtility</b><br>
&nbsp;&nbsp;&nbsp; Set swModel = swApp.<b>ActiveDoc</b><br>
&nbsp;&nbsp;&nbsp; Set swSelMgr = swModel.<b>SelectionManager</b><br>
&nbsp;&nbsp;&nbsp; Set swFace = swSelMgr.<b>GetSelectedObject6</b>(1, 0)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim nVector(2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Double<br>
&nbsp;&nbsp;&nbsp; Dim vVector&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Variant<br>
&nbsp;&nbsp;&nbsp; nVector(0) = 0:&nbsp;&nbsp;&nbsp;&nbsp; nVector(1) = 1:&nbsp;&nbsp;&nbsp;&nbsp; 
nVector(2) = 0<br>
&nbsp;&nbsp;&nbsp; vVector = nVector</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim swN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.MathVector<br>
&nbsp;&nbsp;&nbsp; Set swN = swMathUtil.<b>CreateVector</b>((vVector))</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; vPickPt = swSelMgr.<b>GetSelectionPoint2</b>(1, 
-1)<br>
&nbsp;&nbsp;&nbsp; Set swPickPt = swMathUtil.<b>CreatePoint</b>((vPickPt))<br>
&nbsp;&nbsp;&nbsp; Set swModViewMgr = swModel.<b>ModelViewManager</b></p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Set swManip = swModViewMgr.<b>CreateManipulator</b>(SwConst.swManipulatorType_e.swDragArrowManipulator, 
swDragHdlr)<br>
&nbsp;&nbsp;&nbsp; Set swDrag = swManip.<b>GetSpecificManipulator</b></p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; swDrag.<b>ShowRuler</b> = True<br>
&nbsp;&nbsp;&nbsp; swDrag.<b>AllowFlip</b> = True<br>
&nbsp;&nbsp;&nbsp; swDrag.<b>ShowOppositeDirection</b> = False<br>
&nbsp;&nbsp;&nbsp; swDrag.<b>Length</b> = 0.02<br>
&nbsp;&nbsp;&nbsp; swDrag.<b>Direction</b> = swN<br>
&nbsp;&nbsp;&nbsp; swDrag.<b>LengthOppositeDirection</b> = 0.01<br>
&nbsp;&nbsp;&nbsp; swDrag.<b>origin</b> = swPickPt<br>
&nbsp;&nbsp;&nbsp; swManip.<b>Show</b> swModel<br>
&nbsp;&nbsp;&nbsp; swDrag.<b>Update</b></p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim origin As SldWorks.MathPoint<br>
&nbsp;&nbsp;&nbsp; Set origin = swDrag.<b>origin</b></p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim pt As Variant<br>
&nbsp;&nbsp;&nbsp; pt = origin.<b>ArrayData</b></p>
<p class="APICODE">End Sub</p>
<p class="APICODE"><br><!--}}end!kadov--><!--kadov_tag{{<implicit_p>}}-->&nbsp; 
 

</p>
 

<h3><a name=Class></a>Handler module</h3>

<p class="APICODE">Dim Doneonce As Long<br>
'-----------------------------------------------------------------------------<br>
Const lenFact = 1<br>
Option Explicit<br>
Implements SwManipulatorHandler2</p>
<p class="APICODE">Public Function 
SwManipulatorHandler2_OnHandleLmbSelected(ByVal pManipulator As Object) As 
Boolean</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnHandleLmbSelected&quot;</p>
<p class="APICODE">End Function</p>
<p class="APICODE">Public Function SwManipulatorHandler2_OnDelete(ByVal 
pManipulator As Object) As Boolean</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnDelete&quot;</p>
<p class="APICODE">End Function<br>
</p>
<p class="APICODE">Public Sub SwManipulatorHandler2_OnDirectionFlipped(ByVal 
pManipulator As Object)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnDirectionFlipped&quot;</p>
<p class="APICODE">End Sub</p>
<p class="APICODE">Public Function 
SwManipulatorHandler2_OnDoubleValueChanged(ByVal pManipulator As Object, ByVal 
Id As Long, Value As Double) As Boolean</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Doneonce = Doneonce + 1<br>
&nbsp;&nbsp;&nbsp; Debug.Print &quot;SwManipulatorHandler2_OnDoubleValueChanged&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
= &quot; &amp; Id</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
= &quot; &amp; Value<br>
&nbsp;&nbsp;&nbsp; Dim swTmpManipulator As SldWorks.DragArrowManipulator<br>
&nbsp;&nbsp;&nbsp; Set swTmpManipulator = pManipulator<br>
&nbsp;&nbsp;&nbsp; 'Update origin<br>
&nbsp;&nbsp;&nbsp; Dim swMathPoint As SldWorks.MathPoint<br>
&nbsp;&nbsp;&nbsp; Set swMathPoint = swTmpManipulator.<b>origin</b><br>
&nbsp;&nbsp;&nbsp; Dim varMathPt As Variant<br>
&nbsp;&nbsp;&nbsp; varMathPt = swMathPoint.<b>ArrayData</b><br>
&nbsp;&nbsp;&nbsp; varMathPt(1) = varMathPt(1) + lenFact / 1000<br>
&nbsp;&nbsp;&nbsp; swMathPoint.<b>ArrayData</b> = varMathPt<br>
&nbsp;&nbsp;&nbsp; If (Doneonce = 1) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; swTmpManipulator.<b>FixedLength</b> = 
True<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; swTmpManipulator.<b>origin</b> = swMathPoint<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; swTmpManipulator.<b>Update</b><br>
End Function</p>
<p class="APICODE">Public Sub SwManipulatorHandler2_OnEndDrag(ByVal pManipulator 
As Object, ByVal handleIndex As Long)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim swTmpManipulator As 
SldWorks.DragArrowManipulator<br>
&nbsp;&nbsp;&nbsp; Set swTmpManipulator = pManipulator<br>
&nbsp;&nbsp;&nbsp; swTmpManipulator.<b>FixedLength</b> = False<br>
&nbsp;&nbsp;&nbsp; Doneonce = Doneonce + 1<br>
&nbsp;&nbsp;&nbsp; Debug.Print &quot;SwManipulatorHandler2_OnEndDrag&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; HandleIndex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
= &quot; &amp; handleIndex</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; If (handleIndex = 
swDragArrowManipulatorOptions_e.swDragArrowManipulatorDirection2) Then</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print &quot; 
Direction1&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Else</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print &quot; 
Direction2&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; End If</p>
<p class="APICODE">End Sub<br>
Public Sub SwManipulatorHandler2_OnEndNoDrag(ByVal pManipulator As Object, ByVal 
handleIndex As Long)<br>
</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnEndNoDrag&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; <br>
End Sub</p>
<p class="APICODE">Public Sub SwManipulatorHandler2_OnHandleRmbSelected(ByVal 
pManipulator As Object, ByVal handleIndex As Long)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnHandleRmbSelected&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; handleIndex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
= &quot; + handleIndex</p>
<p class="APICODE">End Sub</p>
<p class="APICODE">Public Sub SwManipulatorHandler2_OnHandleSelected(ByVal 
pManipulator As Object, ByVal handleIndex As Long)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnHandleSelected&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; HandleIndex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
= &quot; + handleIndex</p>
<p class="APICODE">End Sub</p>
<p class="APICODE">Public Sub SwManipulatorHandler2_OnItemSetFocus(ByVal 
pManipulator As Object, ByVal Id As Long)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnItemSetFocus&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
= &quot; &amp; Id</p>
<p class="APICODE">End Sub</p>
<p class="APICODE">Public Function SwManipulatorHandler2_OnLmbSelected(ByVal 
pManipulator As Object) As Boolean</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnLmbSelected&quot;</p>
<p class="APICODE">End Function</p>
<p class="APICODE">Public Function 
SwManipulatorHandler2_OnStringValueChanged(ByVal pManipulator As Object, ByVal 
Id As Long, Value As String) As Boolean</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnStringValueChanged&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
= &quot; &amp; Id</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
= &quot; &amp; Value</p>
<p class="APICODE">End Function</p>
<p class="APICODE">Public Sub SwManipulatorHandler2_OnUpdateDrag(ByVal 
pManipulator As Object, ByVal handleIndex As Long, ByVal newPosMathPt As Object)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;SwManipulatorHandler2_OnUpdateDrag&quot;</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; HandleIndex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
= &quot; &amp; handleIndex</p>
<p class="APICODE">End Sub</p>

<!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->

</body>

</html>
