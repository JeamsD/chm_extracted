<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get DimXpertManager Info Example (VB.NET)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VB.NET examples, DimXpert">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=3673>
<meta name=layout-width content=863>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="ApiHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Get DimXpertManager Info Example (VB.NET)</h1>

<p>This example shows the usage of several interfaces that 
 provide access to information on the DimXpertManager tab of the Management Panel in 
 SOLIDWORKS.</p>
<p>The IDimXpertManager interface exposes schema information 
 on the DimXpertManager tab.</p>

<p>This macro demonstrates several ways of acquiring IDimXpertManager 
 on an open document:</p>

<ul>
	<li><font face="Verdana" style="font-size: 8pt">ISelectionManager.GetSelectedObject6()</font></li>
	<li><font face="Verdana" style="font-size: 8pt">IModelDocExtension.DimXpertManager</font></li>
	<li><font face="Verdana" style="font-size: 8pt">IConfiguration.DimXpertManager</font></li>
</ul>

<p>This macro also demonstrates how to get the features 
 and annotations displayed on the DimXpertManager tab using:</p>

<ul>
	<li><font face="Verdana" style="font-size: 8pt">ISelectionManager.GetSelectedObject6()</font></li>
	<li><font face="Verdana" style="font-size: 8pt">IDimXpertManager.DimXpertPart</font></li>
</ul>
<pre>'----------------------------------------------------------------------------
' Preconditions:
' 1. Open <i>public_documents</i><b>\samples\tutorial\api\cover_with_geometric_tolerances.sldprt</b>.
' 2. Select the DimXpertManager tab in the Management Panel.
' 3. Open the Immediate window.
' 4. Add <b>SolidWorks.Interop.swdimxpert.dll</b> as a reference
'    (in the Project Explorer, right-click <b>References</b>, click <b>Add Reference</b>,
'    click <b>Browse</b>, and navigate to <i>install_dir</i><b>\api\redist</b>).
'
' Postconditions: Inspect the Immediate Window.
'
' NOTE: Because this part is used elsewhere, do not save changes.
'----------------------------------------------------------------------------
Imports SolidWorks.Interop.sldworks
Imports SolidWorks.Interop.swdimxpert
Imports SolidWorks.Interop.swconst
Imports System
Imports System.Diagnostics</pre>
<pre>Partial Class SolidWorksMacro</pre>
<pre>    Dim swModel As IModelDoc2
    Dim swModelDocExt As IModelDocExtension
    Dim swSelMgr As ISelectionMgr
    Dim swConfig As IConfiguration
    Dim swFeature As IFeature
    Dim swAnn As IFeature
    Dim swSchema As IDimXpertManager
    Dim swDXPart As DimXpertPart
    Dim msgStr As String
    Dim msgStr2 As String
    Dim displaytype As swDimXpertTreeDisplay_e
    Dim n As Integer
    Dim boolstatus As Boolean

    Sub main()</pre>
<pre>        swModel = swApp.<b>ActiveDoc</b>
        swModelDocExt = swModel.<b>Extension</b>
        swSelMgr = swModel.<b>SelectionManager</b>
</pre>
<pre>        ' The following code is commented out because it may not work in early releases of 2010
        ' Select a DimXpert schema using swSelectType_e.swSelSWIFTSCHEMA type
        'boolstatus = swModelDocExt.<b>SelectByID2</b>(&quot;Scheme15&quot;, &quot;SWIFTSCHEMA&quot;, 0, 0, 0, False, 0, Nothing, 0)
        ' Get IDimXpertManager (swSchema) for the DimXpert schema using ISelectionManager.GetSelectedObject6()()
        'Set swSchema = swSelMgr.<b>GetSelectedObject6</b>(1, -1)
        'Debug.Print (swSchema.<b>SchemaName</b>) + &quot; acquired through ISelectionManager&quot;</pre>
<pre>        ' Get IDimXpertManager (swSchema) for a DimXpert schema using IModelDocExtension.DimXpertManager()
        swSchema = swModelDocExt.<b>DimXpertManager</b>(&quot;Default&quot;, True)
        Debug.Print((swSchema.<b>SchemaName</b>) + &quot; acquired through IModelDocExtension&quot;)</pre>
<pre>        ' Get IDimXpertManager (swSchema) for a DimXpert schema using IConfiguration.DimXpertManager()
        swConfig = swModel.<b>GetConfigurationByName</b>(&quot;Default&quot;)
        swSchema = swConfig.<b>DimXpertManager</b>(True)
        Debug.Print((swSchema.<b>SchemaName</b>) + &quot; acquired through IConfiguration&quot;)
        msgStr = (swSchema.<b>SchemaName</b>) + &quot; shows a &quot;
        displaytype = swSchema.<b>TreeDisplay</b>
        If (displaytype = swDimXpertTreeDisplay_e.swDimXpertTreeDisplay_Flat) Then
            Debug.Print(msgStr + &quot;flat display of information on DimXpert tab&quot;)
        ElseIf (displaytype = swDimXpertTreeDisplay_e.swDimXpertTreeDisplay_Annotation) Then
            Debug.Print(msgStr + &quot;annotation-based display of information on DimXpert tab&quot;)
        ElseIf (displaytype = swDimXpertTreeDisplay_e.swDimXpertTreeDisplay_Feature) Then
            Debug.Print(msgStr + &quot;feature-based display of information on DimXpert tab&quot;)
        End If</pre>
<pre>        ' Select a DimXpert annotation using swSelectType_e.swSelSWIFTANNOTATIONS type
        boolstatus = swModelDocExt.<b>SelectByID2</b>(&quot;Flatness1&quot;, &quot;SWIFTANN&quot;, 0, 0, 0, False, 0, Nothing, 0)</pre>
<pre>        ' All DimXpert features and annotations returned by GetSelectedObject6 are instances of IFeature
        swAnn = swSelMgr.<b>GetSelectedObject6</b>(1, -1)</pre>
<pre>        ' Is Flatness1 an annotation or a feature?
        If (swAnn.<b>IsDimXpertAnnotation</b>()) Then
            msgStr = &quot;Flatness1 is an annotation&quot;
            Debug.Print(&quot;&quot;)
            Debug.Print(msgStr)
        ElseIf (swAnn.<b>IsDimXpertFeature</b>()) Then
            msgStr = &quot;Flatness1 is a feature&quot;
            Debug.Print(&quot;&quot;)
            Debug.Print(msgStr)
        End If</pre>
<pre>        ' Get all DimXpert features and annotations using DimXpertPart
        swDXPart = swSchema.<b>DimXpertPart</b></pre>
<pre>        ' Display all DimXpert annotations using IDimXpertManager.DimXpertPart
        Dim annCount As Integer
        annCount = swDXPart.<b>GetAnnotationCount</b>
        msgStr = &quot;Total of &quot;
        msgStr2 = annCount
        msgStr = msgStr + msgStr2 + &quot; annotations in &quot; + (swSchema.<b>SchemaName</b>)
        Debug.Print(&quot;&quot;)
        Debug.Print(msgStr)
        Dim annotations As Object
        Dim annotation As IDimXpertAnnotation
        annotations = swDXPart.<b>GetAnnotations</b>
        msgStr = (swSchema.<b>SchemaName</b>) + &quot; has the following annotations: &quot;
        Debug.Print(&quot;&quot;)
        Debug.Print(msgStr)
        For n = 0 To UBound(annotations)
            annotation = annotations(n)
            Debug.Print(&quot;  &quot; + (annotation.<b>Name</b>))
        Next
</pre>
<pre>        ' Select another DimXpert feature using swSelectType_e.swSelSWIFTFEATURES type
        boolstatus = swModelDocExt.<b>SelectByID2</b>(&quot;Plane1&quot;, &quot;SWIFTFEATURE&quot;, 0, 0, 0, False, 0, Nothing, 0)
        swFeature = swSelMgr.<b>GetSelectedObject6</b>(1, -1)</pre>
<pre>        ' Is Plane1 an annotation or a feature?
        If (swFeature.<b>IsDimXpertFeature</b>()) Then
            msgStr = &quot;Plane1 is a feature&quot;
            Debug.Print(&quot;&quot;)
            Debug.Print(msgStr)
        ElseIf (swFeature.<b>IsDimXpertAnnotation</b>()) Then
            msgStr = &quot;Flatness1 is an annotation&quot;
            Debug.Print(msgStr)
        End If
</pre>
<pre>        ' Display all DimXpert features using IDimXpertManager.DimXpertPart
        Dim featCount As Integer
        featCount = swDXPart.<b>GetFeatureCount</b>
        msgStr = &quot;Total of &quot;
        msgStr2 = featCount
        msgStr = msgStr + msgStr2 + &quot; features in &quot; + (swSchema.<b>SchemaName</b>)
        Debug.Print(&quot;&quot;)
        Debug.Print(msgStr)
        Dim features As Object
        Dim feature As IDimXpertFeature
        features = swDXPart.<b>GetFeatures</b>
        msgStr = (swSchema.<b>SchemaName</b>) + &quot; has the following features: &quot;
        Debug.Print(&quot;&quot;)
        Debug.Print(msgStr)
        For n = 0 To UBound(features)
            feature = features(n)
            Debug.Print(&quot;  &quot; + (feature.<b>Name</b>))
        Next
    End Sub</pre>
<pre>    Public swApp As SldWorks</pre>
<pre>End Class</pre>

</body>

</html>
