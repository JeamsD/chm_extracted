<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Select Tangent Faces Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=date content="11 9, 2002 7:50:27 AM">
<meta name=MS-HKWD content="VBA examples,faces">
<meta name=MS-HKWD content=Tangent>

<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=3434>
<meta name=layout-width content=750>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Select Tangent Faces Example (VBA)</h1>

<p>This example shows how to select all faces tangent to a selected face.</p>
<ol>
	<li style="font-size: 8 pt"><font face="Verdana" style="font-size: 8pt">Starting with the selected face, get the first loop in the face with IFace2::GetFirstLoop.<!--kadov_tag{{<spaces>}}-->&nbsp;</font></li>
	<li style="font-size: 8 pt"><font face="Verdana" style="font-size: 8pt">Starting with the first loop and using ILoop2::GetNext to get every loop on the 
 face:</font><ol type="a">
		<li style="font-size: 8 pt"><font face="Verdana" style="font-size: 8pt">Iterate through every coedge contained in the 
 loop using ILoop2::GetFirstCoEdge and ILoop2::GetNext. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></font></li>
		<li style="font-size: 8 pt"><font face="Verdana" style="font-size: 8pt">Using ICoEdge::GetPartner, get the partner coedge. 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></font></li>
		<li style="font-size: 8 pt"><font face="Verdana" style="font-size: 8pt">For the current coedge and the partner coedge, 
 get the face normal at the middle of the coedge.<!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->This 
 is done by calling ICoEdge::Evaluate to get the middle point of the coedge, 
 then calling ISurface::EvaluateAtPoint at the middle point on the surface 
 that contains the coedge, and finally extracting the normal vector from 
 the return value of ISurface::EvaluateAtPoint. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></font></li>
		<li style="font-size: 8 pt"><font face="Verdana" style="font-size: 8pt">If the normal vectors are equal, then use the 
 partner coedge to get the partner loop, which provides access to the partner 
 face that can be selected. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></font></li>
	</ol>
	</li>
</ol>
<pre>'------------------------------------------------------------------
' Preconditions:
' 1. Open a part, assembly, or drawing document.
' 2. Select a face on the model.
'
' Postconditions:
' 1. Selects all faces tangent to the selected face.
' 2. Examine the graphics area.
'------------------------------------------------------------------
Option Explicit</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swDoc As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swFace As SldWorks.Face2
    Dim swSelData As SldWorks.SelectData</pre>
<pre>    Set swApp = GetObject(, &quot;SldWorks.Application&quot;)
    Set swDoc = swApp.<b>ActiveDoc</b></pre>
<pre>    'Get the ISelectionMgr and make sure that a face is selected
    Set swSelMgr = swDoc.<b>SelectionManager</b>
    If swSelMgr.<b>GetSelectedObjectCount</b> &lt;&gt; 1 Then Exit Sub
    If swSelMgr.<b>GetSelectedObjectType2</b>(1) &lt;&gt; swSelFACES Then Exit Sub
    Set swSelData = swSelMgr.<b>CreateSelectData</b></pre>
<pre>    'Select all faces that are tangent to the selected face
    Set swFace = swSelMgr.<b>GetSelectedObject6</b>(1, -1)    </pre>
<pre>    Call SelectTangentFaces(swFace, swSelData)</pre>
<pre>End Sub</pre>
<pre> </pre>
<pre>'This subroutine selects all faces that are tangent to the given face
Sub SelectTangentFaces(swFace As Object, swSelData As Object)
    Dim swPartnerFace As SldWorks.Face2      'Partner face for the current face
    Dim swThisLoop As SldWorks.Loop2         'Current loop
    Dim swPartnerLoop As SldWorks.Loop2      'Partner to the current loop
    Dim swFirstCoEdge As SldWorks.CoEdge     'First coedge on a loop
    Dim swThisCoEdge As SldWorks.CoEdge      'Current coedge
    Dim swPartnerCoEdge As SldWorks.CoEdge   'Partner to the current coedge
    Dim swEntity As Entity          'Entity containing the face to be selected
    Dim varThisNormal As Variant    'Normal vector for the current face
    Dim varPartnerNormal As Variant 'Normal vector for the partner face</pre>
<pre>    Set swThisLoop = swFace.<b>GetFirstLoop</b></pre>
<pre>    'For every loop on this face
    Do While Not swThisLoop Is Nothing
        'Get the first coedge of this loop
        Set swFirstCoEdge = swThisLoop.<b>GetFirstCoEdge</b>
        Set swThisCoEdge = swFirstCoEdge
        'Iterate through the coedges
        Do
            Set swPartnerCoEdge = swThisCoEdge.<b>GetPartner</b>
            'Get the normal vectors for the face, and its partner
            varThisNormal = <b>GetFaceNormalAtMidCoEdge</b>(swThisCoEdge)
            varPartnerNormal = <b>GetFaceNormalAtMidCoEdge</b>(swPartnerCoEdge)
           'If the normals are equal, then the faces are tangent
           'and the partner face should be selected
            If VectorsAreEqual(varThisNormal, varPartnerNormal) = True Then
                Set swPartnerLoop = swPartnerCoEdge.<b>GetLoop</b>
                Set swPartnerFace = swPartnerLoop.<b>GetFace</b>
                Set swEntity = swPartnerFace
                swEntity.<b>Select4</b> True, swSelData
            End If</pre>
<pre>            ' Move to the next
            Set swThisCoEdge = swThisCoEdge.<b>GetNext</b>
            If swThisCoEdge Is swFirstCoEdge Then Exit Do
        Loop
        ' Move to the next loop
        Set swThisLoop = swThisLoop.<b>GetNext</b>
    Loop
End Sub</pre>
<pre>'This function returns the normal vector for the face at the provided coedge
Function GetFaceNormalAtMidCoEdge(swCoEdge As Object) As Variant
    Dim swFace As SldWorks.Face2        'Face containing swCoEdge
    Dim swSurface As SldWorks.Surface   'Surface containing swCoEdge,
                                        'used to get the normal
    Dim swLoop As SldWorks.Loop2        'Loop containing swCoEdge
    Dim varParams As Variant    'Curve parameters for swCoEdge
    Dim varPoint As Variant     'Array containing the location dblMidParam
    Dim dblMidParam As Double   'Middle of the coedge
    Dim dblNormal(2) As Double  'New vector</pre>
<pre>    varParams = swCoEdge.<b>GetCurveParams</b>
    'Set the evaluation point based on the coedge curve parameters
    If varParams(6) &gt; varParams(7) Then
        dblMidParam = (varParams(6) - varParams(7)) / 2 + varParams(7)
    Else
        dblMidParam = (varParams(7) - varParams(6)) / 2 + varParams(6)
    End If</pre>
<pre>    'Get the location of the middle of the coedge
    varPoint = swCoEdge.<b>Evaluate</b>(dblMidParam)    </pre>
<pre>    'Obtain the surface that contains swCoEdge
    Set swLoop = swCoEdge.<b>GetLoop</b>
    Set swFace = swLoop.<b>GetFace</b>
    Set swSurface = swFace.<b>GetSurface</b></pre>
<pre>    'varParams contains the normal vector at the provided points (midpoint of edge)
    varParams = swSurface.<b>EvaluateAtPoint</b>(varPoint(0), varPoint(1), varPoint(2))</pre>
<pre>    'Build the normal vector
    dblNormal(0) = varParams(0)
    dblNormal(1) = varParams(1)
    dblNormal(2) = varParams(2)</pre>
<pre>    'Return the normal vector
    GetFaceNormalAtMidCoEdge = dblNormal
End Function
</pre>
<pre>'Determines whether two vectors are equal within a tolerance of 1.0 * e^-10
Function VectorsAreEqual(varVec1 As Variant, varVec2 As Variant) As Boolean
    Dim dblMag As Double
    Dim dblDot As Double
    Dim dblUnit1(2) As Double
    Dim dblUnit2(2) As Double</pre>
<pre>    dblMag = (varVec1(0) * varVec1(0) + varVec1(1) * varVec1(1) + varVec1(2) * varVec1(2)) ^ 0.5
    dblUnit1(0) = varVec1(0) / dblMag: dblUnit1(1) = varVec1(1) / dblMag: dblUnit1(2) = varVec1(2) / dblMag
    dblMag = (varVec2(0) * varVec2(0) + varVec2(1) * varVec2(1) + varVec2(2) * varVec2(2)) ^ 0.5
    dblUnit2(0) = varVec2(0) / dblMag: dblUnit2(1) = varVec2(1) / dblMag: dblUnit2(2) = varVec2(2) / dblMag
    dblDot = dblUnit1(0) * dblUnit2(0) + dblUnit1(1) * dblUnit2(1) + dblUnit1(2) * dblUnit2(2)
    dblDot = Abs(Abs(dblDot) - 1#)
    If dblDot &lt; 0.0000000001 Then '1.0e-10
        VectorsAreEqual = True
    Else
        VectorsAreEqual = False
    End If
End Function</pre>
<pre> </pre>
 

</body>

</html>
