<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html LANG=EN-US>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Traverse Assembly Example (C++ COM)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=date content="03 18, 2002 11:50:38 AM">
<meta NAME=MS-HAID CONTENT=EXTraverseAssembly>
<meta name=MS-HKWD content="Traverse,assemblies">
<meta name=MS-HKWD content=Traverse>
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2640>
<meta name=layout-width content=630>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body LANG=EN-US>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Traverse Assembly Example (C++ COM)</h1>

<p class=apiDescriptionText>This example shows how to traverse an assembly 
 using the IComponent2 object. The method IComponent2::IGetChildren returns 
 an array, so this code must be used in an in-process DLL. Otherwise, use 
 the method IComponent2::GetChildren that returns a VARIANT.</p>

<p class=apiDescriptionText>&nbsp;</p>

<p class=apiCode>void GetModelAssembly(ISldWorks* m_pSldWorks)</p>

<p class=apiCode>{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->LPCONFIGURATION 
 pConfiguration = NULL;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->LPCOMPONENT 
 pRootComponent = NULL;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->LPMODELDOC2 
 pModelDoc = NULL;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->HRESULT 
 hres = S_OK;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->long 
 RecurseLevel = 0;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->hres 
 = m_pSldWorks-&gt;get_<span style="font-weight: bold;">IActiveDoc2</span>( 
 &amp;pModelDoc ); <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Retrieve model document pointer</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->if( 
 S_OK != hres || pModelDoc == NULL )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->return; 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Get the active configuration and root component</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->if 
 ( pModelDoc-&gt;<span style="font-weight: bold;">IGetActiveConfiguration</span>(&amp;pConfiguration) 
 == S_OK )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->if 
 ( pConfiguration-&gt;<span style="font-weight: bold;">IGetRootComponent(</span>&amp;pRootComponent) 
 == S_OK )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->CString 
 MyString;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->TraverseChildren(RecurseLevel,&amp;MyString,pRootComponent);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pRootComponent-&gt;Release();</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Display the structure in a message box</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->AfxMessageBox 
 (MyString);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pConfiguration-&gt;Release();</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->pModelDoc-&gt;Release();</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode>}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode>//////////////////////////////////////////////////////////////////////////</p>

<p class=apiCode>// Function: TraverseChildren</p>

<p class=apiCode>// Arguments: RecurseLevel - Level of recursion</p>

<p class=apiCode>// <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->MyString 
 - Textural record of assembly</p>

<p class=apiCode>// <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pComponent 
 - Component to traverse</p>

<p class=apiCode>// Return: Number of children</p>

<p class=apiCode>// Description: Perform any operations specific to the 
 component, then</p>

<p class=apiCode>// <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->if 
 the component has children, recursively call</p>

<p class=apiCode>// <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->this 
 function for each child.</p>

<p class=apiCode>//////////////////////////////////////////////////////////////////////////</p>

<p class=apiCode>int TraverseChildren(long RecurseLevel, CString* MyString, 
 LPCOMPONENT pComponent)</p>

<p class=apiCode>{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->LPCOMPONENT* 
 pChildren = NULL;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->nChildren;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->i;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->BSTR 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Name;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->HRESULT 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->hres = 
 S_OK;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->LPMODELDOC 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->pModelDoc 
 = NULL;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Retrieve the component name</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->if(RecurseLevel==0)</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Special case of top-level components</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->hres 
 = m_pSldWorks-&gt;get_<span style="font-weight: bold;">IActiveDoc</span>( 
 &amp;pModelDoc );</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->if( 
 S_OK == hres || pModelDoc != NULL ) </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->hres 
 = pModelDoc-&gt;GetTitle(&amp;Name); </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->else</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Get the component name </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->hres 
 = pComponent-&gt;get_<span style="font-weight: bold;">Name</span>(&amp;Name);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->if( 
 S_OK == hres &amp;&amp; Name != NULL )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->CString 
 tempstr;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->for( 
 i=1; I&lt;=RecurseLevel; i++)</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->tempstr 
 += &quot; &quot;;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->CString 
 Tmp(Name);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->tempstr 
 += Tmp;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->tempstr 
 += &quot;\r\n&quot;;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->*MyString 
 = *MyString + tempstr;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->RecurseLevel++;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->hres 
 = pComponent-&gt;<span style="font-weight: bold;">IGetChildrenCount</span>(&amp;nChildren);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Check if this component has children</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->if 
 ( S_OK == hres || nChildren &gt; 0 )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pChildren 
 = new LPCOMPONENT [nChildren]; </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->hres 
 = pComponent-&gt;<span style="font-weight: bold;">IGetChildren</span>((LPCOMPONENT**)&amp;pChildren);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->if(S_OK 
 == hres)</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Recursively traverse the children</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->for 
 ( i=0; i&lt;nChildren; i++ )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->TraverseChildren(RecurseLevel,MyString,pChildren[i]);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pChildren[i]-&gt;Release();</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->delete 
 [] pChildren; </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->RecurseLevel--;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->return 
 nChildren;</p>

<p class=apiCode>}</p>

<p class=apiDescriptionText><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiDescriptionText>&nbsp;</p>

</body>

</html>
