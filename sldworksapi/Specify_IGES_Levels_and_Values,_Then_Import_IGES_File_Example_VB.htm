<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Specify IGES Levels and Values, Then Import IGES File Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,IGES files">
<meta name=MS-HKWD content="VBA examples,import files">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=4117>
<meta name=layout-width content=786>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Specify IGES Levels and Values, Then Import IGES File Example (VBA)</h1>

<p>This example shows how to:</p>
<ul>
	<li><font face="Verdana" style="font-size: 8pt">specify levels and values 
	for importing IGES 
 data.</font></li>
	<li><font face="Verdana" style="font-size: 8pt">import an IGES file.</font></li>
</ul>

<pre>'------------------------------------------------
' Preconditions: Substitute the path and name
' of your IGES file where noted in the code.
'
' Postconditions: 
' 1. Creates a folder named <b>Layer 25</b>.
' 2. Imports the specified IGES file into SOLIDWORKS
'    and moves the imported IGES features to <b>Layer 25</b>.
' 3. To verify, examine the graphics area and
'    FeatureManager design tree.
'--------------------------------</pre>
<pre>Option Explicit</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim model As SldWorks.ModelDoc2
    Dim boolstatus As Boolean
    Dim fileName As String
    Dim argString As String
    Dim importData As SldWorks.ImportIgesData
    Dim Err As Long
    Dim orgSetting As Boolean
    Dim allLevels As Boolean
    Dim vOnlyLev As Variant
    Dim onlyLev(0 To 1) As Long
    Dim oneLev As Long
    Dim lastFeature As SldWorks.Feature
    Dim newFolder As SldWorks.Feature
    Dim newFolderName As String
    Dim lastFeatureName As String</pre>
<pre>    Set swApp = Application.SldWorks
    Set model = swApp.<b>ActiveDoc</b></pre>
<pre>    ' Substitute the path and name of your IGES file
    fileName = &quot;<i>path</i>\<i>IGES_file_name</i>.igs&quot;</pre>
<pre>    ' &quot;r&quot; means open new document
    ' &quot;i&quot; means insert into existing document</pre>
<pre>    If model Is Nothing Then
        argString = &quot;r&quot;
    Else    ' There is an existing part, so use it
        argString = &quot;i&quot;
    End If</pre>
<pre>    ' Fill in the import data
    Set importData = swApp.<b>GetImportFileData</b>(fileName)
    If Not importData Is Nothing Then
        ' Test the various flags
        importData.<b>IncludeSurfaces</b> = True
        importData.<b>IncludeCurves</b> = True
        importData.<b>CurvesAsSketches</b> = True  ' False = Curves as Curves
        importData.<b>ProcessByLevel</b> = False</pre>
<pre>        ' Test all levels
        '        allLevels = True
        ' False = levels specified in vOnlyLev
        '        newFolderName = &quot;All levels&quot;
        ' or, test multiple levels
        '        onlyLev(0) = 0
        '        onlyLev(1) = 6
        '        vOnlyLev = onlyLev
        '        newFolderName = &quot;Layer 0 and 6&quot;
        ' Or, test individual levels</pre>
<pre>        oneLev = 25
        vOnlyLev = oneLev
        newFolderName = &quot;Layer &quot; &amp; Format(oneLev)
        boolstatus = importData.<b>SetLevels</b>(allLevels, (vOnlyLev))
    End If</pre>
<pre> </pre>
<pre>    ' Keep the last feature to determine what's been added
    '   If this is a new document, that cannot be done, so
    '   just hard code the name of the Origin feature,
    '   which is currently the last feature in a new part document
    '   It is better to always create a new
    '   document first, and then call SldWorks::LoadFile4
    '   with &quot;i&quot; argString to avoid this potential problem</pre>
<pre>    If Not model Is Nothing Then
        Set lastFeature = model.<b>FeatureByPositionReverse</b>(0)
        lastFeatureName = lastFeature.<b>Name</b>
    Else
        lastFeatureName = &quot;Origin&quot;
    End If</pre>
<pre>    ' Setting this user preference to true means that the IGES
    '   dialog is displayed
    ' Setting this user preference to false means that the
    '   IGES dialog is not displayed, and the import IGES data
    '   is used if it is passed in, or, if it is not,
    '   then the default values for the dialog are used</pre>
<pre>    orgSetting = swApp.<b>GetUserPreferenceToggle</b>(swUserPreferenceToggle_e.swIGESImportShowLevel)
    swApp.<b>SetUserPreferenceToggle</b> swUserPreferenceToggle_e.swIGESImportShowLevel, False</pre>
<pre>    Set model = swApp.<b>LoadFile4</b>(fileName, argString, importData, Err)
 
</pre>
<pre>    ' swApp.<b>SetUserPreferenceToggle</b> swUserPreferenceToggle_e.swIGESImportShowLevel, orgSetting</pre>
<pre>    ' If the SldWorks::LoadFile4 failed, do not continue
     If model Is Nothing Then
        Debug.Print &quot;Problem loading file. Error message = &quot; &amp; Err
        Exit Sub
    End If</pre>
<pre>    ' Retrieve all of the features that were created
    ' and move them into their own new folder</pre>
<pre>    model.<b>ClearSelection2</b> True</pre>
<pre>    ' Select features that are then used by FeatureManager::InsertFeatureTreeFolder2
    ' Either method of selection seems to take the same amount of time</pre>
<pre>    boolstatus = select_new_features_individually(model, lastFeatureName)
    ' boolstatus = multiselect_new_features(model, lastFeatureName)</pre>
<pre>    If (boolstatus) Then
        Set newFolder = model.FeatureManager.<b>InsertFeatureTreeFolder2</b>(swFeatureTreeFolder_Containing)
        If Not newFolder Is Nothing Then
            newFolder.<b>Name</b> = newFolderName
        End If
        model.<b>ClearSelection2</b> True
    End If
End Sub
 
</pre>
<pre>Private Function select_new_features_individually(model As SldWorks.ModelDoc2, lastFeatureName As String) As Boolean</pre>
<pre>    Dim testFeature As SldWorks.Feature
    Dim loopCount As Long
    Dim boolstatus As Boolean</pre>
<pre>    select_new_features_individually = False</pre>
<pre>    loopCount = 0
    Set testFeature = model.<b>FeatureByPositionReverse</b>(loopCount)
    While (Not testFeature Is Nothing) And (Not testFeature.Name = lastFeatureName)
        loopCount = loopCount + 1
        boolstatus = testFeature.<b>Select2</b>(True, 0)
        If Not boolstatus = 0 Then
            select_new_features_individually = True
        End If
        Set testFeature = model.<b>FeatureByPositionReverse</b>(loopCount)
    Wend
End Function</pre>
<pre>Private Function multiselect_new_features(model As SldWorks.ModelDoc2, lastFeatureName As String) As Boolean</pre>
<pre>    Dim testFeature As SldWorks.Feature
    Dim loopCount As Long
    Dim featureList() As SldWorks.Feature
    Dim vFeatureList As Variant
    Dim longstatus As Long
    Dim selMgr As SldWorks.SelectionMgr
    Dim selData As SldWorks.SelectData</pre>
<pre>    multiselect_new_features = False</pre>
<pre>    loopCount = 0
    Set testFeature = model.<b>FeatureByPositionReverse</b>(loopCount)</pre>
<pre>    While (Not testFeature Is Nothing) And (Not testFeature.Name = lastFeatureName)
        loopCount = loopCount + 1
        Set testFeature = model.<b>FeatureByPositionReverse</b>(loopCount)
    Wend</pre>
<pre>    ReDim featureList(0 To loopCount - 1)</pre>
<pre>    loopCount = 0
    Set testFeature = model.<b>FeatureByPositionReverse</b>(loopCount)</pre>
<pre>    While (Not testFeature Is Nothing) And (Not testFeature.<b>Name</b> = lastFeatureName)
        Set featureList(loopCount) = testFeature
        loopCount = loopCount + 1
        Set testFeature = model.<b>FeatureByPositionReverse</b>(loopCount)
    Wend 
</pre>
<pre>    vFeatureList = featureList
    Set selMgr = model.<b>SelectionManager</b>
    Set selData = selMgr.<b>CreateSelectData</b>
    longstatus = model.Extension.<b>MultiSelect2</b>((vFeatureList), True, selData)
    If longstatus &gt; 0 Then
        multiselect_new_features = True
    End If
End Function</pre>

</body>

</html>
