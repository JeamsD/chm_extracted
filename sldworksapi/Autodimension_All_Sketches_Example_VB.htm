<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Autodimension All Sketches Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=8113>
<meta name=layout-width content=723>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">
<META NAME="MS-HKWD" CONTENT="VBA examples,autodimension">
<META NAME="MS-HKWD" CONTENT="VBA examples,sketches">
</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Autodimension All Sketches Example (VBA)</h1>

<p>This example shows how to autodimension all under-constrained sketches in a part.</p>

<pre>'------------------------------------------------------------
' Preconditions:
' 1. Verify that the specified part document template exists.
' 2. Open the Immediate window.
'
' Postconditions:
' 1. Opens a new part document.
' 2. Inserts two sketches.
' 3. Autodimensions the sketches.
' 4. Examine the Immediate window.
'-----------------------------------------------------------
Option Explicit</pre>
<pre>Const swTnProfileFeature As String = &quot;ProfileFeature&quot;
Const nTolerance As Double = 0.00000001</pre>
<pre>Sub FindAllUnderConstrainedSketches(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, sSketchNameArr() As String)</pre>
<pre>    Dim swPart As SldWorks.PartDoc
    Dim swFeat As SldWorks.Feature
    Dim swSketch As SldWorks.Sketch</pre>
<pre>    Set swPart = swModel
    Set swFeat = swPart.<b>FirstFeature</b>
    Do While Not swFeat Is Nothing
        If swTnProfileFeature = swFeat.<b>GetTypeName2</b> Then
            Set swSketch = swFeat.<b>GetSpecificFeature2</b>
            If swUnderConstrained = swSketch.<b>GetConstrainedStatus</b> Then
                sSketchNameArr(UBound(sSketchNameArr)) = swFeat.<b>Name</b>
                ReDim Preserve sSketchNameArr(UBound(sSketchNameArr) + 1)
            End If
        End If
        Set swFeat = swFeat.<b>GetNextFeature</b>
    Loop</pre>
<pre>    ' Remove last empty sketch name
    ReDim Preserve sSketchNameArr(UBound(sSketchNameArr) - 1)</pre>
<pre>End Sub</pre>
<pre>Function GetAllSketchLines(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch) As Variant</pre>
<pre>    Dim vSketchSegArr As Variant
    Dim vSketchSeg As Variant
    Dim swSketchSeg As SldWorks.sketchSegment
    Dim swSketchCurrLine As SldWorks.SketchLine
    Dim swSketchLineArr() As SldWorks.SketchLine
    ReDim swSketchLineArr(0)</pre>
<pre>    vSketchSegArr = swSketch.<b>GetSketchSegments</b>
    If Not IsEmpty(vSketchSegArr) Then
        For Each vSketchSeg In vSketchSegArr
            Set swSketchSeg = vSketchSeg
            If swSketchLINE = swSketchSeg.<b>GetType</b> Then
                Set swSketchCurrLine = swSketchSeg
                Set swSketchLineArr(UBound(swSketchLineArr)) = swSketchCurrLine
                ReDim Preserve swSketchLineArr(UBound(swSketchLineArr) + 1)
            End If
        Next
    End If</pre>
<pre>    If 0 = UBound(swSketchLineArr) Then
        ' No straight lines in this sketch
        GetAllSketchLines = Empty
        Exit Function
    End If</pre>
<pre>    ' Remove last empty sketch line
    ReDim Preserve swSketchLineArr(UBound(swSketchLineArr) - 1)
    GetAllSketchLines = swSketchLineArr</pre>
<pre>End Function
    
</pre>
<pre>Function GetSketchPoint(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSketchPt As SldWorks.SketchPoint) As Boolean</pre>
<pre>    Dim vSketchPtArr As Variant   

    vSketchPtArr = swSketch.<b>GetSketchPoints2</b>
    If Not IsEmpty(vSketchPtArr) Then
        ' Use first point
        Set swSketchPt = vSketchPtArr(0)
        GetSketchPoint = True
        Exit Function
    End If    </pre>
<pre>    GetSketchPoint = False</pre>
<pre>End Function</pre>
<pre>Function FindVerticalOrigin(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSketchSegVert As SldWorks.sketchSegment, swSketchPtVert As SldWorks.SketchPoint) As Boolean</pre>
<pre>    Dim vSketchLineArr As Variant
    Dim vSketchLine As Variant
    Dim swSketchCurrLine As SldWorks.SketchLine
    Dim swStartPt As SldWorks.SketchPoint
    Dim swEndPt As SldWorks.SketchPoint</pre>
<pre>    ' Try to get first vertical line
    vSketchLineArr = GetAllSketchLines(swApp, swModel, swSketch)</pre>
<pre>    If Not IsEmpty(vSketchLineArr) Then
        For Each vSketchLine In vSketchLineArr
            Set swSketchCurrLine = vSketchLine
            Set swStartPt = swSketchCurrLine.<b>GetStartPoint2</b>
            Set swEndPt = swSketchCurrLine.<b>GetEndPoint2</b></pre>
<pre>            If Abs(swStartPt.<b>X</b> - swEndPt.<b>X</b>) &lt; nTolerance Then
                Set swSketchSegVert = swSketchCurrLine
                FindVerticalOrigin = True
                Exit Function
            End If
        Next
    End If</pre>
<pre>    ' Try to get the first point
    FindVerticalOrigin = GetSketchPoint(swApp, swModel, swSketch, swSketchPtVert)</pre>
<pre>End Function</pre>
<pre>Function FindHorizontalOrigin(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swSketchSegHoriz As SldWorks.sketchSegment, swSketchPtHoriz As SldWorks.SketchPoint) As Boolean</pre>
<pre>    Dim vSketchLineArr As Variant
    Dim vSketchLine As Variant
    Dim swSketchCurrLine As SldWorks.SketchLine
    Dim swStartPt As SldWorks.SketchPoint
    Dim swEndPt As SldWorks.SketchPoint</pre>
<pre>    ' Try to get first horizontal line
    vSketchLineArr = GetAllSketchLines(swApp, swModel, swSketch)</pre>
<pre>    If Not IsEmpty(vSketchLineArr) Then
        For Each vSketchLine In vSketchLineArr
            Set swSketchCurrLine = vSketchLine
            Set swStartPt = swSketchCurrLine.<b>GetStartPoint2</b>
            Set swEndPt = swSketchCurrLine.<b>GetEndPoint2</b></pre>
<pre>            If Abs(swStartPt.<b>Y</b> - swEndPt.<b>Y</b>) &lt; nTolerance Then
                Set swSketchSegHoriz = swSketchCurrLine
                FindHorizontalOrigin = True
                Exit Function
            End If
        Next
    End If</pre>
<pre>    ' Try to get the first point
    FindHorizontalOrigin = GetSketchPoint(swApp, swModel, swSketch, swSketchPtHoriz)</pre>
<pre>End Function</pre>
<pre>Function AutoDimensionSketch(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch) As Long</pre>
<pre>    Dim swFeat As SldWorks.Feature
    Dim swSketchSegHoriz As SldWorks.sketchSegment
    Dim swSketchPtHoriz As SldWorks.SketchPoint
    Dim swSketchSegVert As SldWorks.sketchSegment
    Dim swSketchPtVert As SldWorks.SketchPoint
    Dim swSketchMgr as SldWorks.SketchManager
    Dim bRet As Boolean</pre>
<pre>    If False = FindHorizontalOrigin(swApp, swModel, swSketch, swSketchSegHoriz, swSketchPtHoriz) Then
        AutoDimensionSketch = swAutodimStatusDatumLineNotHorizontal
        Exit Function
    End If</pre>
<pre>    If False = FindVerticalOrigin(swApp, swModel, swSketch, swSketchSegVert, swSketchPtVert) Then
        AutoDimensionSketch = swAutodimStatusDatumLineNotVertical
        Exit Function
    End If</pre>
<pre>    Set swFeat = swSketch
    bRet = swFeat.<b>Select2</b>(False, 0)</pre>
<pre>    ' Editing sketch clears selections
    swModel.<b>EditSketch</b></pre>
<pre>    ' Reselect sketch segments for autodimensioning
    If Not swSketchSegVert Is Nothing Then
        ' Vertical line is for horizontal datum
        bRet = swSketchSegVert.<b>Select4</b>(True, Nothing)
    ElseIf Not swSketchPtHoriz Is Nothing Then
             bRet = swSketchPtHoriz.<b>Select4</b>(True, Nothing)
    ElseIf Not swSketchPtVert Is Nothing Then
            ' Use any sketch point for horizontal datum
             bRet = swSketchPtVert.<b>Select4</b>(True, Nothing)
    End If</pre>
<pre>    If Not swSketchSegHoriz Is Nothing Then
        ' Horizontal line is for vertical datum
        bRet = swSketchSegHoriz.<b>Select4</b>(True, Nothing)
    ElseIf Not swSketchPtVert Is Nothing Then
        bRet = swSketchPtVert.<b>Select4</b>(True, Nothing)
    ElseIf Not swSketchPtHoriz Is Nothing Then
            ' Use any sketch point for vertical datum
            bRet = swSketchPtHoriz.<b>Select4</b>(True, Nothing)
    End If    </pre>
<pre>    ' No straight lines, probably contains circles,
    ' so use sketch points for datums
    If IsEmpty(GetAllSketchLines(swApp, swModel, swSketch)) Then
        If Not swSketchPtHoriz Is Nothing Then
            bRet = swSketchPtHoriz.<b>Select4</b>(False, Nothing)
        ElseIf Not swSketchPtVert Is Nothing Then
            bRet = swSketchPtVert.<b>Select4</b>(False, Nothing)
        End If
    End If</pre>
<pre>    AutoDimensionSketch = swSketch.<b>AutoDimension2</b>(swAutodimEntitiesAll, swAutodimSchemeBaseline, swAutodimHorizontalPlacementBelow, swAutodimSchemeBaseline, swAutodimVerticalPlacementLeft)</pre>
<pre>    ' Redraw so dimensions are displayed
    swModel.<b>GraphicsRedraw2</b></pre>
<pre>    ' Exit sketch mode
    Set swSketchMgr = swModel.<b>SketchManager</b>
    swSketchMgr.<b>InsertSketch</b> False</pre>
<pre>End Function</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swModelDocExt As SldWorks.ModelDocExtension
    Dim swPart As SldWorks.PartDoc
    Dim sketchLines As Variant
    Dim sSketchNameArr() As String
    Dim sSketchName As Variant
    Dim swFeat As SldWorks.Feature
    Dim swSketch As SldWorks.Sketch
    Dim sketchSegment As SldWorks.sketchSegment
    Dim swSketchMgr As SldWorks.SketchManager
    Dim nRetVal As Long
    Dim bRet As Boolean</pre>
<pre>    Set swApp = CreateObject(&quot;SldWorks.Application&quot;)</pre>
<pre>    ' Create new part document and sketch
    Set swModel = swApp.<b>NewDocument</b>(&quot;C:\ProgramData\SolidWorks\SolidWorks 2015\templates\Part.prtdot&quot;, 0, 0, 0)
    Set swModelDocExt = swModel.<b>Extension</b>
    bRet = swModelDocExt.<b>SetUserPreferenceToggle</b>(swUserPreferenceToggle_e.swSketchAddConstToRectEntity, swUserPreferenceOption_e.swDetailingNoOptionSpecified, False)
    bRet = swModelDocExt.<b>SetUserPreferenceToggle</b>(swUserPreferenceToggle_e.swSketchAddConstLineDiagonalType, swUserPreferenceOption_e.swDetailingNoOptionSpecified, True)
    Set swSketchMgr = swModel.<b>SketchManager</b>
    sketchLines = swSketchMgr.<b>CreateCornerRectangle</b>(0, 0, 0, 7.11560575730914E-02, -4.80714437538268E-02, 0)
    swModel.<b>ClearSelection2</b> True
    bRet = swModelDocExt.<b>SetUserPreferenceToggle</b>(swUserPreferenceToggle_e.swSketchAddConstToRectEntity, swUserPreferenceOption_e.swDetailingNoOptionSpecified, False)
    bRet = swModelDocExt.<b>SetUserPreferenceToggle</b>(swUserPreferenceToggle_e.swSketchAddConstLineDiagonalType, swUserPreferenceOption_e.swDetailingNoOptionSpecified, True)
    sketchLines = swSketchMgr.<b>CreateCornerRectangle</b>(-0.100496797175254, 4.81170506199078E-02, 0, -5.06046179404507E-02, 1.00165849869995E-02, 0)
    swModel.<b>ClearSelection2</b> True
    Set sketchSegment = swSketchMgr.<b>CreateCircle</b>(-0.06189, -0.041869, 0#, -0.066641, -0.077213, 0#)
    swModel.<b>ClearSelection2</b> True
    swSketchMgr.<b>InsertSketch</b> True 
    Set sketchSegment = swSketchMgr.<b>CreateCircle</b>(-0.032637, 0.106589, 0#, -0.021539, 0.095387, 0#)
    swModel.<b>ClearSelection2</b> (True)
    Set sketchSegment = swSketchMgr.<b>CreateCircle</b>(0#, 0.083617, 0#, 0.01255, 0.067729, 0#)
    swModel.<b>ClearSelection2</b> (True)
    swSketchMgr.<b>InsertSketch</b> (True)
    swModel.<b>ClearSelection2</b> (True)</pre>
<pre>    Set swPart = swModel    </pre>
<pre>    ReDim sSketchNameArr(0)</pre>
<pre>    ' Find all under-constrained sketches
    FindAllUnderConstrainedSketches swApp, swModel, sSketchNameArr</pre>
<pre>    ' Autodimension all under-constrained sketches
    For Each sSketchName In sSketchNameArr
        Set swFeat = swPart.<b>FeatureByName</b>(sSketchName)
        Set swSketch = swFeat.<b>GetSpecificFeature2</b></pre>
<pre>        nRetVal = AutoDimensionSketch(swApp, swModel, swSketch)</pre>
<pre>        Debug.Print sSketchName &amp; &quot; autodimensioned (0 = success): &quot; &amp; nRetVal
    Next</pre>
<pre>End Sub</pre>

</body>

</html>
