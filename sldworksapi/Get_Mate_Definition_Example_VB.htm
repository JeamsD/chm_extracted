<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Mate Definition Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,mates">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=4178>
<meta name=layout-width content=628>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Get Mate Definition Example (VBA)</h1>

<p>This example shows how to retrieve the mate definition.</p>

<pre>'-----------------------------------------------
' Preconditions:
' 1. Open an assembly document containing mates.
' 2. Select a mate.
' 3. Open the Immediate window.
'
' Postconditions:
' 1. Gets the mate definition.
' 2. Examine the Immediate window.
'-----------------------------------------------
Option Explicit</pre>
<pre>Sub ProcessDisplayDimension(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swDispDim As SldWorks.DisplayDimension, nVarFactor As Double, sVarType As String)
    Dim swDim As SldWorks.Dimension
    Dim vDimValueArr As Variant</pre>
<pre>    If Nothing Is swDispDim Then
        Debug.Print &quot;     No display dimension&quot;
        Debug.Print &quot; &quot;
        Exit Sub
    End If</pre>
<pre>    Set swDim = swDispDim.<b>GetDimension</b></pre>
<pre>    vDimValueArr = swDim.<b>GetSystemValue3</b>(swThisConfiguration, Empty)
    Debug.Assert Not IsEmpty(vDimValueArr)
    Debug.Assert 0 = UBound(vDimValueArr)</pre>
<pre>    ' Show name and value of dimension
    Debug.Print &quot;      Dim Name      = &quot; &amp; swDim.<b>FullName</b>
    Debug.Print &quot;      Dim Value     = &quot; &amp; vDimValueArr(0) * nVarFactor &amp; sVarType
    Debug.Print &quot; &quot;</pre>
<pre>End Sub
 
</pre>
<pre>Sub ProcessMateEntity(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swMateEnt As SldWorks.MateEntity2)
    Dim swComp As SldWorks.Component2
    Dim vEntParam As Variant</pre>
<pre>    If Nothing Is swMateEnt Then
        Debug.Print &quot;      No mate entity&quot;
        Debug.Print &quot; &quot;
        Exit Sub
    End If</pre>
<pre>    Set swComp = swMateEnt.<b>ReferenceComponent</b>
    </pre>
<pre>    vEntParam = swMateEnt.<b>EntityParams</b>
    Debug.Assert Not IsEmpty(vEntParam)
    Debug.Assert 7 = UBound(vEntParam)</pre>
<pre>    ' Show name of mate component entity and its parameters
    Debug.Print &quot;      Ref Comp  = &quot; &amp; swComp.<b>Name2</b>
    Debug.Print &quot;      Location  = (&quot; &amp; vEntParam(0) * 1000# &amp; &quot;, &quot; &amp; vEntParam(1) * 1000# &amp; &quot;, &quot; &amp; vEntParam(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      (i, j, k) = (&quot; &amp; vEntParam(3) &amp; &quot;, &quot; &amp; vEntParam(4) &amp; &quot;, &quot; &amp; vEntParam(5) &amp; &quot;)&quot;
    Debug.Print &quot;      Radius 1  = &quot; &amp; vEntParam(6) * 1000# &amp; &quot; mm&quot;
    Debug.Print &quot;      Radius 2  = &quot; &amp; vEntParam(7) * 1000# &amp; &quot; mm&quot;
    Debug.Print &quot; &quot;</pre>
<pre>End Sub</pre>
<pre>Sub ProcessMate(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swMate As SldWorks.Mate2)
    Dim sVarType As String
    Dim nVarFactor As Double
    Dim nNumMateEnt As Long
    Dim i As Long</pre>
<pre>    ' Get the number of entities for the selected mate
    nNumMateEnt = swMate.<b>GetMateEntityCount</b></pre>
<pre>    ' If mate type is Angle or Distance, then set conversion values
    Select Case swMate.<b>Type</b>
        Case swMateANGLE
            ' 1 radian = 180º/p = 57.295779513º or approximately 57.3º
            sVarType = &quot; deg&quot;
            nVarFactor = 57.3
        Case swMateDISTANCE
            sVarType = &quot; mm&quot;
            nVarFactor = 1000#
    End Select</pre>
<pre>    ' Show if mate is aligned and can be flpped
    Debug.Print &quot;    Alignment          = &quot; &amp; swMate.<b>Alignment</b>
    Debug.Print &quot;    CanBeFlipped       = &quot; &amp; swMate.<b>CanBeFlipped</b>
    </pre>
<pre>    ' If mate is Angle or Distance, show variances
    If swMateANGLE = swMate.Type Or swMateDISTANCE = swMate.<b>Type</b> Then
        Debug.Print &quot;    MaximumVariation   = &quot; &amp; swMate.<b>MaximumVariation</b> * nVarFactor &amp; sVarType
        Debug.Print &quot;    MinimumVariation   = &quot; &amp; swMate.<b>MinimumVariation</b> * nVarFactor &amp; sVarType
    End If</pre>
<pre>    ' Show type of mate
    Debug.Print &quot;    Type               = &quot; &amp; swMate.<b>Type</b></pre>
<pre>    ProcessDisplayDimension swApp, swModel, swMate.DisplayDimension, nVarFactor, sVarType</pre>
<pre>    For i = 0 To nNumMateEnt - 1
        ProcessMateEntity swApp, swModel, swMate.<b>MateEntity</b>(i)
    Next i</pre>
<pre>End Sub</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swFeat As SldWorks.Feature
    Dim swMate As SldWorks.Mate2
    Dim bRet As Boolean</pre>
<pre>    Set swApp = Application.SldWorks
    Set swModel = swApp.<b>ActiveDoc</b>
    Set swSelMgr = swModel.<b>SelectionManager</b>
    Set swFeat = swSelMgr.<b>GetSelectedObject6</b>(1, -1)
    Set swMate = swFeat.<b>GetSpecificFeature2</b>
    Debug.Print &quot;File = &quot; &amp; swModel.<b>GetPathName</b>    </pre>
<pre>    ' Show name of selected feature (in this case, a mate) and name of feature
    Debug.Print &quot;  &quot; &amp; swFeat.<b>Name</b> &amp; &quot; [&quot; &amp; swFeat.<b>GetTypeName</b> &amp; &quot;]&quot;    </pre>
<pre>    ProcessMate swApp, swModel, swMate</pre>
<pre>End Sub
</pre>

</body>

</html>
