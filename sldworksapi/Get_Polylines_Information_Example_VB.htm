<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Polylines Information Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,lines">
<meta name=MS-HKWD content="VBA examples,polylines">
<meta name=MS-HKWD content=Polylines>
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=7572>
<meta name=layout-width content=628>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Get Polylines Information Example (VBA)</h1>

<p>This example shows how to use IView::GetPolyLines5 and IView::GetSketch. 
 This example also illustrates the differences between projected model geometry and 
 sketched geometry.</p>

<pre>'---------------------------------------------------------------
' Preconditions:
' 1. Open a drawing that contains:
'    * drawing views of a model comprised of arcs, circles,
'      ellipses, splines, and straight lines.
'    * sketched arcs, circles, ellipses, splines, and
'      straight lines on the drawing.
' 2. Verify that <b>c:\temp</b> exists.
'
' Postconditions:
' 1. Gets the drawing's polylines and any sketches on the 
'    drawing information.
' 2. Open <b>c:\temp\PolylinesInformation.txt</b> in a text editor
'    and examine the contents of the file.
'---------------------------------------------------------------
Option Explicit</pre>
<pre>Dim swApp As SldWorks.SldWorks</pre>
<pre>Sub main()</pre>
<pre>    Dim swModel As SldWorks.ModelDoc2
    Dim swDrawing As SldWorks.DrawingDoc
    Dim swView As SldWorks.View
    Dim swSheetView As SldWorks.View
    Dim swSketch As SldWorks.Sketch</pre>
<pre>    ' Get SOLIDWORKS application
    Set swApp = Application.SldWorks</pre>
<pre>    ' Get active document
    Set swModel = swApp.<b>ActiveDoc</b>    </pre>
<pre>    ' Open output file for polylines information
    Open &quot;c:\temp\PolylinesInformation.txt&quot; For Output As #1</pre>
<pre>    ' Downcast model to a drawing
    Set swDrawing = swModel</pre>
<pre>    ' Get the first view, which is the drawing sheet
    Set swSheetView = swDrawing.<b>GetFirstView</b></pre>
<pre>    ' Print its contents
    PrintView swSheetView</pre>
<pre>    ' Get the sketch for the drawing sheet view
    Set swSketch = swSheetView.<b>GetSketch</b></pre>
<pre>    ' Print its contents
    PrintSketch swSketch</pre>
<pre>    ' Traverse all drawing views on the sheet
    ' First drawing view on the sheet
    Set swView = swSheetView.<b>GetNextView</b>
    Do While Not swView Is Nothing
        PrintView swView
        Set swSketch = swView.<b>GetSketch</b>
        PrintSketch swSketch
        ' Go to next drawing view on the sheet
        Set swView = swView.<b>GetNextView</b>
    Loop    </pre>
<pre>    ' Close c:\temp\PolylinesInformation.txt
    Close #1</pre>
<pre>End Sub</pre>
<pre>Function PrintView(swView As SldWorks.View) As Boolean
    Dim vPolyLinesBuffer As Variant
    Dim vLines As Variant
    Dim lNumGeomData As Long
    Dim i As Integer
    Dim iGeomIndex As Integer
    Dim lNumLines As Long
    Dim lItemType As Long
    Dim lBufferSize As Long
    Dim lBufferIdx As Long
    Dim lGeomDataSize As Long
    Dim dGeomData(11) As Double
    Dim lLineData(3) As Long
    Dim lLayerData(1) As Long
    Dim lNumPoints As Long
    Dim dPoint(2) As Double
    Dim lGeomDataIdx As Long
    Dim lLineDataIdx As Long
    Dim lLayerDataIdx As Long
    Dim lStartIdx As Long
    Dim lEndIdx As Long
    Dim lLineDataSize As Long
    Dim lLayerDataSize As Long
    Dim lNumProjectedElements As Long
    Dim lNumSketchedElements As Long</pre>
<pre>    If swView Is Nothing Then
        Exit Function
    End If</pre>
<pre>    Write #1, &quot;&quot;
    Write #1, &quot;View = &quot; + swView.<b>GetName2</b></pre>
<pre>    ' Report projected model geometry
    ' Initialize the number of projected elements for data is contained in the buffer
    lNumProjectedElements = 0    </pre>
<pre>    ' Get all the polyline data into a buffer
    ' No cross-hatch lines
    vPolyLinesBuffer = swView.<b>GetPolylines5</b>(0)</pre>
<pre>    ' Any polyline data present ?
    If Not IsEmpty(vPolyLinesBuffer) Then
        ' Entries for line data and layer data have a fixed size
        lLineDataSize = 4
        lLayerDataSize = 2
        ' Get the total buffer size
    	lBufferSize = UBound(vPolyLinesBuffer) - LBound(vPolyLinesBuffer) + 1
        ' Start to traverse the buffer at index 0
        lBufferIdx = 0
        ' Traverse the buffer, consuming data elements
        Do While lBufferIdx &lt; lBufferSize
            ' Determine type
            lItemType = vPolyLinesBuffer(lBufferIdx)
            lBufferIdx = lBufferIdx + 1
            ' Found another projected element
            lNumProjectedElements = lNumProjectedElements + 1
            ' Handle type specific data
            If lItemType = 0 Then
                ' HERE: polyline
                Write #1, &quot;    Polyline&quot;
                ' Get GeomDataSize:
                ' should be zero, but consume it anyway
                lGeomDataSize = vPolyLinesBuffer(lBufferIdx)
                lBufferIdx = lBufferIdx + 1
                ' Ignore GeomData
            Else
                ' HERE: arc:
                ' Next to the piecewise linear approximation of the projected model geometry,
                ' the buffer also contains the arc defining the model geometry projection
                Write #1, &quot;    Arc&quot;
                ' Get GeomDataSize:
                ' should be 12
                lGeomDataSize = vPolyLinesBuffer(lBufferIdx)
                lBufferIdx = lBufferIdx + 1
                ' Get GeomData
                lGeomDataIdx = 0
                lStartIdx = lBufferIdx
                lEndIdx = lStartIdx + (lGeomDataSize - 1)
                For lBufferIdx = lStartIdx To lEndIdx
                    dGeomData(lGeomDataIdx) = vPolyLinesBuffer(lBufferIdx)
                    lGeomDataIdx = lGeomDataIdx + 1
                Next lBufferIdx
                Write #1, &quot;      Center point = (&quot; &amp; dGeomData(0) * 1000# &amp; &quot;, &quot; &amp; dGeomData(1) * 1000# &amp; &quot;, &quot; &amp; dGeomData(2) * 1000# &amp; &quot;) mm&quot;
                Write #1, &quot;      Start  point = (&quot; &amp; dGeomData(3) * 1000# &amp; &quot;, &quot; &amp; dGeomData(4) * 1000# &amp; &quot;, &quot; &amp; dGeomData(5) * 1000# &amp; &quot;) mm&quot;
                Write #1, &quot;      End    point = (&quot; &amp; dGeomData(6) * 1000# &amp; &quot;, &quot; &amp; dGeomData(7) * 1000# &amp; &quot;, &quot; &amp; dGeomData(8) * 1000# &amp; &quot;) mm&quot;
                Write #1, &quot;      Normal       = (&quot; &amp; dGeomData(9) &amp; &quot;, &quot; &amp; dGeomData(10) &amp; &quot;, &quot; &amp; dGeomData(11) &amp; &quot;)&quot;
            End If</pre>
<pre>            ' Get line data
            lLineDataIdx = 0
            lStartIdx = lBufferIdx
            lEndIdx = lStartIdx + (lLineDataSize - 1)
            For lBufferIdx = lStartIdx To lEndIdx
                lLineData(lLineDataIdx) = vPolyLinesBuffer(lBufferIdx)
                lLineDataIdx = lLineDataIdx + 1
            Next lBufferIdx
             ' Get layer data
            lLayerDataIdx = 0
            lStartIdx = lBufferIdx
            lEndIdx = lStartIdx + (lLayerDataSize - 1)
            For lBufferIdx = lStartIdx To lEndIdx
                lLayerData(lLayerDataIdx) = vPolyLinesBuffer(lBufferIdx)
                lLayerDataIdx = lLayerDataIdx + 1
            Next lBufferIdx
            ' Get point data
            If lBufferIdx &lt;= UBound(vPolyLinesBuffer) Then
            	lNumPoints = vPolyLinesBuffer(lBufferIdx)
                Write #1, &quot;      Number of points = &quot; &amp; CStr(lNumPoints)
                lBufferIdx = lBufferIdx + 1
                lStartIdx = lBufferIdx
                lEndIdx = lStartIdx + lNumPoints * 3 - 1
                For lBufferIdx = lStartIdx To lEndIdx Step 3
                    dPoint(0) = vPolyLinesBuffer(lBufferIdx)
                    dPoint(1) = vPolyLinesBuffer(lBufferIdx + 1)
                    dPoint(2) = vPolyLinesBuffer(lBufferIdx + 2)
                Next lBufferIdx
            End If
        Loop
    End If</pre>
<pre>    ' Report the number of projected elements found
    Write #1, &quot;  Number of projected elements = &quot; &amp; CStr(lNumProjectedElements)</pre>
<pre>    ' Report sketched geometry:
    ' only show lines</pre>
<pre>    ' Initialize to zero
    lNumSketchedElements = 0
    lNumLines = swView.<b>GetLineCount2</b>(1)
    If lNumLines &lt;&gt; 0 Then
        vLines = swView.<b>GetLines4</b>(1)
        If Not IsEmpty(vLines) Then
            For i = 0 To lNumLines - 1
                Write #1, &quot;    line[&quot; &amp; i &amp; &quot;]&quot;
                Write #1, &quot;      Start point = (&quot; &amp; vLines(i * 12 + 6) * 1000# &amp; &quot;, &quot; &amp; vLines(i * 12 + 7) * 1000# &amp; &quot;, &quot; &amp; vLines(i * 12 + 8) * 1000# &amp; &quot;) mm&quot;
                Write #1, &quot;      End   point = (&quot; &amp; vLines(i * 12 + 9) * 1000# &amp; &quot;, &quot; &amp; vLines(i * 12 + 10) * 1000# &amp; &quot;, &quot; &amp; vLines(i * 12 + 11) * 1000# &amp; &quot;) mm&quot;
            Next i
        End If
    End If
    lNumSketchedElements = lNumSketchedElements + lNumLines
    lNumSketchedElements = lNumSketchedElements + swView.<b>GetArcCount</b>
    lNumSketchedElements = lNumSketchedElements + swView.<b>GetEllipseCount</b>
    lNumSketchedElements = lNumSketchedElements + swView.<b>GetParabolaCount</b></pre>
<pre>    ' Report the number of sketched elements found
    Write #1, &quot;  Number of sketched elements = &quot; &amp; CStr(lNumSketchedElements)</pre>
<pre>End Function</pre>
<pre>Function PrintSketch(swSketch As SldWorks.Sketch) As Boolean
    Dim vSegments As Variant
    Dim lNumSegments As Long</pre>
<pre>    If swSketch Is Nothing Then
        Write #1, &quot;No sketch&quot;
    End If</pre>
<pre>    ' Get the sketch segments
    vSegments = swSketch.<b>GetSketchSegments</b></pre>
<pre>    ' Determine number of segments
    If Not IsEmpty(vSegments) Then
        lNumSegments = UBound(vSegments) - LBound(vSegments) + 1
    Else
        lNumSegments = 0
    End If</pre>
<pre>    Write #1, &quot;Sketch = &quot;
    Write #1, &quot;  Number of points   = &quot; &amp; CStr(swSketch.<b>GetUserPointsCount</b>())
    Write #1, &quot;  Number of segments = &quot; &amp; CStr(lNumSegments)</pre>
<pre>    ' Get number of specific sketch segments
    If lNumSegments &gt; 0 Then
        Write #1, &quot;    Number of arcs      = &quot; &amp; CStr(swSketch.<b>GetArcCount</b>())
        Write #1, &quot;    Number of lines     = &quot; &amp; CStr(swSketch.<b>GetLineCount2</b>(1))
        Write #1, &quot;    Number of ellipses  = &quot; &amp; CStr(swSketch.<b>GetEllipseCount</b>())
        Write #1, &quot;    Number of parabolas = &quot; &amp; CStr(swSketch.<b>GetParabolaCount</b>())
    End If</pre>
<pre>End Function</pre>

</body>

</html>
