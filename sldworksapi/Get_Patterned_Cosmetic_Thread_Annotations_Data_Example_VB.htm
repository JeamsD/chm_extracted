<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Patterned Cosmetic Thread Annotations Data Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">

<meta name=MS-HKWD content="VBA examples,cosmetic threads">

<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=1833>
<meta name=layout-width content=750>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Get Patterned Cosmetic Thread Annotations Data Example (VBA)</h1>

<p>This example shows how to get data for patterned cosmetic thread annotations 
in a drawing.</p>

<pre>'--------------------------------------------------------------------------
' Preconditions:
' 1. Open a drawing that contains at least one
'    drawing view with patterned cosmetic thread annotations.
' 2. Open the Immediate window.
'
' Postconditions:
' 1. Iterates through the drawing views and prints
'    to the Immediate window the patterned cosmetic 
'    thread annotations data in each drawing view.
' 2. Examine the Immediate window.
'--------------------------------------------------------------------------
Option Explicit</pre>
<pre>Dim swApp As SldWorks.SldWorks
Dim swMathUtility As SldWorks.MathUtility</pre>
<pre>Sub main()</pre>
<pre>    Dim myModel As SldWorks.ModelDoc2
    Dim myDrawing As SldWorks.DrawingDoc
    Dim thisView As SldWorks.View
    Dim thisCThread As SldWorks.CThread
    </pre>
<pre>    Set swApp = Application.SldWorks
    Set swMathUtility = swApp.<b>GetMathUtility</b>()
    Set myModel = swApp.<b>ActiveDoc</b>
    Set myDrawing = myModel
    myModel.<b>ClearSelection2</b> True</pre>
<pre>   'Traverse annotations of the drawing views in this drawing and look for cosmetic threads
    Set thisView = myDrawing.<b>GetFirstView</b>()
    While Not thisView Is Nothing
    If thisView.<b>Name</b> = &quot;Sheet1&quot; Then
        Debug.Print
    Else
            Debug.Print &quot;View name = &quot; &amp; thisView.<b>Name</b>
            Set thisCThread = thisView.<b>GetFirstCThread</b>()
            While Not thisCThread Is Nothing
                Call processCosmeticThread(myModel, thisCThread)
                Set thisCThread = thisCThread.<b>GetNext</b>()
            Wend
    End If
        Set thisView = thisView.<b>GetNextView</b>()
    Wend
End Sub</pre>
<pre>Private Sub processCosmeticThread(myModel As SldWorks.ModelDoc2, aCThread As SldWorks.CThread)
    Dim cthreadAnno As SldWorks.Annotation
    Dim annoName As String, annoVis As String
    Dim patternedCount As Long
    Dim vPatternedXform As Variant
    Dim i As Integer
    Dim transform As SldWorks.MathTransform
    Dim vTransform As Variant</pre>
<pre>    Set cthreadAnno = aCThread.<b>GetAnnotation</b>()
    annoName = cthreadAnno.<b>GetName</b>()
    If (cthreadAnno.<b>Visible</b> = SwConst.<b>swAnnotationHidden</b>) Then
        annoVis = &quot;Hidden&quot;
    Else
        annoVis = &quot;Visible&quot;
    End If</pre>
<pre>    Debug.Print &quot;  Processing CThread &quot; &amp; annoName &amp; &quot;(&quot; &amp; annoVis &amp; &quot;)&quot;
    </pre>
<pre>    'Retrieve information about any patterns made from this cosmetic thread
    patternedCount = aCThread.<b>GetPatternedTransformsCount</b>()
    Debug.Print &quot;   Pattern count = &quot; &amp; patternedCount
    vPatternedXform = aCThread.<b>PatternedTransforms</b>()
    If Not IsEmpty(vPatternedXform) Then
        For i = LBound(vPatternedXform) To UBound(vPatternedXform)
            Set transform = vPatternedXform(i)
            vTransform = transform.<b>ArrayData</b>()
            If Not IsEmpty(vTransform) Then
                Debug.Print &quot;    Rotate (&quot; &amp; Format(vTransform(0), &quot;###0.0#####&quot;) &amp; &quot; &quot; &amp; Format(vTransform(1), &quot;###0.0#####&quot;) &amp; &quot; &quot; &amp; Format(vTransform(2), &quot;###0.0#####&quot;)
                Debug.Print &quot;            &quot; &amp; Format(vTransform(3), &quot;###0.0#####&quot;) &amp; &quot; &quot; &amp; Format(vTransform(4), &quot;###0.0#####&quot;) &amp; &quot; &quot; &amp; Format(vTransform(5), &quot;###0.0#####&quot;)
                Debug.Print &quot;            &quot; &amp; Format(vTransform(6), &quot;###0.0#####&quot;) &amp; &quot; &quot; &amp; Format(vTransform(7), &quot;###0.0#####&quot;) &amp; &quot; &quot; &amp; Format(vTransform(8), &quot;###0.0#####&quot;) &amp; &quot;)&quot;
                Debug.Print &quot;    Translate &quot; &amp; Format(vTransform(9), &quot;###0.0#####&quot;) &amp; &quot; &quot; &amp; Format(vTransform(10), &quot;###0.0#####&quot;) &amp; &quot; &quot; &amp; Format(vTransform(11), &quot;###0.0#####&quot;)
                Debug.Print
            End If
        Next i
    End If
End Sub</pre>

</body>

</html>
