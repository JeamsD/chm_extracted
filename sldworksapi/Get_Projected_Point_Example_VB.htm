<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Projected Point Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2145>
<meta name=layout-width content=628>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">


 <META NAME="MS-HKWD" CONTENT="VBA examples,points">
 <META NAME="MS-HKWD" CONTENT="Points">
</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Get Projected Point Example (VBA)</h1>

<p>This example shows how to get the point where an input point is projected 
 on to a face and surface in the specified direction.</p>
<pre>'-----------------------------------------
' Preconditions:
' 1. Open a part.
' 2. Select a face on the part.
'
' Postconditions:
' 1. Returns the point where the input point
'    is projected onto a face or surface, if
'    the input point is projected.
' 2. Examine the Immediate window.
'------------------------------------------
Option Explicit</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim myModel As SldWorks.ModelDoc2
    Dim mathUtils As SldWorks.MathUtility    </pre>
<pre>    Set swApp = Application.SldWorks
    Set myModel = swApp.<b>ActiveDoc</b>
    Set mathUtils = swApp.<b>GetMathUtility</b>()</pre>
<pre>   ' Preselect the face with which to work
    Dim mySelMgr As SldWorks.<b>SelectionMgr</b>
    Dim selObj As Object
    Dim faceToUse As SldWorks.Face2
    Dim surfaceToUse As SldWorks.Surface
    Dim selCount As Long
    Dim selType As Long</pre>
<pre>    Set mySelMgr = myModel.<b>SelectionManager</b>
    selCount = mySelMgr.<b>GetSelectedObjectCount2</b>(0)
    If (selCount &gt; 0) Then
        selType = mySelMgr.<b>GetSelectedObjectType3</b>(1, 0)
        Set selObj = mySelMgr.<b>GetSelectedObject6</b>(1, 0)
        If (selType = SwConst.swSelFACES) Then
            Set faceToUse = selObj
        End If
    End If</pre>
<pre>   ' Do the ray intersection operation
    Dim basePoint(0 To 2) As Double, rayDir(0 To 2) As Double
    Dim vBasePoint As Variant, vVector As Variant
    Dim rayPoint As SldWorks.MathPoint, rayVector As SldWorks.MathVector
    Dim intersectPt As SldWorks.MathPoint
    Dim vPoint As Variant, vPoint2 As Variant
    Dim xPt As Double, yPt As Double, zPt As Double</pre>
<pre>   ' First try the face
    If Not faceToUse Is Nothing Then
        basePoint(0) = 0.04 '0.013
        basePoint(1) = 0.04 '0.056
        basePoint(2) = 1#
        vBasePoint = basePoint
        Set rayPoint = mathUtils.<b>CreatePoint</b>(vBasePoint)
        rayDir(0) = 0#
        rayDir(1) = 0#
        rayDir(2) = -1#
        vVector = rayDir
        Set rayVector = mathUtils.<b>CreateVector</b>(vVector)
        Set intersectPt = faceToUse.<b>GetProjectedPointOn</b>(rayPoint, rayVector)
        Debug.Print &quot;Ray point = &quot; &amp; Format(basePoint(0), &quot;##0.0#####&quot;) &amp; &quot; , &quot; &amp; Format(basePoint(1), &quot;##0.0#####&quot;) &amp; &quot; , &quot; &amp; Format(basePoint(2), &quot;##0.0#####&quot;)
        Debug.Print &quot;Ray direction = &quot; &amp; Format(rayDir(0), &quot;##0.0#####&quot;) &amp; &quot; , &quot; &amp; Format(rayDir(1), &quot;##0.0#####&quot;) &amp; &quot; , &quot; &amp; Format(rayDir(2), &quot;##0.0#####&quot;)
        If Not intersectPt Is Nothing Then
            vPoint = intersectPt.<b>ArrayData</b>
            xPt = vPoint(0)
            yPt = vPoint(1)
            zPt = vPoint(2)
            Debug.Print &quot;    Face hit point = &quot; &amp; Format(xPt, &quot;##0.0#####&quot;) &amp; &quot; , &quot; &amp; Format(yPt, &quot;##0.0#####&quot;) &amp; &quot; , &quot; &amp; Format(zPt, &quot;##0.0#####&quot;)
        Else
            Debug.Print &quot;    No face hit point.&quot;
        End If</pre>
<pre>        ' Now try the surface, gotten from the face
        Set surfaceToUse = faceToUse.<b>GetSurface</b>()
        If Not surfaceToUse Is Nothing Then
            Set intersectPt = surfaceToUse.<b>GetProjectedPointOn</b>(rayPoint, rayVector)
            If Not intersectPt Is Nothing Then
                vPoint2 = intersectPt.<b>ArrayData</b>
                xPt = vPoint2(0)
                yPt = vPoint2(1)
                zPt = vPoint2(2)
                Debug.Print &quot;    Surface hit point = &quot; &amp; Format(xPt, &quot;##0.0#####&quot;) &amp; &quot; , &quot; &amp; Format(yPt, &quot;##0.0#####&quot;) &amp; &quot; , &quot; &amp; Format(zPt, &quot;##0.0#####&quot;)
            Else
                Debug.Print &quot;    No surface hit point.&quot;
            End If
        End If
    End If</pre>
<pre>End Sub</pre>

</body>

</html>
