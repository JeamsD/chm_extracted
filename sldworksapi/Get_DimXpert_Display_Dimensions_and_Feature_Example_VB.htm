<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get DimXpert Display Dimensions and Feature Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,annotations">
<meta name=MS-HKWD content="VBA examples,DimXpert">
<meta name=MS-HKWD content="VBA examples,display dimensions">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=3135>
<meta name=layout-width content=1070>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="ApiHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Get DimXpert Display Dimensions and Feature Example (VBA)</h1>

<p>This example shows how to find out if an annotation is a DimXpert display 
 dimension, and, if so, how to get its DimXpert feature.</p>

<pre>'----------------------------------------------------------------------------
' Preconditions:
' 1. Add a reference to the <b>SOLIDWORKS</b> <i>version</i> <b>DimXpert type library</b>.
' 2. Open <i>public_documents</i><b>\samples\tutorial\api\plate_tolstatus.sldprt</b>.
' 3. Click <b>View &gt; Toolbars &gt; DimXpert</b>.
' 4. Click the <b>Auto Dimension Scheme</b> button on the DimXpert toolbar.
' 5. Verify that <b>Chamfer</b> and <b>Simple hole</b> are selected in Feature Filters
'    in the Auto Dimension Scheme PropertyManager page and click <b>OK</b>.
' 6. Open the Immediate window.
'
' Postconditions:
' 1. Gets the DimXpert display dimensions in the model.
' 2. Examine the Immediate window.
'
' NOTE: Because this part is used elsewhere, do not save changes.
'---------------------------------------------------------------------------
Option Explicit 
</pre>
<pre>Dim swApp As SldWorks.SldWorks
Dim swPart As SldWorks.ModelDoc2
Dim swAnnotation As SldWorks.Annotation
Dim swDisplayDimension As SldWorks.DisplayDimension

Sub main()</pre>
<pre>    Set swApp = Application.SldWorks
    Set swPart = swApp.<b>ActiveDoc</b>
    Set swAnnotation = swPart.<b>GetFirstAnnotation2</b>
    Do While (Not (swAnnotation Is Nothing))
        Debug.Print &quot; &quot;
        Debug.Print &quot;Annotation name = &quot; &amp; swAnnotation.<b>GetName
</b>        Debug.Print &quot;Annotation DimXpert name = &quot; &amp; swAnnotation.<b>GetDimXpertName</b>
            If swAnnotationType_e.swDisplayDimension = swAnnotation.<b>GetType</b> Then
                Debug.Print &quot;  Is a display dimension? True&quot;
                Set swDisplayDimension = swAnnotation.<b>GetSpecificAnnotation</b>
                Select Case (swDisplayDimension.Type2)
                   Case swDimensionType_e.swOrdinateDimension
                       Debug.Print &quot;  Display dimension type = base ordinate and its subordinates&quot;
                   Case swDimensionType_e.swLinearDimension
                       Debug.Print &quot;  Display dimension type = linear&quot;
                   Case swDimensionType_e.swAngularDimension
                       Debug.Print &quot;  Display dimension type  = angular&quot;
                   Case swDimensionType_e.swArcLengthDimension
                       Debug.Print &quot;  Display dimension type = arc length&quot;
                   Case swDimensionType_e.swRadialDimension
                       Debug.Print &quot;  Display dimension type = radial&quot;
                   Case swDimensionType_e.swDiameterDimension
                       Debug.Print &quot;  Display dimension type = diameter&quot;
                   Case swDimensionType_e.swHorOrdinateDimension
                       Debug.Print &quot;  Display dimension type = horizontal ordinate&quot;
                   Case swDimensionType_e.swVertOrdinateDimension
                       Debug.Print &quot;  Display dimension type = vertical ordinate&quot;
                   Case swDimensionType_e.swZAxisDimension
                       Debug.Print &quot;  Display dimension type = z-axis&quot;
                   Case swDimensionType_e.swChamferDimension
                       Debug.Print &quot;  Display dimension type = chamfer dimension&quot;
                   Case swDimensionType_e.swHorLinearDimension
                       Debug.Print &quot;  Display dimension type = horizontal linear&quot;
                   Case swDimensionType_e.swVertLinearDimension
                       Debug.Print &quot;  Display dimension type = vertical linear&quot;
                   Case swDimensionType_e.swScalarDimension
                       Debug.Print &quot;  Display dimension type = scalar&quot;
                   Case Else
                       Debug.Print &quot;  Display dimension type = unknown&quot;
                End Select</pre>
<pre>                Debug.Print &quot;  Is a DimXpert display dimension? &quot; &amp; IIf(swDisplayDimension.<b>IsDimXpert</b> = False, &quot;False&quot;, &quot;True&quot;)</pre>
<pre>                If swAnnotation.<b>IsDimXpert</b> Then
                    Dim DimXpertFeat As SwDimXpert.DimXpertFeature
                    Dim FeatName As String</pre>
<pre>                    Set DimXpertFeat = swAnnotation.<b>GetDimXpertFeature</b>()
                    If Not DimXpertFeat Is Nothing Then
                        FeatName = DimXpertFeat.<b>Name</b>
                        Debug.Print &quot;  DimXpert feature name = &quot; &amp; FeatName</pre>
<pre>                        Select Case (DimXpertFeat.Type)
                            Case swDimXpertFeatureType_e.swDimXpertFeature_Plane
                                Debug.Print &quot;  DimXpert feature type = plane&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_Cylinder
                                Debug.Print &quot;  DimXpert feature type = cylinder&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_Cone
                                Debug.Print &quot;  DimXpert feature type = cone&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_Extrude
                                Debug.Print &quot;  DimXpert feature type =extrude&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_Fillet
                                Debug.Print &quot;  DimXpert feature type = fillet&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_Chamfer
                                Debug.Print &quot;  DimXpert feature type = chamfer&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_CompoundHole
                                Debug.Print &quot;  DimXpert feature type = compound hole&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_CompoundWidth
                                Debug.Print &quot;  DimXpert feature type = compound width&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_CompoundNotch
                                Debug.Print &quot;  DimXpert feature type = compound notch&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_CompoundClosedSlot3D
                                Debug.Print &quot;  DimXpert feature type = compound closed-slot 3D&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_IntersectPoint
                                Debug.Print &quot;  DimXpert feature type = intersect point&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_IntersectLine
                                Debug.Print &quot;  DimXpert feature type = intersect line&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_IntersectCircle
                                Debug.Print &quot;  DimXpert feature type = intersect circle&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_IntersectPlane
                                Debug.Print &quot;  DimXpert feature type = intersect plane&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_Pattern
                                Debug.Print &quot;  DimXpert feature type = pattern&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_Sphere
                                Debug.Print &quot;  DimXpert feature type = sphere&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_BestfitPlane
                                Debug.Print &quot;  DimXpert feature type = best-fit plane&quot;
                            Case swDimXpertFeatureType_e.swDimXpertFeature_Surface
                                Debug.Print &quot;  DimXpert feature type = surface&quot;
                            Case Else
                                Debug.Print &quot;  DimXpert feature type = unknown&quot;
                        End Select
                    End If
                End If
                Else
                    Debug.Print &quot;  Not a display dimension.&quot;
                End If
            Set swAnnotation = swAnnotation.<b>GetNext3</b>
    Loop</pre>
<pre>End Sub</pre>

</body>

</html>
