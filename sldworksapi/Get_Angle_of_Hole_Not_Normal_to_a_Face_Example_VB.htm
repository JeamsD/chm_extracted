<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Angle of Hole Not Normal to a Face Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2319>
<meta name=layout-width content=628>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">

 <META NAME="MS-HKWD" CONTENT="VBA examples,holes">
</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Get Angle of Hole Not Normal to a Face Example (VBA)</h1>

<p>This example shows how to get the angle of a hole not normal to a face.</p>
<pre>'-----------------------------------------------------------
' Preconditions:
' 1. Open <i>public_documents</i><b>\samples\tutorial\api\cover_datum.sldprt</b>.
' 2. Select the edge of a hole that enters the part on a flat face.
' 3. Open the Immediate window.
'
' Postconditions:
' 1. Click <b>Continue</b> at each Debug.Assert statement.
' 2. Gets an angle in the first quadrant, which should be
'    the angle measured between the hole axis and face
'    normal.
' 3. Examine the Immediate window.
'-----------------------------------------------------------
Option Explicit</pre>
<pre>Const PI As Double = 3.14159265358979</pre>
<pre>Function Arccos(X As Double) As Double
    If Abs(1# - X) &lt; 0.00000001 Then Arccos = PI / 2#: Exit Function
    Arccos = Atn(-X / Sqr(-X * X + 1)) + 2 * Atn(1)
End Function</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swMathUtil As SldWorks.MathUtility
    Dim swModel As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swEdge As SldWorks.Edge
    Dim vFace As Variant
    Dim swFace(1) As SldWorks.Face2
    Dim swSurf(1) As SldWorks.Surface
    Dim swCylSurf As SldWorks.Surface
    Dim swFlatSurf  As SldWorks.Surface
    Dim vCylinder As Variant
    Dim vPlane As Variant
    Dim nVector(2) As Double
    Dim vVector As Variant
    Dim i As Long
    Dim swCylAxis As SldWorks.MathVector
    Dim swFlatNorm As SldWorks.MathVector
    Dim nDotProd As Double
    Dim nAngle As Double
    Dim bRet As Boolean</pre>
<pre>    Set swApp = Application.SldWorks
    Set swMathUtil = swApp.<b>GetMathUtility</b>
    Set swModel = swApp.<b>ActiveDoc</b>
    Set swSelMgr = swModel.<b>SelectionManager</b>
    Set swEdge = swSelMgr.<b>GetSelectedObject6</b>(1, -1)</pre>
<pre>    vFace = swEdge.<b>GetTwoAdjacentFaces2</b>
    Set swFace(0) = vFace(0)
    Set swFace(1) = vFace(1)
    Set swSurf(0) = swFace(0).<b>GetSurface</b>
    Set swSurf(1) = swFace(1).<b>GetSurface</b></pre>
<pre>    If swSurf(0).IsCylinder Then
        Set swCylSurf = swSurf(0)
        Set swFlatSurf = swSurf(1)
    Else
        Debug.Assert swSurf(0).<b>IsPlane</b>
        Debug.Assert swSurf(1).<b>IsCylinder</b>
        Set swCylSurf = swSurf(1)
        Set swFlatSurf = swSurf(0)
    End If
    
</pre>
<pre>    vCylinder = swCylSurf.<b>CylinderParams</b>
    vPlane = swFlatSurf.<b>PlaneParams</b></pre>
<pre>    nVector(0) = vCylinder(3):  nVector(1) = vCylinder(4):  nVector(2) = vCylinder(5)
    vVector = nVector
    Set swCylAxis = swMathUtil.<b>CreateVector</b>((vVector))
    nVector(0) = vPlane(0):     nVector(1) = vPlane(1):     nVector(2) = vPlane(2)
    vVector = nVector
    Set swFlatNorm = swMathUtil.<b>CreateVector</b>((vVector))
    nDotProd = swCylAxis.<b>Dot</b>(swFlatNorm)</pre>
<pre>    ' Ensure angle is in first quadrant
    nAngle = Arccos(Abs(nDotProd)) * 180# / PI</pre>
<pre>    Debug.Print &quot;File = &quot; &amp; swModel.<b>GetPathName</b>
    Debug.Print &quot;  cylinder origin = (&quot; &amp; vCylinder(0) * 1000# &amp; &quot;, &quot; &amp; vCylinder(1) * 1000# &amp; &quot;, &quot; &amp; vCylinder(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;  cylinder axis   = (&quot; &amp; vCylinder(3) &amp; &quot;, &quot; &amp; vCylinder(4) &amp; &quot;, &quot; &amp; vCylinder(5) &amp; &quot;)&quot;
    Debug.Print &quot;  cylinder radius = &quot; &amp; vCylinder(6) * 1000# &amp; &quot; mm&quot;
    Debug.Print &quot;  flat normal     = (&quot; &amp; vPlane(0) &amp; &quot;, &quot; &amp; vPlane(1) &amp; &quot;, &quot; &amp; vPlane(2) &amp; &quot;)&quot;
    Debug.Print &quot;  flat root       = (&quot; &amp; vPlane(3) * 1000# &amp; &quot;, &quot; &amp; vPlane(4) * 1000# &amp; &quot;, &quot; &amp; vPlane(5) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;  angle           = &quot; &amp; nAngle &amp; &quot; deg&quot;</pre>
<pre>End Sub

</pre>

</body>

</html>
