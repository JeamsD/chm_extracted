<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Select Tangent Edges Topologically Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">

<meta name=MS-HKWD content="VBA examples,edges">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=845>
<meta name=layout-width content=786>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Select Tangent Edges Topologically Example (VBA)</h1>

<p>This example shows how to select tangent edges using IEdges::GetTangentEdges, 
 which is a precise topological method.</p>
<p><b>NOTE: </b>IEdge::GetTangentEdges does not give same results as IModelDoc2::SelectTangency, 
which behaves the same as if selecting tangent edges in the user 
interface. Because the user interface functionality automatically takes into 
account edges that lie on top of each other, IModelDoc2::SelectTangency is 
considered to be imprecise.</p>
<pre>'---------------------------------------------------
' Preconditions: Open a part and select an edge
' tangent to other edges.
'
' Postconditions:
' 1. Selects the edges tangent to the selected edge.
' 2. Examine the graphics area.
'---------------------------------------------------
Option Explicit</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swSelEdge As SldWorks.Edge
    Dim vTanEdgeArr As Variant
    Dim vTanEdge As Variant
    Dim swTanEdge As SldWorks.Edge
    Dim swTanEnt As SldWorks.Entity
    Dim bRet As Boolean</pre>
<pre>    Set swApp = Application.SldWorks
    Set swModel = swApp.<b>ActiveDoc</b>
    Set swSelMgr = swModel.<b>SelectionManager</b>
    Set swSelEdge = swSelMgr.<b>GetSelectedObject6</b>(1, -1)</pre>
<pre>    vTanEdgeArr = swSelEdge.<b>GetTangentEdges</b>: If IsEmpty(vTanEdgeArr) Then Exit Sub
    For Each vTanEdge In vTanEdgeArr
        Set swTanEdge = vTanEdge
        Set swTanEnt = swTanEdge
        bRet = swTanEnt.<b>Select4</b>(True, Nothing): Debug.Assert bRet
    Next vTanEdge</pre>
<pre>End Sub</pre>

</body>

</html>
