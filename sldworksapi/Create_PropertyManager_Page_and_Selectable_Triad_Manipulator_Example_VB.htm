<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Create PropertyManager Page and Selectable Triad Manipulator Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="PropertyManager page (see also IPropertyManagerPage2 Interface),triad manipulators">
<meta name=MS-HKWD content="VBA examples,PropertyManager pages">
<meta name=MS-HKWD content="Triad manipulator. See ITriadManipulator Interface">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=11167>
<meta name=layout-width content=750>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Create PropertyManager Page and Selectable Triad Manipulator Example 
 (VBA)</h1>

<p><a name="Top"></a>This example shows how to create a PropertyManager page and a triad 
 manipulator you can select.</p>

<pre>'---------------------------------------------------------------------------------
' Preconditions:
' 1. Click <b>Tools &gt; References &gt; SolidWorks</b> &lt;<i>version</i>&gt; <b>exposed type libraries for</b>
'    <b>add-in use &gt; OK</b>.
' 2. Copy <a href="#Main">Macros</a> to the main module and rename it <b>Macros</b>. (To rename the module,
'    click <b>View &gt; Properties Window</b> and type <b>Macros</b> in <b>(Name)</b>.)
' 3. Click <b>Insert &gt; Class Module</b> and copy <a href="#PropMgr">PropMgr</a> to that class module and
'    name it <b>PropMgr</b>.
' 4. Click <b>Insert &gt; Class Module</b> and copy <a href="#PropMgrHdlr">PropMgrHdlr</a> to that class module
'    and name it <b>PropMgrHdlr</b>.
' 5. Click <b>Insert &gt; Class Module</b> and copy <a href="#swDragManipHdlr">swDragManipHdlr</a> to that class module
'    and name it <b>swDragManipHdlr</b>.
' 6. Open <i>public_documents</i><b>\samples\tutorial\api\assem20.sldasm</b>.
' 7. Select the top face of the left-side component.
'
' Postconditions:
' 1. Displays the <b>Sample PropertyManager</b> page.
' 2. Click <b>Select Entity</b> to show the ID of the face
'    selected in Preconditions step 7.
'    a. Click <b>OK</b> to close the message box.
'    b. Examine the Immediate window.
' 3. Selects the top face of the right-side component.
' 4. Click <b>Create triad manipulator</b> to create a triad
'    manipulator at the pick point on the top face
'    of the right-side component.
'    a. Right-click the triad manipulator.
'    b. Examine the Immediate window.
' 5. Click <b>OK</b> one or two times to close the
'    PropertyManager page.
' 6. Click any handle on the triad manipulator.
' 7. Examine the Immediate window.
' 8. Press <b>F5</b> to finish executing the macro and
'    remove the triad manipulator.
'--------------------------------------------------------------------------------
<a name="Main"></a>'Macros
Option Explicit
Dim swApp As SldWorks.SldWorks
Dim swPart As SldWorks.PartDoc</pre>
<pre>' Application's PropertyManager page
Dim swPage As PropMgr</pre>
<pre>Sub main()</pre>
<pre>    Dim nRetVal As Long
    Set swApp = CreateObject(&quot;SldWorks.Application&quot;)</pre>
<pre>    ' Make sure that there is a model open to which to add the
    ' PropertyManager page; if there is no model, then get rid
    ' of references to any previous pages
    If swApp.ActiveDoc Is Nothing Then
        Set swPart = swApp.<b>NewPart</b>
        Set swPage = Nothing
    End If</pre>
<pre>    ' If there is no PropertyManager page, then create a new one and show it,
    ' or if there is a PropertyManager page, then show it
    If swPage Is Nothing Then
        Set swPage = New PropMgr
        swPage.<b>Show</b> 'Display it
    Else
        swPage.<b>Show</b>
    End If
End Sub</pre>

<p align="center"><a href="#Top">Back to top</a></p>

<pre><a name="PropMgr"></a>'PropMgr
' This class defines the PropertyManager page and its controls
Option Explicit</pre>
<pre>' PropertyManager page
Private m_Page  As SldWorks.PropertyManagerPage2</pre>
<pre>' Two groups contains the controls
Private m_Group As SldWorks.PropertyManagerPageGroup</pre>
<pre>' Controls on the page
Private m_Text As SldWorks.PropertyManagerPageTextbox
Private m_Check As SldWorks.PropertyManagerPageCheckbox
Private m_Selection As SldWorks.PropertyManagerPageSelectionbox
Private m_ClearSelection As SldWorks.PropertyManagerPageCheckbox
Private m_Button As SldWorks.PropertyManagerPageButton
Private m_Button1  As SldWorks.PropertyManagerPageButton
Private m_Label As SldWorks.PropertyManagerPageLabel</pre>
<pre>' To determine whether the second group is active
Private m_bGroup As Boolean</pre>
<pre>' IDs for all of the controls
Const ID_GROUP As Long = 1
Const ID_SELECTION As Long = 2
Const ID_BUTTON As Long = 3
Const ID_BUTTON1 As Long = 4
Const ID_LABEL As Long = 5</pre>
<pre>' Generate the PropertyManager page and its controls
Dim swManip As SldWorks.Manipulator
Dim swDrag As SldWorks.DragArrowManipulator
Dim swTriad As SldWorks.TriadManipulator
Dim swDragHdlr As swDragManipHdlr
Public swFace As SldWorks.Face2</pre>
<pre>' Create the page and place all of the controls on it
Private Sub Layout()
    Dim swApp As SldWorks.SldWorks</pre>
<pre>    ' Objects needed to create the PropertyManager page
    Dim pageHdlr As New PropMgrHdlr
    Dim swPage As SldWorks.PropertyManagerPage2
    Dim swControl As SldWorks.PropertyManagerPageControl
    Dim title As String
    Dim Message As String
    Dim caption As String
    Dim tip As String
    Dim listItems(3) As String
    Dim buttonTypes As Long
    Dim Id As Long
    Dim options As Long
    Dim filterArray(2) As Long
    Dim errors As Long
    Dim controlType As Integer
    Dim alignment As Integer
    Dim bRet As Boolean</pre>
<pre>    ' Access SOLIDWORKS
    Set swApp = GetObject(, &quot;SldWorks.Application&quot;)</pre>
<pre>    ' Initialize the Property page handler
    ' Pass a reference to this PropertyManager page
    pageHdlr.Init Me</pre>
<pre>    ' Set some variables for the PropertyManager page
    title = &quot;Sample PropertyManager&quot;
    buttonTypes = swPropertyManager_OkayButton + swPropertyManager_CancelButton</pre>
<pre>   ' Create the PropertyManager page
    Set m_Page = swApp.<b>CreatePropertyManagerPage</b>(title, buttonTypes, pageHdlr, errors)
       
</pre>
<pre>    ' Make sure that the PropertyManger page was correctly created
    If errors = swPropertyManagerPage_Okay Then
        ' Initial setup of the dialog
        Message = &quot;Information message that can be displayed as necessary.&quot;
        m_Page.SetMessage Message, swImportantMessageBox
        ' Begin adding the required controls to the dialog
        'GROUP Box ------------------------------------------------------------------
        Id = ID_GROUP
        caption = &quot;Group &amp;1&quot;
        options = swGroupBoxOptions_Visible + swGroupBoxOptions_Checkbox + swGroupBoxOptions_Expanded + swGroupBoxOptions_Checked
        m_bGroup = False  ' Mark that the second group is disabled
        Set m_Group = m_Page.<b>AddGroupBox</b>(Id, caption, options)
        If Not m_Group Is Nothing Then
            ' Place these controls in the second group
            'CONTROL Label --------------------------------------------------------------------
            Id = ID_LABEL
            controlType = swControlType_Label
            caption = &quot;Selection box&quot;
            alignment = swControlAlign_Indent
            options = swControlOptions_Visible + swControlOptions_Enabled
            tip = &quot;Label&quot;
            Set swControl = m_Group.<b>AddControl</b>(Id, controlType, caption, alignment, options, tip)
            If Not swControl Is Nothing Then
                Set m_Label = swControl
            End If

            'CONTROL Selection box  ------------------------------------------------------------------
            Id = ID_SELECTION
            controlType = swControlType_Selectionbox
            caption = &quot;Sample selection box&quot;
            alignment = swControlAlign_Indent
            options = swControlOptions_Visible + swControlOptions_Enabled
            tip = &quot;Select faces and vertices&quot;
            Set swControl = m_Group.<b>AddControl</b>(Id, controlType, caption, alignment, options, tip)
            If Not swControl Is Nothing Then
                Set m_Selection = swControl
                filterArray(0) = swSelFACES
                filterArray(1) = swSelVERTICES
                filterArray(2) = swSelMANIPULATORS
                m_Selection.<b>SetSelectionFilters</b> (filterArray)
                m_Selection.<b>AllowMultipleSelectOfSameEntity</b> = True
                m_Selection.<b>Height</b> = 50
                m_Selection.<b>Mark</b> = 1
            End If

            'CONTROL Button --------------------------------------------------------------------
            Id = ID_BUTTON
            controlType = swControlType_Button
            caption = &quot;Create triad manipulator&quot;
            alignment = swControlAlign_Indent
            options = swControlOptions_Visible + swControlOptions_Enabled
            tip = &quot;Button&quot;
            Set swControl = m_Group.<b>AddControl</b>(Id, controlType, caption, alignment, options, tip)
            If Not swControl Is Nothing Then
                Set m_Button = swControl
            End If</pre>
<pre>            'CONTROL Button --------------------------------------------------------------------
            Id = ID_BUTTON1
            controlType = swControlType_Button
            caption = &quot;Select Entity&quot;
            alignment = swControlAlign_Indent
            options = swControlOptions_Visible + swControlOptions_Enabled
            tip = &quot;Button&quot;
            Set swControl = m_Group.<b>AddControl</b>(Id, controlType, caption, alignment, options, tip)
            If Not swControl Is Nothing Then
                Set m_Button1 = swControl
            End If
        End If
    Else
        swApp.<b>SendMsgToUser2</b> &quot;There was an error creating the PropertyManager page.&quot;, swMbInformation, swMbOk
    End If
End Sub</pre>
<pre>' Display the Property Manager page
Public Sub Show()
    Dim nRetVal As Long
    Dim bRet As Boolean</pre>
<pre>    nRetVal = m_Page.<b>Show</b>
    bRet = m_Page.<b>SetMessage</b>(&quot;Some message string.&quot;, swAnnotationVisible)
    Debug.Assert bRet
End Sub</pre>
<pre>Private Sub Class_Initialize()
    Layout
End Sub</pre>
<pre>Private Sub Class_Terminate()</pre>
<pre>End Sub</pre>
<pre>' Callback called by PropertyManagerPage2Handler_OnButtonPress
' in the PropertyManager page handler class
' This implementation just clears the selections
Public Sub OnButtonPressed(ByVal Id As Long)
    Dim swApp As SldWorks.SldWorks
    Dim swMathUtil As SldWorks.MathUtility
    Dim swModel As SldWorks.ModelDoc2
    Dim swModViewMgr As SldWorks.ModelViewManager
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim vPickPt As Variant
    Dim swPickPt As SldWorks.MathPoint
    Dim origin As SldWorks.MathPoint
    Dim pt As Variant
    Dim obj As Object
    Dim boolstatus As Boolean
    Dim nVector(2) As Double
    Dim vVector As Variant
    Dim swN As SldWorks.MathVector</pre>
<pre>    Set swDragHdlr = New swDragManipHdlr
    Set swApp = Application.SldWorks
    Set swMathUtil = swApp.<b>GetMathUtility</b>
    Set swModel = swApp.<b>ActiveDoc</b></pre>
<pre>    If Id = ID_BUTTON1 Then
         Set swSelMgr = swModel.<b>SelectionManager</b>
         Id = swSelMgr.<b>GetSelectedObjectCount2</b>(-1)
         Set obj = swSelMgr.<b>GetSelectedObject6</b>(1, -1)
         If obj Is Nothing Then
            swApp.<b>SendMsgToUser2</b> &quot;Not selected.&quot;, swMbWarning, swMbOk
         Else
            swApp.<b>SendMsgToUser2</b> &quot;Selected, ID = &quot; &amp; swSelMgr.<b>GetSelectedObjectType2</b>(1), swMbWarning, swMbOk
            Debug.Print &quot;SelType      = &quot; &amp; swSelMgr.<b>GetSelectedObjectType2</b>(1)
         End If
         Exit Sub
    End If
    </pre>
<pre>    swModel.<b>ClearSelection2</b> True
    </pre>
<pre>    boolstatus = swModel.Extension.<b>SelectByRay</b>(0.112447854353888, 0.084630970938349, -7.93916624701296E-02, -0.400036026779312, -0.515038074910024, -0.758094294050284, 3.53102873173539E-03, 2, False, 0, 0)
    Set swSelMgr = swModel.<b>SelectionManager</b>
    Set swFace = swSelMgr.<b>GetSelectedObject6</b>(1, -1)
    nVector(0) = 0:     nVector(1) = 1:     nVector(2) = 0
    vVector = nVector
    Set swN = swMathUtil.<b>CreateVector</b>((vVector))
    vPickPt = swSelMgr.<b>GetSelectionPoint</b>(1)
    Set swPickPt = swMathUtil.<b>CreatePoint</b>((vPickPt))
    Set swModViewMgr = swModel.<b>ModelViewManager</b>
    If Id = ID_BUTTON Then
        Set swManip = swModViewMgr.<b>CreateManipulator</b>(swManipulatorType_e.swTriadManipulator, swDragHdlr)
        Set swTriad = swManip.<b>GetSpecificManipulator</b>
        swTriad.origin = swPickPt
        swManip.<b>Show</b> swModel
        swManip.<b>Selectable</b> = True
        Set origin = swTriad.<b>origin</b>
        pt = origin.<b>ArrayData</b>
        Stop
        swManip.<b>Remove</b>
   End If
 End Sub</pre>
<div align="center">
	<pre><a href="#Top">Back to top</a></pre>
</div>
<pre><a name="PropMgrHdlr"></a>'PropMgrHdlr
' This file is the implementation of the PropertyManagerPage2Handler5
' interface
' Each of these methods is called when its corresponding
' notification is fired from within SOLIDWORKS
' It is customary to have notifications use callback
' functions defined within the main application to perform
' any desired actions
Option Explicit</pre>
<pre>Implements PropertyManagerPage2Handler5
' Variable that provides access to the PropertyManager page
Dim m_PageObj As PropMgr</pre>
<pre>' This method is called to initialize the handler
Public Sub Init(pageObj As PropMgr)
    Set m_PageObj = pageObj
End Sub</pre>
<pre>Private Sub Class_Initialize()
    Debug.Print &quot;Class_Initialize&quot;
End Sub
Private Sub Class_Terminate()
    Debug.Print &quot;Class_Terminate&quot;
End Sub
'These methods are the implementations of the SOLIDWORKS notifications
Private Sub PropertyManagerPage2Handler5_<b>AfterClose</b>()
    Debug.Print &quot;PropertyManagerPage2Handler5_AfterClose&quot;
End Sub
Private Function PropertyManagerPage2Handler5_O<b>nActiveXControlCreated</b>(ByVal Id As Long, ByVal Status As Boolean) As Long
    Debug.Print &quot;PropertyManagerPage2Handler5_OnActiveXControlCreated&quot;
End Function</pre>
<pre>Private Sub PropertyManagerPage2Handler5_<b>OnButtonPress</b>(ByVal Id As Long)
    m_PageObj.OnButtonPressed (Id)
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnCancel</b>()
    Debug.Print &quot;PropertyManagerPage2Handler5_OnCancel&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnCheckboxCheck</b>(ByVal Id As Long, ByVal Checked As Boolean)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnCheckboxCheck&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnClose</b>(ByVal Reason As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnClose&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnComboboxEditChanged</b>(ByVal Id As Long, ByVal Text As String)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnComboboxEditChanged&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnComboboxSelectionChanged</b>(ByVal Id As Long, ByVal Item As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnComboboxSelectionChanged&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnGroupCheck</b>(ByVal Id As Long, ByVal Checked As Boolean)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnGroupCheck&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnGroupExpand</b>(ByVal Id As Long, ByVal Expanded As Boolean)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnGroupExpand&quot;
End Sub
Private Function PropertyManagerPage2Handler5_<b>OnHelp</b>() As Boolean
    Debug.Print &quot;PropertyManagerPage2Handler5_OnHelp&quot;
End Function
Private Sub PropertyManagerPage2Handler5_<b>OnListboxSelectionChanged</b>(ByVal Id As Long, ByVal Item As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnListboxSelectionChanged&quot;
End Sub
Private Function PropertyManagerPage2Handler5_<b>OnNextPage</b>() As Boolean
    Debug.Print &quot;PropertyManagerPage2Handler5_OnNextPage&quot;
End Function
 Private Sub PropertyManagerPage2Handler5_<b>OnNumberboxChanged</b>(ByVal Id As Long, ByVal Value As Double)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnNumberboxChanged&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnOK</b>()
    Debug.Print &quot;PropertyManagerPage2Handler5_OnOK&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnOptionCheck</b>(ByVal Id As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnOptionCheck&quot;
End Sub
Private Function PropertyManagerPage2Handler5_<b>OnPreviousPage</b>() As Boolean
    Debug.Print &quot;PropertyManagerPage2Handler5_OnPreviousPage&quot;
End Function
Private Sub PropertyManagerPage2Handler5_<b>OnSelectionboxCalloutCreated</b>(ByVal Id As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnSelectionboxCalloutCreated&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnSelectionboxCalloutDestroyed</b>(ByVal Id As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnSelectionboxCalloutDestroyed&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnSelectionboxFocusChanged</b>(ByVal Id As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnSelectionboxFocusChanged&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnSelectionboxListChanged</b>(ByVal Id As Long, ByVal Count As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnSelectionboxListChanged&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnTextboxChanged</b>(ByVal Id As Long, ByVal Text As String)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnTextboxChanged&quot;
End Sub
Private Function PropertyManagerPage2Handler5_<b>OnPreview</b>() As Boolean
    Debug.Print &quot;PropertyManagerPage2Handler5_OnPreview&quot;
End Function
Private Function PropertyManagerPage2Handler5_<b>OnSubmitSelection</b>(ByVal Id As Long, ByVal Selection As Object, ByVal SelType As Long, ItemText As String) As Boolean
    Debug.Print &quot;PropertyManagerPage2Handler5_OnSubmitSelection&quot;
End Function
Private Function PropertyManagerPage2Handler5_<b>OnTabClicked</b>(ByVal Id As Long) As Boolean
    Debug.Print &quot;PropertyManagerPage2Handler5_OnTabClicked&quot;
End Function
Private Sub PropertyManagerPage2Handler5_<b>OnSliderPositionChanged</b>(ByVal Id As Long, ByVal Value As Double)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnSliderPositionChanged&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnWhatsNew</b>()
    Debug.Print &quot;PropertyManagerPage2Handler5_OnWhatsNew&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnUndo</b>()
    Debug.Print &quot;PropertyManagerPage2Handler5_OnUndo&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnSliderTrackingCompleted</b>(ByVal Id As Long, ByVal Value As Double)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnSliderTrackingCompleted&quot;
End Sub
Private Function PropertyManagerPage2Handler5_<b>OnKeystroke</b>(ByVal Wparam As Long, ByVal Message As Long, ByVal Lparam As Long, ByVal Id As Long) As Boolean
    Debug.Print &quot;PropertyManagerPage2Handler5_OnKeystroke&quot;
End Function
Private Sub PropertyManagerPage2Handler5_<b>OnPopupMenuItemUpdate</b>(ByVal Id As Long, retVal As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnPopupMenuItemUpdate&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>OnPopupMenuItem</b>(ByVal Id As Long)
    Debug.Print &quot;PropertyManagerPage2Handler5_OnPopupMenuItem&quot;
End Sub
Private Sub PropertyManagerPage2Handler5_<b>AfterActivatio</b>n()
    Debug.Print &quot;PropertyManagerPage2Handler5_AfterActivation&quot;
End Sub</pre>
<div align="center">
	<pre><a href="#Top">Back to top</a></pre>
</div>
<pre><a name="swDragManipHdlr"></a>'swDragManipHdlr
Option Explicit
Implements SwManipulatorHandler2</pre>
<pre>Private Sub Class_Initialize()
End Sub
Private Function SwManipulatorHandler2_<b>OnDelete</b>(ByVal pManipulator As Object) As Boolean
    Debug.Print &quot;SwManipulatorHandler2_OnDelete&quot;
End Function
Private Sub SwManipulatorHandler2_<b>OnDirectionFlipped(</b>ByVal pManipulator As Object)
    Debug.Assert False
    Debug.Print &quot;SwManipulatorHandler2_OnDirectionFlipped&quot;
End Sub
Private Function SwManipulatorHandler2_<b>OnDoubleValueChanged</b>(ByVal pManipulator As Object, ByVal Id As Long, Value As Double) As Boolean
    'Debug.Assert False
    Debug.Print &quot;SwManipulatorHandler2_OnDoubleValueChanged&quot;
    Debug.Print &quot;  ID               = &quot; &amp; Id
    Debug.Print &quot;  Value            = &quot; &amp; Value
End Function
Private Sub SwManipulatorHandler2_<b>OnEndDrag</b>(ByVal pManipulator As Object, ByVal handleIndex As Long)
    Debug.Print &quot;SwManipulatorHandler2_OnEndDrag&quot;
    Debug.Print &quot;  HandleIndex      = &quot; &amp; handleIndex
    If (handleIndex = swDragArrowManipulatorOptions_e.swDragArrowManipulatorDirection1) Then
        Debug.Print &quot; Forward&quot;
    Else
        Debug.Print &quot; Backward&quot;
    End If
End Sub
Private Sub SwManipulatorHandler2_<b>OnEndNoDrag</b>(ByVal pManipulator As Object, ByVal handleIndex As Long)
    Debug.Print &quot;SwManipulatorHandler2_OnEndNoDrag&quot;
    Debug.Print &quot;  HandleIndex      = &quot; &amp; handleIndex
End Sub
Private Function SwManipulatorHandler2_<b>OnHandleLmbSelected</b>(ByVal pManipulator As Object) As Boolean
End Function
Private Sub SwManipulatorHandler2_<b>OnHandleRmbSelected</b>(ByVal pManipulator As Object, ByVal handleIndex As Long)
    Debug.Print &quot;SwManipulatorHandler2_OnHandleRmbSelected&quot;
    Debug.Print &quot;  handleIndex      = &quot; &amp; handleIndex
End Sub
Private Sub SwManipulatorHandler2_<b>OnHandleSelected</b>(ByVal pManipulator As Object, ByVal handleIndex As Long)
    Debug.Print &quot;SwManipulatorHandler2_OnHandleSelected&quot;
    Debug.Print &quot;  HandleIndex      = &quot; &amp; handleIndex
End Sub
Private Sub SwManipulatorHandler2_<b>OnItemSetFocus</b>(ByVal pManipulator As Object, ByVal Id As Long)
    Debug.Assert False
    Debug.Print &quot;SwManipulatorHandler2_OnItemSetFocus&quot;
    Debug.Print &quot;  ID               = &quot; &amp; Id
End Sub
Private Function SwManipulatorHandler2_<b>OnStringValueChanged</b>(ByVal pManipulator As Object, ByVal Id As Long, Value As String) As Boolean
    Debug.Assert False
    Debug.Print &quot;SwManipulatorHandler2_<b>OnStringValueChanged</b>&quot;
    Debug.Print &quot;  ID               = &quot; &amp; Id
    Debug.Print &quot;  Value            = &quot; &amp; Value
End Function
Private Sub SwManipulatorHandler2_<b>OnUpdateDrag</b>(ByVal pManipulator As Object, ByVal handleIndex As Long, ByVal newPosMathPt As Object)
    Debug.Print &quot;SwManipulatorHandler2_OnUpdateDrag&quot;
    Debug.Print &quot;  HandleIndex      = &quot; &amp; handleIndex
End Sub</pre>
<div align="center">
	<pre><a href="#Top">Back to top</a>
</pre>
</div>
<pre>



</pre>
<pre>
</pre>

</body>

</html>
