<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Create Infinite Plane Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,planes">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2930>
<meta name=layout-width content=750>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Create Infinite Plane Example (VBA)</h1>

<p>This example shows how to create an infinite plane.</p>

<pre>'-------------------------------------------
' Preconditions:
' 1. Open a model document.
' 2. Open the Immediate window.
'
' Postconditions:
' 1. Creates an infinite plane.
' 2. Examine the Immediate window.
'--------------------------------------------
Option Explicit</pre>
<pre>' Define two types
Type DoubleRec
    dValue As Double
End Type</pre>
<pre>Type Long2Rec
    iLower As Long
    iUpper As Long
End Type</pre>
<pre>' Extract two integer values from a single double value
' by assigning a DoubleRec to the double value and
' copying the value to a Long2Rec and
' extracting the integer values
Function ExtractFields(ByVal dValue As Double, iLower As Integer, iUpper As Integer)
Dim dr As DoubleRec
    Dim i2r As Long2Rec
    ' Set the double value
    dr.dValue = dValue
    ' Copy the values
    LSet i2r = dr
    ' Extract the values
    iLower = i2r.iLower
    iUpper = i2r.iUpper
End Function</pre>
<pre>Sub ProcessSurface(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSurf As SldWorks.Surface)
    Dim vSurfParam As Variant
    Dim uBboundType(2) As Integer
    Dim vBboundType(2) As Integer
    Dim Num_uProp As Integer
    Dim Num_vProp As Integer
    Dim uProp(4) As Integer
    Dim vProp(4) As Integer
    Dim i As Integer</pre>
<pre>    vSurfParam = swSurf.<b>Parameterization</b>
    ExtractFields vSurfParam(4), uBboundType(1), uBboundType(2)
    ExtractFields vSurfParam(5), vBboundType(1), vBboundType(2)
    ExtractFields vSurfParam(10), Num_uProp, Num_vProp
    ExtractFields vSurfParam(6), uProp(1), uProp(2)
    ExtractFields vSurfParam(7), uProp(3), uProp(4)
    ExtractFields vSurfParam(8), vProp(1), vProp(2)
    ExtractFields vSurfParam(9), vProp(3), vProp(4)</pre>
<pre>    Debug.Print &quot;  uRange       = [&quot; &amp; vSurfParam(0) &amp; &quot; , &quot; &amp; vSurfParam(1) &amp; &quot;]&quot;
    Debug.Print &quot;  uBoundType   = [&quot; &amp; uBboundType(1) &amp; &quot; , &quot; &amp; uBboundType(2) &amp; &quot;]&quot;
    Debug.Print &quot;  Num_uProp    = &quot; &amp; Num_uProp</pre>
<pre>    For i = 1 To Num_uProp
        Debug.Print &quot;    uProp[&quot; &amp; i &amp; &quot;]   = &quot; &amp; uProp(i)
    Next i</pre>
<pre>    Debug.Print &quot;&quot;</pre>
<pre>    Debug.Print &quot;  vRange       = [&quot; &amp; vSurfParam(2) &amp; &quot; , &quot; &amp; vSurfParam(3) &amp; &quot;]&quot;
    Debug.Print &quot;  vBoundType   = [&quot; &amp; vBboundType(1) &amp; &quot; , &quot; &amp; vBboundType(2) &amp; &quot;]&quot;
    Debug.Print &quot;  Num_vProp    = &quot; &amp; Num_vProp</pre>
<pre>    For i = 1 To Num_vProp
        Debug.Print &quot;    vProp[&quot; &amp; i &amp; &quot;]   = &quot; &amp; vProp(i)
    Next i
End Sub</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swModeller As SldWorks.Modeler
    Dim swSurf As SldWorks.Surface
    Dim BasePt(2) As Double
    Dim Normal(2) As Double
    Dim Xvect(2) As Double
    Dim vBasePt As Variant
    Dim vNormal As Variant
    Dim vXvect As Variant
    Dim vPlane As Variant
    Dim bRet As Boolean</pre>
<pre>    Set swApp = Application.SldWorks
    Set swModeller = swApp.<b>GetModeler</b></pre>
<pre>    BasePt(0) = 0#:     BasePt(1) = 0#:     BasePt(2) = 0#
    vBasePt = BasePt</pre>
<pre>    Normal(0) = 0#:     Normal(1) = 0#:     Normal(2) = 1#
    vNormal = Normal</pre>
<pre>    Xvect(0) = 1#:      Xvect(1) = 0#:      Xvect(2) = 0#
    vXvect = Xvect
    
</pre>
<pre>    Set swSurf = swModeller.<b>CreatePlanarSurface2</b>((vBasePt), (vNormal), (vXvect))
    </pre>
<pre>    Debug.Assert Not swSurf Is Nothing
    Debug.Assert swSurf.<b>IsPlane</b></pre>
<pre>    vPlane = swSurf.<b>PlaneParams</b>
    Debug.Print &quot;SW Version = &quot; &amp; swApp.<b>RevisionNumber</b>
    Debug.Print &quot;  normal       = (&quot; &amp; vPlane(0) &amp; &quot;, &quot; &amp; vPlane(1) &amp; &quot;, &quot; &amp; vPlane(2) &amp; &quot;)&quot;
    Debug.Print &quot;  root         = (&quot; &amp; vPlane(3) * 1000# &amp; &quot;, &quot; &amp; vPlane(4) * 1000# &amp; &quot;, &quot; &amp; vPlane(5) * 1000# &amp; &quot;) mm&quot;</pre>
<pre>    Debug.Print &quot;&quot;</pre>
<pre>    ProcessSurface swApp, Nothing, swSurf</pre>
<pre>End Sub</pre>

</body>

</html>
