<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Traverse FeatureManager Design Tree Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples, FeatureManager design tree">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2719>
<meta name=layout-width content=805>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./ApiHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>
<h1>Traverse FeatureManager Design Tree Example (VBA)</h1>

<p>This example shows how to traverse a FeatureManager design tree using 
 ITreeControlItem</a>.</p>

<pre>'-------------------------------------
' Preconditions:
' 1. Open a part or assembly.
' 2. Open the Immediate window.
'
' Postconditions:
' 1. Traverses the FeatureManager design
'    tree.
' 2. Examine the Immediate window.
'-------------------------------------
Option Explicit</pre>
<pre>Dim traverseLevel As Long</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim myModel As SldWorks.ModelDoc2
    Dim featureMgr As SldWorks.FeatureManager
    Dim rootNode As SldWorks.TreeControlItem    </pre>
<pre>    Set swApp = Application.SldWorks
    Set myModel = swApp.<b>ActiveDoc</b>
    Set featureMgr = myModel.<b>FeatureManager</b>
    Set rootNode = featureMgr.<b>GetFeatureTreeRootItem</b>()
    If Not rootNode Is Nothing Then
        Debug.Print
        traverseLevel = 0
        traverse_node rootNode
    End If
    </pre>
<pre>End Sub</pre>
<pre>Private Sub traverse_node(node As SldWorks.TreeControlItem)
    Dim childNode As SldWorks.TreeControlItem
    Dim featureNode As SldWorks.Feature
    Dim componentNode As SldWorks.Component2
    Dim nodeObjectType As Long
    Dim nodeObject As Object
    Dim restOfString As String
    Dim indent As String
    Dim i As Long
    Dim displayNodeInfo As Boolean
    Dim compName As String
    Dim suppr As Long, supprString As String
    Dim vis As Long, visString As String
    Dim fixed As Boolean, fixedString As String
    Dim componentDoc As Object, docString As String
    Dim refConfigName As String    </pre>
<pre>    displayNodeInfo = False
    nodeObjectType = node.<b>ObjectType</b>
    Set nodeObject = node.<b>Object</b>
    Select Case nodeObjectType
    Case SwConst.swTreeControlItemType_e.swFeatureManagerItem_Feature:
        displayNodeInfo = True
        If Not nodeObject Is Nothing Then
            Set featureNode = nodeObject
            restOfString = &quot;[FEATURE: &quot; &amp; featureNode.<b>Name</b> &amp; &quot;]&quot;
        Else
            restOfString = &quot;[FEATURE: object null?]&quot;
        End If
    Case SwConst.swTreeControlItemType_e.swFeatureManagerItem_Component:
        displayNodeInfo = True
        If Not nodeObject Is Nothing Then
            Set componentNode = nodeObject
            compName = componentNode.<b>Name2</b>
            If (compName = &quot;&quot;) Then
                compName = &quot;?&quot;
            End If
            suppr = componentNode.<b>GetSuppression</b>()
            Select Case (suppr)
            Case SwConst.swComponentSuppressionState_e.swComponentFullyResolved
                supprString = &quot;Resolved&quot;
            Case SwConst.swComponentSuppressionState_e.swComponentLightweight
                supprString = &quot;Lightweight&quot;
            Case SwConst.swComponentSuppressionState_e.swComponentSuppressed
                supprString = &quot;Suppressed&quot;
            End Select</pre>
<pre>            vis = componentNode.<b>Visible</b>            </pre>
<pre>            Select Case (vis)
            Case SwConst.swComponentVisibilityState_e.swComponentHidden
                visString = &quot;Hidden&quot;
            Case SwConst.swComponentVisibilityState_e.swComponentVisible
                visString = &quot;Visible&quot;
            End Select</pre>
<pre>            fixed = componentNode.<b>IsFixed</b>            </pre>
<pre>            If fixed = 0 Then
                fixedString = &quot;Floating&quot;
            Else
                fixedString = &quot;Fixed&quot;
            End If            </pre>
<pre>            Set componentDoc = componentNode.<b>GetModelDoc</b></pre>
<pre>            If componentDoc Is Nothing Then
                docString = &quot;Not loaded&quot;
            Else
                docString = &quot;Loaded&quot;
            End If</pre>
<pre>            refConfigName = componentNode.<b>ReferencedConfiguration</b></pre>
<pre>            If (refConfigName = &quot;&quot;) Then
                refConfigName = &quot;?&quot;
            End If</pre>
<pre>            restOfString = &quot;[COMPONENT: &quot; &amp; compName &amp; &quot; &quot; &amp; docString &amp; &quot; &quot; &amp; supprString &amp; &quot; &quot; &amp; visString &amp; &quot; &quot; &amp; refConfigName &amp; &quot;]&quot;
        Else
            restOfString = &quot;[COMPONENT: object null?]&quot;
        End If
    Case Else:
        displayNodeInfo = True
        If Not nodeObject Is Nothing Then
            restOfString = &quot;[object type not handled]&quot;
        Else
            restOfString = &quot;[object null?]&quot;
        End If
    End Select</pre>
<pre>    For i = 1 To traverseLevel
        indent = indent &amp; &quot;  &quot;
    Next i</pre>
<pre>    If (displayNodeInfo) Then
        Debug.Print indent &amp; node.<b>Text</b> &amp; &quot; : &quot; &amp; restOfString
    End If</pre>
<pre>    traverseLevel = traverseLevel + 1
    Set childNode = node.<b>GetFirstChild</b>()
    While Not childNode Is Nothing
        traverse_node childNode
        Set childNode = childNode.<b>GetNext</b>
    Wend</pre>
<pre>    traverseLevel = traverseLevel - 1</pre>
<pre>End Sub</pre>

</body>

</html>
