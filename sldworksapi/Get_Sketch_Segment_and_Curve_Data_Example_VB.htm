<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Sketch Segment and Curve Data Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,sketch segments">
<meta name=MS-HKWD content="VBA examples,curves">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2946>
<meta name=layout-width content=786>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Get Sketch Segment and Curve Data Example (VBA)</h1>

<p>This example shows how to get data about a sketch segment and curve.</p>

<pre>'---------------------------------------------
' Preconditions:
' 1. Open a part document.
' 2. Edit a sketch and select a sketch segment.
' 3. Open the Immediate window.
'
' Postconditions:
' 1. Gets sketch segment and curve data.
' 2. Examine the Immediate window.
'---------------------------------------------</pre>
<pre>Option Explicit
</pre>
<pre>' Define two types
Type DoubleRec
    dValue As Double
End Type</pre>
<pre>Type Long2Rec
    iLower As Long
    iUpper As Long
End Type</pre>
<pre>' Extract two integer values from of a single double value
' by assigning a DoubleRec to the double value and
' copying the value to a Long2Rec and
' extracting the integer values
Function ExtractFields(ByVal dValue As Double, iLower As Long, iUpper As Long)
    Dim dr As DoubleRec
    Dim i2r As Long2Rec</pre>
<pre>    ' Set the double value
    dr.dValue = dValue</pre>
<pre>    ' Copy the values
    LSet i2r = dr</pre>
<pre>    ' Extract the values
    iLower = i2r.iLower
    iUpper = i2r.iUpper
End Function</pre>
<pre>Sub ProcessCurve(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swCurve As SldWorks.Curve)
    Dim nStartParam As Double
    Dim nEndParam As Double
    Dim bIsClosed As Boolean
    Dim bIsPeriodic As Boolean
    Dim vStartEval As Variant
    Dim vEndEval As Variant
    Dim nSuccessStart As Long
    Dim nEndStart As Long
    Dim nDummy As Long
    Dim bRet As Boolean</pre>
<pre>    bRet = swCurve.<b>GetEndParams</b>(nStartParam, nEndParam, bIsClosed, bIsPeriodic): Debug.Assert bRet
    vStartEval = swCurve.<b>Evaluate</b>(nStartParam)
    vEndEval = swCurve.<b>Evaluate</b>(nEndParam)</pre>
<pre>    ExtractFields vStartEval(6), nSuccessStart, nDummy
    ExtractFields vEndEval(6), nEndStart, nDummy
    
</pre>
<pre>    Debug.Print &quot;    IsClosed       = &quot; &amp; bIsClosed
    Debug.Print &quot;    IsPeriodic     = &quot; &amp; bIsPeriodic
    Debug.Print &quot;    IsTrimmed      = &quot; &amp; swCurve.<b>IsTrimmedCurve</b>
    Debug.Print &quot;    Start&quot;
    Debug.Print &quot;      Point        = (&quot; &amp; vStartEval(0) * 1000# &amp; &quot;, &quot; &amp; vStartEval(1) * 1000# &amp; &quot;, &quot; &amp; vStartEval(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Tangent      = (&quot; &amp; vStartEval(3) &amp; &quot;, &quot; &amp; vStartEval(4) &amp; &quot;, &quot; &amp; vStartEval(5) &amp; &quot;)&quot;
    Debug.Print &quot;      Success      = &quot; &amp; nSuccessStart
    Debug.Print &quot;    Finish&quot;
    Debug.Print &quot;      Point        = (&quot; &amp; vEndEval(0) * 1000# &amp; &quot;, &quot; &amp; vEndEval(1) * 1000# &amp; &quot;, &quot; &amp; vEndEval(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;      Tangent      = (&quot; &amp; vEndEval(3) &amp; &quot;, &quot; &amp; vEndEval(4) &amp; &quot;, &quot; &amp; vEndEval(5) &amp; &quot;)&quot;
    Debug.Print &quot;      Success      = &quot; &amp; nEndStart
End Sub</pre>
<pre>Sub main()</pre>
<pre>    Dim sSkSegmentsName(5) As String
    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swSkSeg As SldWorks.SketchSegment
    Dim swCurve As SldWorks.Curve
    Dim swSkFeat As SldWorks.Feature
    Dim swSketch As SldWorks.Sketch
    Dim vID As Variant
    Dim bRet As Boolean</pre>
<pre>    sSkSegmentsName(swSketchLINE) = &quot;swSketchLINE&quot;
    sSkSegmentsName(swSketchARC) = &quot;swSketchARC&quot;
    sSkSegmentsName(swSketchELLIPSE) = &quot;swSketchELLIPSE&quot;
    sSkSegmentsName(swSketchSPLINE) = &quot;swSketchSPLINE&quot;
    sSkSegmentsName(swSketchTEXT) = &quot;swSketchTEXT&quot;
    sSkSegmentsName(swSketchPARABOLA) = &quot;swSketchPARABOLA&quot;</pre>
<pre>    Set swApp = Application.SldWorks
    Set swModel = swApp.<b>ActiveDoc</b>
    Set swSelMgr = swModel.<b>SelectionManager</b>
    Set swSkSeg = swSelMgr.<b>GetSelectedObject6</b>(1, -1)
    Set swCurve = swSkSeg.<b>GetCurve</b>
    Set swSkFeat = swSkSeg.<b>GetSketch</b>
    Set swSketch = swSkFeat.<b>GetSpecificFeature2</b></pre>
<pre>    vID = swSkSeg.<b>GetID</b>
    Debug.Print &quot;Feature = &quot; &amp; swSkFeat.<b>Name</b> &amp; &quot; [&quot; &amp; swSketch.Is3D &amp; &quot;]&quot;
    Debug.Print &quot;  Sketch segment data&quot;
    Debug.Print &quot;    ID = [&quot; &amp; vID(0) &amp; &quot;,&quot; &amp; vID(1) &amp; &quot;]&quot;
    Debug.Print &quot;      Type                 = &quot; &amp; sSkSegmentsName(swSkSeg.<b>GetType</b>)
    Debug.Print &quot;      ConstGeom            = &quot; &amp; swSkSeg.<b>ConstructionGeometry</b></pre>
<pre>    Debug.Print &quot;  Curve data&quot;
    ProcessCurve swApp, swModel, swCurve</pre>
<pre>End Sub</pre>

</body>

</html>
