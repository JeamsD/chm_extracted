<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Select Tangent Edges via Iteration Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=date content="06 11, 2002 3:43:25 PM">

<meta name=MS-HKWD content="VBA examples,edges">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=4115>
<meta name=layout-width content=786>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Select Tangent Edges via Iteration Example (VBA)</h1>

<p>This example shows how to select tangent edges by iterating through 
 an edge’s coedges and selecting all edges with tangent vectors.&nbsp; <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>
<pre>'------------------------------------------------------------------
' Preconditions:
' 1. Open a part, assembly, or drawing document.
' 2. Select an edge tangent to other edges in the model.
'
' Postconditions:
' 1. Selects all edges tangent to the selected edge.
' 2. Examine the graphics area.
'------------------------------------------------------------------</pre>
<pre>Option Explicit</pre>
<pre>Dim swApp As SldWorks.SldWorks
Dim swDoc As SldWorks.ModelDoc2
Dim swSelMgr As SldWorks.SelectionMgr
Dim swEdge As SldWorks.Edge
Dim swSelData As SldWorks.SelectData</pre>
<pre>Sub main()</pre>
<pre>    ' Access the running SOLIDWORKS application
    Set swApp = GetObject(, &quot;SldWorks.Application&quot;)
    If swApp Is Nothing Then Exit Sub</pre>
<pre>    ' Get the active model
    Set swDoc = swApp.<b>ActiveDoc</b>
    If swDoc Is Nothing Then Exit Sub</pre>
<pre>    ' Get the SelectionMgr object and make sure that the selected object is an edge
    Set swSelMgr = swDoc.<b>SelectionManager</b>
    If swSelMgr.<b>GetSelectedObjectCount</b> &lt;&gt; 1 Then Exit Sub
    If swSelMgr.<b>GetSelectedObjectType2</b>(1) &lt;&gt; swSelEDGES Then Exit Sub
    Set swSelData = swSelMgr.<b>CreateSelectData</b></pre>
<pre>    ' Get a pointer to the selected edge
    Set swEdge = swSelMgr.<b>GetSelectedObject6</b>(1, -1)</pre>
<pre>    ' Select all edges that are tangent to the selected edge
    Call SelectTangentEdges(swEdge)</pre>
<pre>End Sub
 
</pre>
<pre>Sub SelectTangentEdges(swEdge As Edge)
    Dim varCoEdges As Variant           ' Coedges for edge
    Dim swCoEdge As SldWorks.CoEdge     ' Holds the current coedge
    Dim bUseStart As Boolean            ' Gets whether the coedge is in
                                        ' the same direction as edge
                                        ' Determines where to evaluate the edge from
    Dim varTangent As Variant           ' The tangent to edge</pre>
<pre>    ' Get all of the coedges for this edge
    varCoEdges = swEdge.<b>GetCoEdges</b></pre>
<pre>    ' If this edge does not have exactly two coedges, then quit
    If UBound(varCoEdges) &lt;&gt; 1 Then Exit Sub</pre>
<pre>    ' For the first coedge
    Set swCoEdge = varCoEdges(0)</pre>
<pre>    ' Depends on whether the coedge and edge have the same direction
    bUseStart = swCoEdge.<b>GetSense</b>
    If bUseStart Then bUseStart = False Else bUseStart = True</pre>
<pre>    ' Get the tangent for this edge, bUseStart indicates from where to get tangent
    varTangent = GetEdgeTangent(swEdge, bUseStart)</pre>
<pre>    ' Recurse for all tangent edges for this edge starting with coedge
    Call TraverseTangentEdges(swEdge, swCoEdge, varTangent, swSelData)</pre>
<pre>    ' For the second coedge
    Set swCoEdge = varCoEdges(1)</pre>
<pre>    ' Depends on whether the coedge and edge have the same direction
    bUseStart = swCoEdge.<b>GetSense</b>
    If bUseStart Then bUseStart = False Else bUseStart = True</pre>
<pre>    ' Get the tangent for this edge, bUseStart indicates from where to get tangent
    varTangent = GetEdgeTangent(swEdge, bUseStart)</pre>
<pre>    ' Recurse for all tangent edges for this edge starting with coedge
    Call TraverseTangentEdges(swEdge, swCoEdge, varTangent, swSelData)</pre>
<pre>End Sub</pre>
<pre> </pre>
<pre>' Selects all tangent edges starting at edge, and continuing out from coedge
Sub TraverseTangentEdges(swEdge As Edge, swCoEdge As CoEdge, varTangent As Variant, swSelData)</pre>
<pre>    Dim swNextCoEdge As SldWorks.CoEdge     ' Next coedge on coedge
    Dim swPartnerCoEdge As SldWorks.CoEdge  ' Partner to the coedge
    Dim swNextEdge As SldWorks.Edge         ' Next coedge
    Dim swEntity As SldWorks.Entity         ' Used to select the edge
    Dim varNextTangent As Variant           ' Holds the tangent for the next coedge
    Dim bUseNextStart As Boolean            ' Get whether the next tangent comes from the
                                            ' start of the edge or not</pre>
<pre>    ' Get the next edge
    Set swNextCoEdge = swCoEdge.<b>GetNext</b>
    Set swNextEdge = swNextCoEdge.<b>GetEdge</b></pre>
<pre>    'While not visiting the edge started on
    Do While Not swNextEdge Is swEdge
        bUseNextStart = swNextCoEdge.<b>GetSense</b>
        varNextTangent = GetEdgeTangent(swNextEdge, bUseNextStart)
        If VectorsAreEqual(varTangent, varNextTangent) Then
            Set swEntity = swNextEdge
            ' Select the edge and append it to the list of selected items
            swEntity.<b>Select4</b> True, swSelData
            ' Go to the next
            If bUseNextStart Then bUseNextStart = False Else bUseNextStart = True
            varNextTangent = GetEdgeTangent(swNextEdge, bUseNextStart)
            Call TraverseTangentEdges(swNextEdge, swNextCoEdge, varNextTangent, swSelData)
            Exit Sub
        Else
            ' Walk around the vertex
            Set swPartnerCoEdge = swNextCoEdge.<b>GetPartner</b>
            Set swNextCoEdge = swPartnerCoEdge.<b>GetNext</b>
            Set swNextEdge = swNextCoEdge.<b>GetEdge</b>
        End If
    Loop</pre>
<pre>End Sub
 
</pre>
<pre>' Get the tangent for the current edge
Function GetEdgeTangent(swEdge As Edge, bUseStart As Boolean) As Variant
    Dim swCurve As SldWorks.Curve   ' swEdge's underlying curve
    Dim varEdgeParams As Variant    ' Curve parameters for swEdge
    Dim dblParam As Double          ' Edge parameter to evaluate
    Dim dblTangent(2) As Double     ' Tangent for swEdge</pre>
<pre>    ' Get the curve parameters for swEdge
    Set swCurve = swEdge.<b>GetCurve</b>
    varEdgeParams = swEdge.<b>GetCurveParams2</b></pre>
<pre>    ' If the coedge has the same direction as swEdge, then evaluate from
    ' the start of the coedge; otherwise, evaluate from the end of
    ' the coedge (the start of the edge)
    If bUseStart Then
        dblParam = varEdgeParams(6)
    Else
        dblParam = varEdgeParams(7)
    End If</pre>
<pre>    ' Evaluate the edge at the start or end
    varEdgeParams = swEdge.<b>Evaluate</b>(dblParam)
    ' Get the tangent information out of the evaluation
    dblTangent(0) = varEdgeParams(3)
    dblTangent(1) = varEdgeParams(4)
    dblTangent(2) = varEdgeParams(5)</pre>
<pre>    'Return the tangent
    GetEdgeTangent = dblTangent</pre>
<pre>End Function
 
</pre>
<pre>' Determines if the edges are equal within a tolerance of 1.0 * e^-10
Function VectorsAreEqual(varVec1 As Variant, varVec2 As Variant) As Boolean
    Dim dblMag As Double
    Dim dblDot As Double
    Dim dblUnit1(2) As Double
    Dim dblUnit2(2) As Double</pre>
<pre>    dblMag = (varVec1(0) * varVec1(0) + varVec1(1) * varVec1(1) + varVec1(2) * varVec1(2)) ^ 0.5
    dblUnit1(0) = varVec1(0) / dblMag: dblUnit1(1) = varVec1(1) / dblMag: dblUnit1(2) = varVec1(2) / dblMag
    dblMag = (varVec2(0) * varVec2(0) + varVec2(1) * varVec2(1) + varVec2(2) * varVec2(2)) ^ 0.5
    dblUnit2(0) = varVec2(0) / dblMag: dblUnit2(1) = varVec2(1) / dblMag: dblUnit2(2) = varVec2(2) / dblMag
    dblDot = dblUnit1(0) * dblUnit2(0) + dblUnit1(1) * dblUnit2(1) + dblUnit1(2) * dblUnit2(2)
    dblDot = Abs(Abs(dblDot) - 1#)</pre>
<pre>    If dblDot &lt; 0.0000000001 Then '1.0e-10
        VectorsAreEqual = True
    Else
        VectorsAreEqual = False
    End If</pre>
<pre>End Function</pre>


</body>

</html>
