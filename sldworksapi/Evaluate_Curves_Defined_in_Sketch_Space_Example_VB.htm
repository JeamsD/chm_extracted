<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Evaluate Curves Defined in Sketch Space Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=3339>
<meta name=layout-width content=628>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">
<META NAME="MS-HKWD" CONTENT="VBA examples,curves">
</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Evaluate Curves Defined in Sketch Space Example (VBA)</h1>

<p>This example shows how to evaluate curves that were defined in the space 
 of a sketch.</p>
<pre>'---------------------------------------------------------
' Preconditions:
' 1. Verify that the specified part document to open exists.
' 2. Open the Immediate window.
'
' Postconditions:
' 1. Opens the specified part document.
' 2. Selects a sketch, opens the sketch, and selects a curve
'    in that sketch.
' 3. Evaluates the curve.
' 4. Examine the Immediate window.
'
' NOTE: Because the part is used elsewhere, do not save changes.
'-----------------------------------------------------------</pre>
<pre>Option Explicit</pre>
<pre>' Define two types
Type DoubleRec
    dValue As Double
End Type</pre>
<pre>Type Long2Rec
    iLower As Long
    iUpper As Long
End Type</pre>
<pre>' Extract two integer values from a single double value
' by assigning a DoubleRec to the double value and then
' copying the value to Long2Rec and
' extracting the integer values
Function ExtractFields(ByVal dValue As Double, iLower As Long, iUpper As Long)</pre>
<pre>    Dim dr                  As DoubleRec
    Dim i2r                 As Long2Rec</pre>
<pre>    ' Set the double value
    dr.dValue = dValue</pre>
<pre>    ' Copy the values
    LSet i2r = dr</pre>
<pre>    ' Extract the values
    iLower = i2r.iLower
    iUpper = i2r.iUpper</pre>
<pre>End Function</pre>
<pre>Sub ProcessCurve(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swSketch As SldWorks.Sketch, swCurve As SldWorks.Curve)</pre>
<pre>    Dim swMathUtil          As SldWorks.MathUtility
    Dim swXform             As SldWorks.MathTransform
    Dim nStartParam         As Double
    Dim nEndParam           As Double
    Dim bIsClosed           As Boolean
    Dim bIsPeriodic         As Boolean
    Dim vStartEval          As Variant
    Dim vEndEval            As Variant
    Dim nSuccessStart       As Long
    Dim nEndStart           As Long
    Dim nDummy              As Long
    Dim nStartPt(2)         As Double
    Dim vStartPt            As Variant
    Dim swStartPt           As SldWorks.MathPoint
    Dim nStartTanPt(2)      As Double
    Dim vStartTanPt         As Variant
    Dim swStartTanPt        As SldWorks.MathPoint
    Dim nEndPt(2)           As Double
    Dim vEndPt              As Variant
    Dim swEndPt             As SldWorks.MathPoint
    Dim nEndTanPt(2)        As Double
    Dim vEndTanPt           As Variant
    Dim swEndTanPt          As SldWorks.MathPoint
    Dim bRet                As Boolean</pre>
<pre>    Set swMathUtil = swApp.<b>GetMathUtility</b>
    Set swXform = swSketch.<b>ModelToSketchTransform</b>
    Set swXform = swXform.<b>Inverse</b>
    bRet = swCurve.<b>GetEndParams</b>(nStartParam, nEndParam, bIsClosed, bIsPeriodic): Debug.Assert bRet
    vStartEval = swCurve.<b>Evaluate</b>(nStartParam)
    vEndEval = swCurve.<b>Evaluate</b>(nEndParam)</pre>
<pre>    ExtractFields vStartEval(6), nSuccessStart, nDummy
    ExtractFields vEndEval(6), nEndStart, nDummy
    nStartPt(0) = vStartEval(0):        nStartPt(1) = vStartEval(1):        nStartPt(2) = vStartEval(2)
    vStartPt = nStartPt
    Set swStartPt = swMathUtil.<b>CreatePoint</b>((vStartPt))
    Set swStartPt = swStartPt.<b>MultiplyTransform</b>(swXform)</pre>
<pre>    nStartTanPt(0) = vStartEval(3):     nStartTanPt(1) = vStartEval(4):     nStartTanPt(2) = vStartEval(5)
    vStartTanPt = nStartTanPt
    Set swStartTanPt = swMathUtil.<b>CreatePoint</b>((vStartTanPt))
    Set swStartTanPt = swStartPt.<b>MultiplyTransform</b>(swXform)</pre>
<pre>    nEndPt(0) = vEndEval(0):            nEndPt(1) = vEndEval(1):            nEndPt(2) = vEndEval(2)
    vEndPt = nEndPt
    Set swEndPt = swMathUtil.<b>CreatePoint</b>((vEndPt))
    Set swEndPt = swEndPt.<b>MultiplyTransform</b>(swXform)</pre>
<pre>    nEndTanPt(0) = vEndEval(3):         nEndTanPt(1) = vEndEval(4):         nEndTanPt(2) = vEndEval(5)
    vEndTanPt = nEndTanPt
    Set swEndTanPt = swMathUtil.<b>CreatePoint</b>((vEndTanPt))
    Set swEndTanPt = swEndPt.<b>MultiplyTransform</b>(swXform)</pre>
<pre>    Debug.Print &quot;IsClosed       = &quot; &amp; bIsClosed
    Debug.Print &quot;IsPeriodic     = &quot; &amp; bIsPeriodic
    Debug.Print &quot;&quot;</pre>
<pre>    Debug.Print &quot;Start (sketch)&quot;
    Debug.Print &quot;  Point        = (&quot; &amp; vStartEval(0) * 1000# &amp; &quot;, &quot; &amp; vStartEval(1) * 1000# &amp; &quot;, &quot; &amp; vStartEval(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;  Tangent      = (&quot; &amp; vStartEval(3) &amp; &quot;, &quot; &amp; vStartEval(4) &amp; &quot;, &quot; &amp; vStartEval(5) &amp; &quot;)&quot;
    Debug.Print &quot;  Success      = &quot; &amp; nSuccessStart</pre>
<pre>    Debug.Print &quot;Finish (sketch)&quot;</pre>
<pre>    Debug.Print &quot;  Point        = (&quot; &amp; vEndEval(0) * 1000# &amp; &quot;, &quot; &amp; vEndEval(1) * 1000# &amp; &quot;, &quot; &amp; vEndEval(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;  Tangent      = (&quot; &amp; vEndEval(3) &amp; &quot;, &quot; &amp; vEndEval(4) &amp; &quot;, &quot; &amp; vEndEval(5) &amp; &quot;)&quot;
    Debug.Print &quot;  Success      = &quot; &amp; nEndStart</pre>
<pre>    Debug.Print &quot;Start (model)&quot;</pre>
<pre>    Debug.Print &quot;  Point        = (&quot; &amp; swStartPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swStartPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;  Tangent      = (&quot; &amp; swStartTanPt.<b>ArrayData</b>(0) &amp; &quot;, &quot; &amp; swStartTanPt.<b>ArrayData</b>(1) &amp; &quot;, &quot; &amp; swStartTanPt.<b>ArrayData</b>(2) &amp; &quot;)&quot;
    Debug.Print &quot;Finish (model)&quot;</pre>
<pre>    Debug.Print &quot;  Point        = (&quot; &amp; swEndPt.<b>ArrayData</b>(0) * 1000# &amp; &quot;, &quot; &amp; swEndPt.<b>ArrayData</b>(1) * 1000# &amp; &quot;, &quot; &amp; swEndPt.<b>ArrayData</b>(2) * 1000# &amp; &quot;) mm&quot;
    Debug.Print &quot;  Tangent      = (&quot; &amp; swEndTanPt.<b>ArrayData</b>(0) &amp; &quot;, &quot; &amp; swEndTanPt.<b>ArrayData</b>(1) &amp; &quot;, &quot; &amp; swEndTanPt.<b>ArrayData</b>(2) &amp; &quot;)&quot;
    </pre>
<pre>End Sub</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp               As SldWorks.SldWorks
    Dim swModel             As SldWorks.ModelDoc2
    Dim swModelDocExt       As SldWorks.ModelDocExtension
    Dim swSelMgr            As SldWorks.SelectionMgr
    Dim swSkSeg             As SldWorks.SketchSegment
    Dim swSketch            As SldWorks.Sketch
    Dim swCurve             As SldWorks.Curve
    Dim errors              As Long
    Dim warnings            As Long
    Dim fileName            As String
    Dim status              As Boolean</pre>
<pre>    Set swApp = Application.SldWorks
    fileName = &quot;C:\Users\Public\Documents\SOLIDWORKS\SOLIDWORKS 2018\samples\tutorial\api\cstick.sldprt&quot;
    Set swModel = swApp.<b>OpenDoc6</b>(fileName, swDocumentTypes_e.swDocPART, swOpenDocOptions_Silent, &quot;&quot;, errors, warnings)
    Set swModelDocExt = swModel.<b>Extension</b>
    status = swModelDocExt.<b>SelectByID2</b>(&quot;Sketch2&quot;, &quot;SKETCH&quot;, 0, 0, 0, False, 0, Nothing, 0)
    swModel.<b>EditSketch</b>
    swModel.<b>ClearSelection2</b> True
    status = swModelDocExt.<b>SelectByID2</b>(&quot;Arc1&quot;, &quot;SKETCHSEGMENT&quot;, 0.142211893757474, 3.33699273467745E-02, -1.57877105588811E-02, False, 0, Nothing, 0)
    Set swSelMgr = swModel.<b>SelectionManager</b>
    Set swSkSeg = swSelMgr.<b>GetSelectedObject6</b>(1, -1)
    Set swSketch = swSkSeg.<b>GetSketch</b>
    Set swCurve = swSkSeg.<b>GetCurve</b></pre>
<pre>    ProcessCurve swApp, swModel, swSketch, swCurve</pre>
<pre>End Sub
</pre>

</body>

</html>
