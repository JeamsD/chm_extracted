<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Names of Creators of Features Example (C++ COM)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=MS-HKWD content="C++ examples,features">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=4636>
<meta name=layout-width content=659>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1><a name=Topc></a>Get Names of Creators of Features Example (C++ COM)</h1>

<p>This example shows how to get the names of the creators of the features 
 in multiple part documents.</p>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p><p><a href="#FeatureCreatedBy">FeatureCreatedBy.cpp</a></p></li>
	
	<li class=kadov-p><p><a href="#stdafx">stdafx.h</a></p></li>
	
	<li class=kadov-p><p><a href="#stdafx1">stdafx.cpp</a></p></li>
</ul>

<h3><a name=FeatureCreatedBy></a>FeatureCreatedBy.cpp</h3>

<p class=apiCode>/* </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->PRECONDITIONS: 
 </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->* 
 SOLIDWORKS is open and the specified input file exists in this folder:</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->c:\SOLIDWORKSFilenames.txt. 
 </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->* 
 The SOLIDWORKS part documents listed in the input file and used by </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->this 
 application were installed when SOLIDWORKS was installed:</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->- 
 C:\Users\Public\Documents\SOLIDWORKS\SOLIDWORKS 2018\samples\tutorial\toolbox\braceleft.sldprt</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->- 
 C:\Users\Public\Documents\SOLIDWORKS\SOLIDWORKS 2018\samples\tutorial\toolbox\braceright.sldprt</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->- 
 C:\Users\Public\Documents\SOLIDWORKS\SOLIDWORKS 2018\samples\tutorial\toolbox\baseplate.sldprt</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->POSTCONDITIONS: 
 </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->* 
 The specified output file is created in the specified folder: </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->c:\SOLIDWORKSFilenamesFeatureCreators.txt. 
 </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->* 
 The names of the SOLIDWORKS part documents and their features </p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->and 
 the names of the creators of those features.</p>

<p class=apiCode>*/</p>

<p class=apiCode>#include &quot;stdafx.h&quot;</p>

<p class=apiCode>#include &lt;fstream&gt; //Stream class to both read from 
 and write to files</p>

<p class=apiCode>#include &lt;string&gt;</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode>CComBSTR makeBstr(string input);//makeBstr function prototype</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode>using namespace std;</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode>int _tmain()</p>

<p class=apiCode>{</p>

<p class=apiCode
	style="margin-left: 49px;">ifstream infile;</p>

<p class=apiCode
	style="margin-left: 49px;">ofstream outfile;</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">//Iniitalize COM</p>

<p class=apiCode
	style="margin-left: 49px;">CoInitialize(NULL);</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">//Use ATL smart pointers</p>

<p class=apiCode
	style="margin-left: 49px;">CComPtr&lt;ISldWorks&gt; swApp;</p>

<p class=apiCode
	style="margin-left: 49px;">CComPtr&lt;IModelDoc2&gt; swModel;</p>

<p class=apiCode
	style="margin-left: 49px;">CComPtr&lt;IFeature&gt; swFeat;</p>

<p class=apiCode
	style="margin-left: 49px;">CComPtr&lt;IFeature&gt; swNextFeat;</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">long lErrors;</p>

<p class=apiCode
	style="margin-left: 49px;">long lWarnings;</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">string sSOLIDWORKSFilename;</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">CComBSTR sDefaultConfiguration(L&quot;Default&quot;);</p>

<p class=apiCode
	style="margin-left: 49px;">CComBSTR sFeatureName(L&quot;&quot;);</p>

<p class=apiCode
	style="margin-left: 49px;">CComBSTR sFeatureCreator(L&quot;&quot;);</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">HRESULT hres = NOERROR;</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">//Open input file</p>

<p class=apiCode
	style="margin-left: 49px;">infile.open(&quot;C:\\SOLIDWORKSFilenames.txt&quot;, 
 std::ios_base::in);</p>

<p class=apiCode
	style="margin-left: 49px;">//Make sure input file exists</p>

<p class=apiCode
	style="margin-left: 49px;">if(!infile)</p>

<p class=apiCode
	style="margin-left: 49px;">{</p>

<p class=apiCode
	style="margin-left: 89px;">cout &lt;&lt; &quot;ERROR: Cannot open the 
 input file.&quot; &lt;&lt; endl;</p>

<p class=apiCode
	style="margin-left: 89px;">return 1;</p>

<p class=apiCode
	style="margin-left: 49px;">}</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">//Open output file</p>

<p class=apiCode
	style="margin-left: 49px;">outfile.open(&quot;c:\\SOLIDWORKSFilenamesFeatureCreators.txt&quot;, 
 std::ios_base::out );</p>

<p class=apiCode
	style="margin-left: 49px;">//Make sure output file exists</p>

<p class=apiCode
	style="margin-left: 49px;">if( !outfile) <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode
	style="margin-left: 49px;">{</p>

<p class=apiCode
	style="margin-left: 89px;">cout &lt;&lt; &quot;ERROR: Cannot open the 
 output file.&quot; &lt;&lt; endl;</p>

<p class=apiCode
	style="margin-left: 89px;">infile.close();</p>

<p class=apiCode
	style="margin-left: 89px;">return 1;</p>

<p class=apiCode
	style="margin-left: 49px;">}</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">outfile &lt;&lt; &quot;=============================================================================&quot; 
 &lt;&lt; endl;</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">//Connect to currently running instance 
 of SOLIDWORKS</p>

<p class=apiCode
	style="margin-left: 49px;">hres = swApp.CoCreateInstance(__uuidof(SldWorks), 
 NULL, CLSCTX_LOCAL_SERVER);</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">//Check results</p>

<p class=apiCode
	style="margin-left: 49px;">if (S_OK != hres)</p>

<p class=apiCode
	style="margin-left: 89px;">return 1;</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">while (!infile.eof())</p>

<p class=apiCode
	style="margin-left: 49px;">{ </p>

<p class=apiCode
	style="margin-left: 89px;">//Read SOLIDWORKS part document name from 
 SOLIDWORKSFilenames.txt</p>

<p class=apiCode
	style="margin-left: 89px;">getline (infile, sSOLIDWORKSFilename);</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">//Convert string to CComBSTR by calling 
 function makeBstr</p>

<p class=apiCode
	style="margin-left: 89px;">CComBSTR sSWFilename = (makeBstr(sSOLIDWORKSFilename));</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">cout &lt;&lt; sSOLIDWORKSFilename &lt;&lt; 
 endl;</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">//Open part document</p>

<p class=apiCode
	style="margin-left: 89px;">hres = swApp-&gt;<span style="font-weight: bold;">OpenDoc6</span>(sSWFilename, 
 swDocPART, swOpenDocOptions_Silent, sDefaultConfiguration, &amp;lErrors, 
 &amp;lWarnings, &amp;swModel);</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">//Check results</p>

<p class=apiCode
	style="margin-left: 89px;">if (S_OK != hres || swModel == NULL)</p>

<p class=apiCode
	style="margin-left: 129px;">return 1;</p>

<p class=apiCode
	style="margin-left: 129px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">//Write name of SOLIDWORKS part document 
 in SOLIDWORKSFilenamesFeatureCreators.txt</p>

<p class=apiCode
	style="margin-left: 89px;">outfile &lt;&lt; sSOLIDWORKSFilename &lt;&lt; 
 endl;</p>

<p class=apiCode
	style="margin-left: 89px;">outfile &lt;&lt; &quot;=============================================================================&quot; 
 &lt;&lt; endl;</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">//Get first feature</p>

<p class=apiCode
	style="margin-left: 89px;">swModel-&gt;<span style="font-weight: bold;">IFirstFeature</span>(&amp;swFeat);</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">//Iterate over features in this part document 
 in the FeatureManager design tree</p>

<p class=apiCode
	style="margin-left: 89px;">while(swFeat)</p>

<p class=apiCode
	style="margin-left: 89px;">{</p>

<p class=apiCode
	style="margin-left: 129px;">//Get feature name</p>

<p class=apiCode
	style="margin-left: 129px;">swFeat-&gt;<span style="font-weight: bold;">get_Name</span>(&amp;sFeatureName);</p>

<p class=apiCode
	style="margin-left: 129px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 129px;">//Get creator of feature</p>

<p class=apiCode
	style="margin-left: 129px;">swFeat-&gt;<span style="font-weight: bold;">get_CreatedBy</span>(&amp;sFeatureCreator);</p>

<p class=apiCode
	style="margin-left: 129px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 129px;">//Convert feature name and creator of feature 
 to </p>
<p class=apiCode
	style="margin-left: 129px;">//string and write to output file</p>

<font SIZE="2">
<blockquote>
	<blockquote>
		<blockquote>
			<p><font face="Courier New" size="2">&nbsp;CW2CT 
			sFeatureNameString(sFeatureName);</font></p>
			<p><font face="Courier New" size="2">&nbsp;CW2CT 
			sFeatureCreatorString(sFeatureCreator);</font></p>
			<p>&nbsp;</p>
			<p><font face="Courier New" size="2">&nbsp;string sFNS = _bstr_t(sFeatureNameString);</font></p>
			<p><font face="Courier New" size="2">&nbsp;string sFCS = _bstr_t(sFeatureCreatorString);</font></p>
			<p><font face="Courier New" size="2">&nbsp;outfile &lt;&lt; </font></font>
			<font face="Courier New"><font SIZE="2" COLOR="#a31515">&quot;Feature &quot;</font><font SIZE="2"> 
			&lt;&lt; sFNS &lt;&lt; </font><font SIZE="2" COLOR="#a31515">&quot; created by &quot;</font></font><font SIZE="2"><font face="Courier New"> 
			&lt;&lt; sFCS &lt;&lt; endl;</font></font></p>
		</blockquote>
	</blockquote>
</blockquote>

<p class=apiCode
	style="margin-left: 129px;">//Get next feature in this part document</p>

<p class=apiCode
	style="margin-left: 129px;">swFeat-&gt;<span style="font-weight: bold;">IGetNextFeature</span>(&amp;swNextFeat);</p>

<p class=apiCode
	style="margin-left: 129px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 129px;">swFeat.Release();</p>

<p class=apiCode
	style="margin-left: 129px;">swFeat = swNextFeat;</p>

<p class=apiCode
	style="margin-left: 129px;">swNextFeat.Release();</p>

<p class=apiCode
	style="margin-left: 89px;">}</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">outfile &lt;&lt; &quot;=============================================================================&quot; 
 &lt;&lt; endl;</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">//Close the part document</p>

<p class=apiCode
	style="margin-left: 89px;">swApp-&gt;<span style="font-weight: bold;">CloseDoc</span>(sSWFilename);</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">swModel.Release();</p>

<p class=apiCode
	style="margin-left: 89px;">swFeat.Release();</p>

<p class=apiCode
	style="margin-left: 49px;">}</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">//Close input and output files</p>

<p class=apiCode
	style="margin-left: 49px;">infile.close();</p>

<p class=apiCode
	style="margin-left: 49px;">outfile.close();</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">swApp.Release();</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">//Uninitialize COM</p>

<p class=apiCode
	style="margin-left: 49px;">CoUninitialize();</p>

<p class=apiCode
	style="margin-left: 49px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">return 0;</p>

<p class=apiCode>}</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode>//Function to convert string to CComBSTR</p>

<p class=apiCode>CComBSTR makeBstr(string input)</p>

<p class=apiCode>{</p>

<p class=apiCode
	style="margin-left: 49px;">char* CStyleString = (char*) input.c_str();</p>

<p class=apiCode
	style="margin-left: 49px;">CComBSTR retval(CStyleString);</p>

<p class=apiCode
	style="margin-left: 49px;">return retval;</p>

<p class=apiCode>}</p>

<p class=apiCode>&nbsp;</p>

<p style="text-align: center;"
	align=center><a href="#Topc">Back to top</a></p>

<h3><a name=stdafx></a>stdafx.h</h3>

<p class=apiCode>/// stdafx.h : include file for standard system include 
 files,</p>

<p class=apiCode>// or project-specific include files that are used frequently, 
 but</p>

<p class=apiCode>// are changed infrequently</p>

<p class=apiCode>//</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode>#pragma once</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode>#define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff 
 from Windows headers</p>

<p class=apiCode>#include &lt;stdio.h&gt;</p>

<p class=apiCode>#include &lt;tchar.h&gt;</p>

<p class=apiCode>#define _ATL_CSTRING_EXPLICIT_CONSTRUCTORS // some CString 
 constructors will be explicit</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode>#include &lt;windows.h&gt;</p>

<p class=apiCode>#include &lt;atlbase.h&gt;</p>

<p class=apiCode>#include &lt;iostream&gt;</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode>using namespace std; <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->//We 
 will use the standard C++ libraries for text output.</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode>#import &quot;sldworks.tlb&quot; raw_interfaces_only, 
 raw_native_types, no_namespace, named_guids <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->//the 
 SOLIDWORKS type library</p>

<p class=apiCode>#import &quot;swconst.tlb&quot; <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->raw_interfaces_only, 
 raw_native_types, no_namespace, named_guids <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->//the 
 SOLIDWORKS constant type library</p>

<p style="text-align: center;"
	align=center><a href="#Topc">Back to top</a></p>

<h3><a name=stdafx1></a>stdafx.cpp</h3>

<p class=apiCode>// stdafx.cpp : source file that includes just the standard 
 includes</p>

<p class=apiCode>// FeatureCreatedBy.pch will be the pre-compiled header</p>

<p class=apiCode>// stdafx.obj will contain the pre-compiled type information</p>

<p class=apiCode>#include &quot;stdafx.h&quot;</p>

<p style="text-align: center;"
	align=center><a href="#Topc">Back to top</a></p>

</body>

</html>
