<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Display Dimensions, Gtols, and Surface-Finish Symbols Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,annotations">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=5431>
<meta name=layout-width content=750>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Get Display Dimensions, GTols, and Surface-Finish Symbols Example (VBA)</h1>

<p>This example shows how to get all of the annotations in a part, assembly, or 
drawing.</p>

<pre>'-----------------------------------------------
' Preconditions:
' 1. Open a part, assembly, or drawing document.
' 2. Open the Immediate window.
' 3. Run the macro.
'
' Postconditions:
' 1. Prints any annotations to the Immediate window.
' 2. Examine the Immediate window.
'-----------------------------------------------</pre>
<pre>Option Explicit</pre>
<pre>Sub ProcessAnnotation(swApp As SldWorks.SldWorks, swAnn As SldWorks.Annotation)
    Dim swAnnCThread                As SldWorks.CThread
    Dim swAnnDatumTag               As SldWorks.DatumTag
    Dim swAnnDatumTargetSym         As SldWorks.DatumTargetSym
    Dim swAnnDisplayDimension       As SldWorks.DisplayDimension
    Dim swAnnGTol                   As SldWorks.Gtol
    Dim swAnnNote                   As SldWorks.Note
    Dim swAnnSFSymbol               As SldWorks.SFSymbol
    Dim swAnnWeldSymbol             As SldWorks.WeldSymbol
    Dim swAnnCustomSymbol           As SldWorks.CustomSymbol
    Dim swAnnDowelSym               As SldWorks.DowelSymbol
    Dim swAnnLeader                 As SldWorks.MultiJogLeader
    Dim swAnnCenterMarkSym          As SldWorks.CenterMark
    Dim swAnnTable                  As SldWorks.TableAnnotation
    Dim swAnnCenterLine             As SldWorks.Centerline
    Dim swAnnDatumOrigin            As SldWorks.DatumOrigin</pre>
<pre>    Select Case swAnn.GetType
        Case swCThread
            Set swAnnCThread = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swCThread&quot;
            Debug.Print &quot;&quot;
        Case swDatumTag
            Set swAnnDatumTag = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swDatumTag&quot;
            Debug.Print &quot;&quot;
        Case swDatumTargetSym
            Set swAnnDatumTargetSym = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swDatumTargetSym&quot;
            Debug.Print &quot;&quot;
        Case swDisplayDimension
            Set swAnnDisplayDimension = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swDisplayDimension&quot;
            Debug.Print &quot;&quot;
        Case swGTol
            Set swAnnGTol = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swGTol&quot;
            Debug.Print &quot;&quot;
        Case swNote
            Set swAnnNote = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swNote&quot;
            Debug.Print &quot;&quot;
        Case swSFSymbol
            Set swAnnSFSymbol = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swSFSymbol&quot;
            Debug.Print &quot;&quot;
        Case swWeldSymbol
            Set swAnnWeldSymbol = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swWeldSymbol&quot;
            Debug.Print &quot;&quot;
        Case swCustomSymbol
            Set swAnnCustomSymbol = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swCustomSymbol&quot;
            Debug.Print &quot;&quot;
        Case swDowelSym
            Set swAnnDowelSym = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swDowelSym&quot;
            Debug.Print &quot;&quot;
        Case swLeader
            Set swAnnLeader = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swLeader&quot;
            Debug.Print &quot;&quot;
        Case swCenterMarkSym
            Set swAnnCenterMarkSym = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swCenterMarkSym&quot;
            Debug.Print &quot;&quot;
        Case swTableAnnotation
            Set swAnnTable = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swTableAnnotation&quot;
            Debug.Print &quot;&quot;
        Case swCenterLine
            Set swAnnCenterLine = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swCenterLine&quot;
            Debug.Print &quot;&quot;
        Case swDatumOrigin
            Set swAnnDatumOrigin = swAnn.<b>GetSpecificAnnotation</b>
            Debug.Print &quot;  Annotation type (enumerator): swAnnotationType_e.swDatumOrigin&quot;
            Debug.Print &quot;&quot;
        Case Else
            Debug.Print &quot;  Unknown annotation type&quot;
            Debug.Print &quot;&quot;
            Debug.Assert False
    End Select</pre>
<pre>End Sub</pre>
<pre>Sub ProcessModel(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2)
    Dim swAnn                       As SldWorks.Annotation
    Dim nNumLeader                  As Long
    Dim nNumPts                     As Long
    Dim vLeaderPt                   As Variant
    Dim i                           As Long
    Dim j                           As Long
    Dim k                           As Long
    Dim bRet                        As Boolean
</pre>
<pre>    Debug.Print &quot;Model path and file name: &quot; &amp; swModel.<b>GetPathName</b>
    Debug.Print &quot;&quot;
    Set swAnn = swModel.<b>GetFirstAnnotation2</b></pre>
<pre>    Do While Not swAnn Is Nothing
        Debug.Print &quot;  Annotation name: &quot; &amp; swAnn.<b>GetName</b>
        Debug.Print &quot;  Annotation type (enumerator numeric value): &quot; &amp; swAnn.<b>GetType</b>
        </pre>
<pre>        If True = swAnn.<b>GetLeader</b> Then
        Dim nbrLeaders As Long
        nbrLeaders = swAnn.<b>GetLeaderCount</b>
            For i = 0 To swAnn.<b>GetLeaderCount</b> - 1
                If True = swAnn.<b>GetBentLeader</b> Then
                    nNumPts = 3
                Else
                    nNumPts = 2
                End If</pre>
<pre>                vLeaderPt = swAnn.<b>GetLeaderPointsAtIndex</b>(i)
                If Not IsEmpty(vLeaderPt) Then
                    Dim leaderPt() As Double
                    ReDim leaderPt(nNumPts) As Double
                    leaderPt = vLeaderPt
                    k = 0
                    For j = 0 To UBound(leaderPt)
                        Debug.Print &quot;    Pt[&quot; &amp; k &amp; &quot;] x,y,z coordinates:&quot;
                        Debug.Print &quot;       &quot; &amp; Str(leaderPt(j)) &amp; &quot;, &quot; &amp; Str(leaderPt(j + 1)) &amp; Str(leaderPt(j + 2))
                        j = j + 2
                        k = k + 1
                    Next j</pre>
<pre>                End If
            Next i</pre>
<pre>        End If</pre>
<pre>        ProcessAnnotation swApp, swAnn</pre>
<pre>      Set swAnn = swAnn.<b>GetNext3</b></pre>
<pre>    Loop</pre>
<pre>End Sub</pre>
<pre>Sub ProcessComponent(swApp As SldWorks.SldWorks, swComp As SldWorks.Component2)
    Dim vChildArray             As Variant
    Dim swChildComp             As SldWorks.Component2
    Dim swModel                 As SldWorks.ModelDoc2
    Dim swPart                  As SldWorks.PartDoc
    Dim i                       As Long</pre>
<pre>    vChildArray = swComp.<b>GetChildren</b></pre>
<pre>    For i = 0 To UBound(vChildArray)
        Set swChildComp = vChildArray(i)
        ProcessComponent swApp, swChildComp
    Next i</pre>
<pre>    Set swModel = swComp.<b>GetModelDoc</b></pre>
<pre>    If Not swModel Is Nothing Then
        If swDocPART = swModel.<b>GetType</b> Then
            ProcessModel swApp, swModel
        End If</pre>
<pre>    End If</pre>
<pre>End Sub</pre>
<pre>Sub ProcessDrawing(swApp As SldWorks.SldWorks, swDraw As SldWorks.DrawingDoc)
    Dim swView As SldWorks.View
    Dim swAnn As SldWorks.Annotation</pre>
<pre>    Set swView = swDraw.<b>GetFirstView</b>
    Do While Not Nothing Is swView
        Set swAnn = swView.<b>GetFirstAnnotation3</b>
        Do While Not Nothing Is swAnn
            ProcessAnnotation swApp, swAnn
            Set swAnn = swAnn.<b>GetNext3</b>
        Loop</pre>
<pre>        Set swView = swView.<b>GetNextView</b></pre>
<pre>    Loop</pre>
<pre>End Sub</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp                       As SldWorks.SldWorks
    Dim swModel                     As SldWorks.ModelDoc2
    Dim swAssy                      As SldWorks.AssemblyDoc
    Dim swDraw                      As SldWorks.DrawingDoc
    Dim swConfig                    As SldWorks.Configuration
    Dim swConfigMgr                 As SldWorks.ConfigurationManager
    Dim swRootComp                  As SldWorks.Component2
    Dim nStatus                     As Long
    Dim bRet                        As Boolean</pre>
<pre>    Set swApp = Application.SldWorks
    Set swModel = swApp.<b>ActiveDoc</b></pre>
<pre>    Select Case swModel.<b>GetType</b>
        Case swDocPART
            ProcessModel swApp, swModel
        Case swDocASSEMBLY
            Set swAssy = swModel
            nStatus = swAssy.<b>ResolveAllLightWeightComponents</b>(False)
            Set swConfigMgr = swModel.<b>ConfigurationManager</b>
            Set swConfig = swConfigMgr.<b>ActiveConfiguration</b>
            Set swRootComp = swConfig.<b>GetRootComponent</b>
            ProcessComponent swApp, swRootComp
        Case swDocDRAWING
            Set swDraw = swModel
            ProcessDrawing swApp, swDraw
        Case Else
            Exit Sub</pre>
<pre>    End Select</pre>
<pre>End Sub</pre>

</body>

</html>
