<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Show Bubble ToolTip for PropertyManager Page Control Example (C#)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="C# examples,ToolTips">
<meta name=MS-HKWD content="C# examples,PropertyManager pages">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=8732>
<meta name=layout-width content=1319>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="ApiHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Show Bubble ToolTip for PropertyManager Page Control Example (C#)</h1>

<p>This example shows how to create a PropertyManager page. When the check box on the PropertyManager page is selected, a bubble 
 ToolTip is displayed. This type of ToolTip is useful for validating data typed or selected 
 by users in controls on a PropertyManager page.</p>
<pre>//--------------------------------------
// Preconditions: 
// 1. Copy <a href="#Module">SolidWorksMacro.cs</a> to your project.
// 2. Add a class module called <b>PropMgrHdlr.cs</b> and copy 
//    <a href="#Class">PropMgrHdlr.cs</a> to that module.
// 3. Click <b>Project &gt; Add Reference</b>, browse to <i>install_dir</i><b>\api\redist</b>, 
//    select <b>SolidWorks.Interop.swpublished.dll &gt; OK</b>.
// 4. Verify that the <b>Tools &gt; Options &gt; System Options &gt; Stop VSTA debugger </b>
// &nbsp;&nbsp;&nbsp;<b>on macro exit checkbox</b> is clear.
// 5. Open a part.
//
// Postconditions:
// 1. Creates and displays a PropertyManager page.
// 2. Select <b>Sample check box</b> to display a bubble ToolTip.
// 3. Click outside the bubble ToolTip to close it.
//    NOTE: Clearing <b>Sample check box</b> does not display
//    the bubble ToolTip.
//---------------------------------------
<a name=Module></a>//SolidWorksMacro.cs</pre>

<p class=APICODE>using SolidWorks.Interop.sldworks;<br>
using SolidWorks.Interop.swconst;<br>
using System;</p>

<p class=APICODE>namespace CreatePropertyManagerPage_CSharp.csproj</p>

<p class=APICODE>{</p>

<p class=APICODE><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->partial 
 class SolidWorksMacro</p>

<p class=APICODE><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=APICODE><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->public 
 ModelDoc2 swModel;<br>
<!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->public 
 SelectionMgr swSelMgr;<br>
<!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->public 
 PropMgrHdlr pm;<br>
<!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->public 
 void Main()</p>

<p class=APICODE><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=APICODE><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->swModel 
 = (ModelDoc2)swApp.ActiveDoc;<br>
<!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->swSelMgr 
 = (SelectionMgr)swModel.SelectionManager;<br>
<br>
<!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->//Create 
 a new instance of the PropertyManager class <br>
<!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pm 
 = new PropMgrHdlr(swApp);<br>
<!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pm.<b>Show</b>();</p>

<p class=APICODE><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=APICODE><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->public 
 SldWorks swApp;</p>

<p class=APICODE><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=APICODE>}</p>

<p class=APICODE>&nbsp;</p>

<p class=APICODE><a name=Class></a>//PropMgrHdlr.cs</p>

<pre>using SolidWorks.Interop.sldworks;
using SolidWorks.Interop.swconst;
using SolidWorks.Interop.swpublished;
using System;
using System.Runtime.InteropServices;
[ComVisibleAttribute(true)]
public class PropMgrHdlr : IPropertyManagerPage2Handler6
{
    //Required for PropertyManager page controls 
    //Objects required for the PropertyManager page 
    PropertyManagerPage2 pm_Page;
    PropertyManagerPageGroup pm_Group;
    PropertyManagerPageSelectionbox pm_Selection;
    PropertyManagerPageControl pm_Control;

    //Each object in the page needs a unique ID 
    const int GroupID = 1;
    const int SelectionID = 3;
    const int ControlID = 4;
    string bubbleToolTipTitle;
    string bubbleToolTipMessage;
    string bubbleToolTipBmpFile;
    public void Show()
    {
        pm_Page.<b>Show</b>();
    }
    public PropMgrHdlr(SolidWorks.Interop.sldworks.SldWorks swApp)
    {
        string PageTitle = null;
        string caption = null;
        string tip = null;
        int options = 0;
        int longerrors = 0;
        int controlType = 0;
        int alignment = 0;</pre>
<pre>        //Set the variables for the page 
        PageTitle = &quot;Sample PropertyManager page&quot;;
        options = (int)swPropertyManagerButtonTypes_e.swPropertyManager_OkayButton + (int)swPropertyManagerButtonTypes_e.swPropertyManager_CancelButton + (int)swPropertyManagerPageOptions_e.swPropertyManagerOptions_LockedPage + (int)swPropertyManagerPageOptions_e.swPropertyManagerOptions_PushpinButton;

        //Create the PropertyManager page 
        pm_Page = (PropertyManagerPage2)swApp.<b>CreatePropertyManagerPage</b>(PageTitle, options, this, ref longerrors);
        //Make sure that the page was created properly 
        if (longerrors == (int)swPropertyManagerPageStatus_e.swPropertyManagerPage_Okay)
        {
            //Begin adding the controls to the page 
            //Create the group box 
            caption = &quot;Sample Group Box&quot;;
            options = (int)swAddGroupBoxOptions_e.swGroupBoxOptions_Visible + (int)swAddGroupBoxOptions_e.swGroupBoxOptions_Expanded;
            pm_Group = (PropertyManagerPageGroup)pm_Page.AddGroupBox(GroupID, caption, options);
            //Create selection box 
            controlType = (int)swPropertyManagerPageControlType_e.swControlType_Selectionbox;
            caption = &quot;&quot;;
            // No caption for selection boxes 
            alignment = (int)swPropertyManagerPageControlLeftAlign_e.swControlAlign_Indent;
            options = (int)swAddControlOptions_e.swControlOptions_Visible + (int)swAddControlOptions_e.swControlOptions_Enabled;
            tip = &quot;Select an edge, face, vertex, solid body, or a component&quot;;
            pm_Selection = (PropertyManagerPageSelectionbox)pm_Group.<b>AddControl</b>(SelectionID, (short)controlType, caption, (short)alignment, options, tip);
            int[] filters = new int[7];
            filters[0] = (int)swSelectType_e.swSelEDGES;
            filters[1] = (int)swSelectType_e.swSelREFEDGES;
            filters[2] = (int)swSelectType_e.swSelFACES;
            filters[3] = (int)swSelectType_e.swSelVERTICES;
            filters[4] = (int)swSelectType_e.swSelSOLIDBODIES;
            filters[5] = (int)swSelectType_e.swSelCOMPONENTS;
            filters[6] = (int)swSelectType_e.swSelCOMPSDONTOVERRIDE;
            pm_Selection.<b>SingleEntityOnly</b> = false;
            pm_Selection.<b>AllowMultipleSelectOfSameEntity</b> = true;
            pm_Selection.<b>Height</b> = 50;
            pm_Selection.<b>SetSelectionFilters</b>(filters);
            // Create check box 
            controlType = (int)swPropertyManagerPageControlType_e.swControlType_Checkbox;
            caption = &quot;Sample check box&quot;;
            alignment = (int)swPropertyManagerPageControlLeftAlign_e.swControlAlign_Indent;
            options = (int)swAddControlOptions_e.swControlOptions_Visible + (int)swAddControlOptions_e.swControlOptions_Enabled;
            tip = &quot;Check box&quot;;
            pm_Control = (PropertyManagerPageControl)pm_Group.<b>AddControl</b>(ControlID, (short)controlType, caption, (short)alignment, options, tip);</pre>
<pre>            bubbleToolTipTitle = &quot;Sample bubble ToolTip Title&quot;;
            bubbleToolTipMessage = &quot;Sample bubble ToolTip message&quot;;
            bubbleToolTipBmpFile = &quot;&quot;;
        }
        else
        {
            //If the page is not created 
            System.Windows.Forms.MessageBox.Show(&quot;An error occurred while attempting to create the &quot; + &quot;PropertyManager Page&quot;);
        }
    }
    private void PropertyManagerPage2Handler6_OnCheckboxCheck(int Id, bool isChecked)
    {
        if (isChecked)
        {
            pm_Control.<b>ShowBubbleTooltip</b>(bubbleToolTipTitle, bubbleToolTipMessage, bubbleToolTipBmpFile);
        }
        else
        {
        }
    }
    void IPropertyManagerPage2Handler6.<b>OnCheckboxCheck</b>(int Id, bool isChecked)
    {
        PropertyManagerPage2Handler6_OnCheckboxCheck(Id, isChecked);
    }
    private void PropertyManagerPage2Handler6_<b>AfterClos</b>e()
    {
    }
    void IPropertyManagerPage2Handler6.<b>AfterClose</b>()
    {
        PropertyManagerPage2Handler6_AfterClose();
    }
    private void PropertyManagerPage2Handler6_<b>OnButtonPress</b>(int Id)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnButtonPress</b>(int Id)
    {
        PropertyManagerPage2Handler6_OnButtonPress(Id);
    }
    private void PropertyManagerPage2Handler6_<b>OnClose</b>(int Reason)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnClose</b>(int Reason)
    {
        PropertyManagerPage2Handler6_OnClose(Reason);
    }
    private void PropertyManagerPage2Handler6_<b>OnSelectionboxCalloutCreated</b>(int Id)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnSelectionboxCalloutCreated</b>(int Id)
    {
        PropertyManagerPage2Handler6_OnSelectionboxCalloutCreated(Id);
    }
    private void PropertyManagerPage2Handler6_<b>OnComboboxEditChanged</b>(int Id, string Text)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnComboboxEditChanged</b>(int Id, string Text)
    {
        PropertyManagerPage2Handler6_OnComboboxEditChanged(Id, Text);
    }
    private void PropertyManagerPage2Handler6_<b>OnComboboxSelectionChanged</b>(int Id, int Item)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnComboboxSelectionChanged</b>(int Id, int Item)
    {
        PropertyManagerPage2Handler6_OnComboboxSelectionChanged(Id, Item);
    }
    private void PropertyManagerPage2Handler6_<b>OnGroupCheck</b>(int Id, bool Checked)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnGroupCheck</b>(int Id, bool Checked)
    {
        PropertyManagerPage2Handler6_OnGroupCheck(Id, Checked);
    }
    private void PropertyManagerPage2Handler6_<b>OnGroupExpand</b>(int Id, bool Expanded)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnGroupExpand</b>(int Id, bool Expanded)
    {
        PropertyManagerPage2Handler6_OnGroupExpand(Id, Expanded);
    }
    private bool PropertyManagerPage2Handler6_<b>OnHelp</b>()
    {
        return true;
    }
    bool IPropertyManagerPage2Handler6.<b>OnHelp</b>()
    {
        return PropertyManagerPage2Handler6_OnHelp();
    }
    private bool PropertyManagerPage2Handler6_<b>OnKeystroke</b>(int Wparam, int Message, int Lparam, int Id)
    {
        return true;
    }
    bool IPropertyManagerPage2Handler6.<b>OnKeystroke</b>(int Wparam, int Message, int Lparam, int Id)
    {
        return PropertyManagerPage2Handler6_OnKeystroke(Wparam, Message, Lparam, Id);
    }
    private void PropertyManagerPage2Handler6_<b>OnListboxSelectionChanged</b>(int Id, int Item)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnListboxSelectionChanged</b>(int Id, int Item)
    {
        PropertyManagerPage2Handler6_OnListboxSelectionChanged(Id, Item);
    }
    private bool PropertyManagerPage2Handler6_<b>OnNextPage</b>()
    {
        return true;
    }
    bool IPropertyManagerPage2Handler6.<b>OnNextPage</b>()
    {
        return PropertyManagerPage2Handler6_OnNextPage();
    }
    private void PropertyManagerPage2Handler6_<b>OnNumberboxChanged</b>(int Id, double Value)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnNumberboxChanged</b>(int Id, double Value)
    {
        PropertyManagerPage2Handler6_OnNumberboxChanged(Id, Value);
    }
    private void PropertyManagerPage2Handler6_<b>OnOptionCheck</b>(int Id)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnOptionCheck</b>(int Id)
    {
        PropertyManagerPage2Handler6_OnOptionCheck(Id);
    }
    private void PropertyManagerPage2Handler6_<b>OnPopupMenuItem</b>(int Id)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnPopupMenuItem</b>(int Id)
    {
        PropertyManagerPage2Handler6_OnPopupMenuItem(Id);
    }
    private void PropertyManagerPage2Handler6_<b>OnPopupMenuItemUpdate</b>(int Id, ref int retval)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnPopupMenuItemUpdate</b>(int Id, ref int retval)
    {
        PropertyManagerPage2Handler6_OnPopupMenuItemUpdate(Id, ref retval);
    }
    private bool PropertyManagerPage2Handler6_<b>OnPreview</b>()
    {
        return true;
    }
    bool IPropertyManagerPage2Handler6.<b>OnPreview</b>()
    {
        return PropertyManagerPage2Handler6_OnPreview();
    }
    private bool PropertyManagerPage2Handler6_<b>OnPreviousPage</b>()
    {
        return true;
    }
    bool IPropertyManagerPage2Handler6.<b>OnPreviousPage</b>()
    {
        return PropertyManagerPage2Handler6_OnPreviousPage();
    }
    private void PropertyManagerPage2Handler6<b>_OnRedo</b>()
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnRedo</b>()
    {
        PropertyManagerPage2Handler6_OnRedo();
    }
    private void PropertyManagerPage2Handler6_<b>OnSelectionboxCalloutDestroyed</b>(int Id)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnSelectionboxCalloutDestroyed</b>(int Id)
    {
        PropertyManagerPage2Handler6_OnSelectionboxCalloutDestroyed(Id);
    }
    private void PropertyManagerPage2Handler6_<b>OnSelectionboxFocusChanged</b>(int Id)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnSelectionboxFocusChanged</b>(int Id)
    {
        PropertyManagerPage2Handler6_OnSelectionboxFocusChanged(Id);
    }
    private void PropertyManagerPage2Handler6_<b>OnSelectionboxListChanged</b>(int Id, int Count)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnSelectionboxListChanged</b>(int Id, int Count)
    {
        PropertyManagerPage2Handler6_OnSelectionboxListChanged(Id, Count);
    }
    private void PropertyManagerPage2Handler6_<b>OnSliderPositionChanged</b>(int Id, double Value)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnSliderPositionChanged</b>(int Id, double Value)
    {
        PropertyManagerPage2Handler6_OnSliderPositionChanged(Id, Value);
    }
    private void PropertyManagerPage2Handler6_<b>OnSliderTrackingCompleted</b>(int Id, double Value)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnSliderTrackingCompleted</b>(int Id, double Value)
    {
        PropertyManagerPage2Handler6_OnSliderTrackingCompleted(Id, Value);
    }
    private bool PropertyManagerPage2Handler6_<b>OnSubmitSelection</b>(int Id, object Selection, int SelType, ref string ItemText)
    {
        return true;
    }
    bool IPropertyManagerPage2Handler6.<b>OnSubmitSelection</b>(int Id, object Selection, int SelType, ref string ItemText)
    {
        return PropertyManagerPage2Handler6_OnSubmitSelection(Id, Selection, SelType, ref ItemText);
    }
    private bool PropertyManagerPage2Handler6_<b>OnTabClicked</b>(int Id)
    {
        return true;
    }
    bool IPropertyManagerPage2Handler6.<b>OnTabClicked</b>(int Id)
    {
        return PropertyManagerPage2Handler6_OnTabClicked(Id);
    }
    private void PropertyManagerPage2Handler6_<b>OnTextboxChanged</b>(int Id, string Text)
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnTextboxChanged</b>(int Id, string Text)
    {
        PropertyManagerPage2Handler6_OnTextboxChanged(Id, Text);
    }
    private void PropertyManagerPage2Handler6_<b>OnUndo</b>()
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnUndo</b>()
    {
        PropertyManagerPage2Handler6_OnUndo();
    }
    private void PropertyManagerPage2Handler6_<b>OnWhatsNew</b>()
    {
    }
    void IPropertyManagerPage2Handler6.<b>OnWhatsNew</b>()
    {
        PropertyManagerPage2Handler6_OnWhatsNew();
    }
    private int PropertyManagerPage2Handler6_<b>OnActiveXControlCreated</b>(int Id, bool Status)
    {
        return 0;
    }
    int IPropertyManagerPage2Handler6.<b>OnActiveXControlCreated</b>(int Id, bool Status)
    {
        return PropertyManagerPage2Handler6_OnActiveXControlCreated(Id, Status);
    }
    private void PropertyManagerPage2Handler6_<b>AfterActivation</b>()
    {
    }
    void IPropertyManagerPage2Handler6.<b>AfterActivation</b>()
    {
        PropertyManagerPage2Handler6_AfterActivation();
    }
}</pre>

</body>

</html>
