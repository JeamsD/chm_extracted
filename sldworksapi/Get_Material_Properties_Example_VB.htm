<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Material Properties Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,features">
<meta name=MS-HKWD content="VBA examples,faces">
<meta name=MS-HKWD content="VBA examples,material properties">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=3563>
<meta name=layout-width content=628>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Get Material Properties Example (VBA)</h1>

<p>This example shows how to iterate over the faces and features of a model 
 and get the displayed colors.</p>
<p><b>NOTE: </b>When in shaded mode, colors can be allocated, in order of 
priority, at the model, feature, and face level. To correctly get the color a 
face, you must examine the color of the face at all of these levels. Also, 
several document-level preferences control how color is used. This example shows 
how to iterate over the faces and features of a model and correctly get the 
displayed color.</p>

<pre>'-----------------------------------------------------
' Preconditions:
' 1. Open a part or fully resolved assembly.
' 2. If you opened an assembly, select any entity in the
'    the assembly.
' 3. Verify that <b>c:\temp</b> exists.
'
' Postconditions:
' 1. Writes the output to <b>c:\ComponentMaterialPropertyValues.txt</b>.
' 2. Examine <b>c:\ComponentMaterialPropertyValues.txt</b>.
'------------------------------------------------------
Option Explicit</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swPart As SldWorks.PartDoc
    Dim swComp As SldWorks.Component2
    Dim swBody As SldWorks.Body2
    Dim swFace As SldWorks.Face2
    Dim swFeat As SldWorks.Feature
    Dim vMatProp As Variant
    Dim vConfigNames As Variant
    Dim i As Long
    Dim bRet As Boolean
    </pre>
<pre>    ' Open output file for component material property values
    Open &quot;c:\temp\ComponentMaterialPropertyValues.txt&quot; For Output As #1</pre>
<pre>    Set swApp = CreateObject(&quot;SldWorks.Application&quot;)
    Set swModel = swApp.<b>ActiveDoc</b>
    Set swSelMgr = swModel.<b>SelectionManager</b></pre>
<pre>    If swModel.GetType = swDocPART Then
        Set swPart = swModel
        Set swBody = swPart.<b>Body</b>
    Else
        Set swComp = swSelMgr.<b>GetSelectedObjectsComponent2</b>(1)
        Set swBody = swComp.<b>GetBody</b>
    End If</pre>
<pre>    Set swFace = swBody.<b>GetFirstFace</b></pre>
<pre>    ' Get document default colors and settings
    Write #1, &quot;Model Default [&quot; &amp; swModel.<b>GetPathName</b> &amp; &quot;]&quot;
    Write #1, &quot;  IgnoreFeatureColors  = &quot; &amp; swModel.<b>GetUserPreferenceToggle</b>(swIgnoreFeatureColors)
    Write #1, &quot;  ColorRef             = &quot; &amp; swModel.<b>GetUserPreferenceIntegerValue</b>(swDocumentColorShading)
    Write #1, &quot;&quot;</pre>
<pre>    vMatProp = swModel.<b>MaterialPropertyValues</b>
    Write #1, &quot;  RGB          = [&quot; &amp; vMatProp(0) &amp; &quot;, &quot; &amp; vMatProp(1) &amp; &quot;, &quot; &amp; vMatProp(2) &amp; &quot;]&quot;
    Write #1, &quot;  Ambient      = &quot; &amp; vMatProp(3)
    Write #1, &quot;  Diffuse      = &quot; &amp; vMatProp(4)
    Write #1, &quot;  Specular     = &quot; &amp; vMatProp(5)
    Write #1, &quot;  Shininess    = &quot; &amp; vMatProp(6)
    Write #1, &quot;  Transparency = &quot; &amp; vMatProp(7)
    Write #1, &quot;  Emission     = &quot; &amp; vMatProp(8)
    Write #1, &quot;&quot;</pre>
<pre>    If Not swComp Is Nothing Then
        ' Component colors can override face colors
        vMatProp = swComp.<b>MaterialPropertyValues</b>
        If Not IsEmpty(vMatProp) Then
            Write #1, &quot;Component Default [&quot; &amp; swComp.<b>GetPathName</b> &amp; &quot;]&quot;
            Write #1, &quot;  RGB          = [&quot; &amp; vMatProp(0) &amp; &quot;, &quot; &amp; vMatProp(1) &amp; &quot;, &quot; &amp; vMatProp(2) &amp; &quot;]&quot;
            Write #1, &quot;  Ambient      = &quot; &amp; vMatProp(3)
            Write #1, &quot;  Diffuse      = &quot; &amp; vMatProp(4)
            Write #1, &quot;  Specular     = &quot; &amp; vMatProp(5)
            Write #1, &quot;  Shininess    = &quot; &amp; vMatProp(6)
            Write #1, &quot;  Transparency = &quot; &amp; vMatProp(7)
            Write #1, &quot;  Emission     = &quot; &amp; vMatProp(8)
            Write #1, &quot;&quot;
        End If
    End If</pre>
<pre>    While Not swFace Is Nothing
        ' Face colors can override part colors
        vMatProp = swFace.<b>MaterialPropertyValues</b>
        If Not IsEmpty(vMatProp) Then
            Write #1, &quot;Face[&quot; &amp; i &amp; &quot;] overridden&quot;
            Write #1, &quot;  RGB          = [&quot; &amp; vMatProp(0) &amp; &quot;, &quot; &amp; vMatProp(1) &amp; &quot;, &quot; &amp; vMatProp(2) &amp; &quot;]&quot;
            Write #1, &quot;  Ambient      = &quot; &amp; vMatProp(3)
            Write #1, &quot;  Diffuse      = &quot; &amp; vMatProp(4)
            Write #1, &quot;  Specular     = &quot; &amp; vMatProp(5)
            Write #1, &quot;  Shininess    = &quot; &amp; vMatProp(6)
            Write #1, &quot;  Transparency = &quot; &amp; vMatProp(7)
            Write #1, &quot;  Emission     = &quot; &amp; vMatProp(8)
            Write #1, &quot;&quot;
        End If</pre>
<pre>        ' Get feature associated with this face
        Set swFeat = swFace.<b>GetFeature</b>
        vConfigNames = swModel.<b>GetConfigurationNames</b></pre>
<pre>       ' Face colors can override feature colors
        vMatProp = swFeat.<b>GetMaterialPropertyValues2</b>(swSpecifyConfiguration, (vConfigNames))</pre>
<pre>        If Not IsEmpty(vMatProp) Then
            Write #1, &quot;Face[&quot; &amp; i &amp; &quot;] overridden by &quot;; swFeat.<b>Name</b>
            Write #1, &quot;  RGB          = [&quot; &amp; vMatProp(0) &amp; &quot;, &quot; &amp; vMatProp(1) &amp; &quot;, &quot; &amp; vMatProp(2) &amp; &quot;]&quot;
            Write #1, &quot;  Ambient      = &quot; &amp; vMatProp(3)
            Write #1, &quot;  Diffuse      = &quot; &amp; vMatProp(4)
            Write #1, &quot;  Specular     = &quot; &amp; vMatProp(5)
            Write #1, &quot;  Shininess    = &quot; &amp; vMatProp(6)
            Write #1, &quot;  Transparency = &quot; &amp; vMatProp(7)
            Write #1, &quot;  Emission     = &quot; &amp; vMatProp(8)
            Write #1, &quot;&quot;
        End If
        i = i + 1
        Set swFace = swFace.<b>GetNextFace</b>
    Wend
    
    ' Close output file for component material property values
    Close

End Sub</pre>

</body>

</html>
