<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Cosmetic Threads Features in a Part Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,cosmetic threads">
<meta name=MS-HKWD content="VBA examples,parts">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2880>
<meta name=layout-width content=750>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Get Cosmetic Threads Features in a Part Example (VBA)</h1>

<p>This example shows how to create and get mirrored and patterned cosmetic thread feature 
data in a part document.</p>
<pre>'-------------------------------------------------------------------
' Preconditions:
' 1. Open <i>public_documents</i><b>\samples\tutorial\api\holecube.sldprt</b>.
' 2. Open the Immediate window.
'
' Postconditions:
' 1. Mirrors and patterns the cosmetic thread feature.
' 2. Examine the Immediate window.
'
' NOTE: Because this part is used elsewhere, do not save changes.
'-------------------------------------------------------------------
Option Explicit</pre>
<pre>Dim swApp As SldWorks.SldWorks
Dim swMathUtility As SldWorks.MathUtility
Dim boolstatus As Boolean</pre>
<pre>Sub main()</pre>
<pre>    Dim myModel As SldWorks.ModelDoc2
    Dim thisFeature As SldWorks.Feature
    Dim thisSubFeature As SldWorks.Feature    </pre>
<pre>    Set swApp = Application.SldWorks
    Set swMathUtility = swApp.<b>GetMathUtility</b>()
    Set myModel = swApp.<b>ActiveDoc</b></pre>
<pre>    'Mirror and pattern the cosmetic thread subfeature
    boolstatus = myModel.<b>Extension</b>.<b>SelectByID2</b>(&quot;&quot;, &quot;EDGE&quot;, -8.02489357837999E-04, -2.46888176810671E-02, 6.00726028778809E-05, True, 0, Nothing, 0)
    Set thisFeature = myModel.<b>FeatureManager</b>.<b>InsertCosmeticThread3</b>(swStandardType_StandardHelicoilMetric, &quot;Helicoil threads&quot;, &quot;M33x2.0&quot;, 0.033, swEndConditionBlind2Dia, 0.025, &quot;M33x2.0 Helicoil Threads&quot;)
    boolstatus = myModel.<b>Extension</b>.<b>SelectByID2</b>(&quot;Cut-Extrude1&quot;, &quot;BODYFEATURE&quot;, 0, 0, 0, False, 4, Nothing, 0)
    boolstatus = myModel.<b>Extension</b>.<b>SelectByID2</b>(&quot;&quot;, &quot;FACE&quot;, -5.25693542039818E-02, -7.07674502874625E-02, 0, True, 128, Nothing, 0)
    boolstatus = myModel.<b>Extension</b>.<b>SelectByID2</b>(&quot;Boss-Extrude1&quot;, &quot;BODYFEATURE&quot;, 0, 0, 0, True, 4, Nothing, 0)
    boolstatus = myModel.<b>Extension</b>.<b>SelectByID2</b>(&quot;&quot;, &quot;EDGE&quot;, -7.36957308265147E-02, -4.66691871832836E-02, 1.25295787199775E-04, True, 1, Nothing, 0)
    myModel.<b>FeatureManager</b>.<b>FeatureCircularPattern4</b> 3, 1.25663706143592, True, &quot;NULL&quot;, False, False, False</pre>
<pre>    ' Traverse features and subfeatures of this model and look for cosmetic threads
    Set thisFeature = myModel.<b>FirstFeature</b>
    While Not thisFeature Is Nothing
        Set thisSubFeature = thisFeature.<b>GetFirstSubFeature</b>()
        While Not thisSubFeature Is Nothing
            If (thisSubFeature.<b>GetTypeName</b>() = &quot;CosmeticThread&quot;) Then
                Debug.Print &quot;Processing &quot; &amp; thisSubFeature.<b>Name</b>
                Call processCosmeticThread(myModel, thisSubFeature)
            End If
            Set thisSubFeature = thisSubFeature.<b>GetNextSubFeature</b>()
        Wend
        Set thisFeature = thisFeature.<b>GetNextFeature</b>()
    Wend
End Sub
 
</pre>
<pre>Private Sub processCosmeticThread(myModel As SldWorks.ModelDoc2, aFeature As SldWorks.Feature)</pre>
<pre>    Dim thisCThread As SldWorks.CosmeticThreadFeatureData
    Dim patternedCount As Long
    Dim holeEdge As SldWorks.Edge
    Dim holeCurve As SldWorks.Curve
    Dim vCurveParams As Variant
    Dim basePt(0 To 2) As Double
    Dim vBasePt As Variant
    Dim mBasePt As SldWorks.MathPoint
    Dim edgeEntity As SldWorks.Entity
    Dim selData As SldWorks.SelectData
    Dim vPatternedXform As Variant
    Dim i As Integer
    Dim transform As SldWorks.MathTransform
    Dim mTransPt As SldWorks.MathPoint
    Dim vTransPt As Variant
    Dim transPtX As Double, transPtY As Double, transPtZ As Double
    Dim append As Boolean, myCallout As SldWorks.Callout</pre>
<pre>    Set thisCThread = aFeature.<b>GetDefinition</b>()</pre>
<pre>    If Not thisCThread Is Nothing Then
    ' Retrieve the information about the edge associated with the cosmetic thread
        boolstatus = thisCThread.<b>AccessSelections</b>(myModel, Nothing)
        Set holeEdge = thisCThread.<b>Edge</b>()
        If Not holeEdge Is Nothing Then
            Set holeCurve = holeEdge.<b>GetCurve</b>()
            If Not holeCurve Is Nothing Then
                vCurveParams = holeEdge.<b>GetCurveParams2</b>()
                basePt(0) = vCurveParams(0)
                basePt(1) = vCurveParams(1)
                basePt(2) = vCurveParams(2)
                Debug.Print &quot;    0 (&quot; &amp; Format(basePt(0), &quot;###0.0#####&quot;) &amp; &quot;, &quot; &amp; Format(basePt(1), &quot;###0.0#####&quot;) &amp; &quot;, &quot; &amp; Format(basePt(2), &quot;###0.0#####&quot;) &amp; &quot;)&quot;
            End If
        End If</pre>
<pre>        thisCThread.<b>ReleaseSelectionAccess</b>
        vBasePt = basePt
        Set mBasePt = swMathUtility.<b>CreatePoint</b>((vBasePt))        </pre>
<pre>        ' Select the edge used for the cosmetic thread
        Set edgeEntity = holeEdge
        append = True
        boolstatus = edgeEntity.<b>Select4</b>(append, selData)        </pre>
<pre>        ' Retrieve information about any patterns made from this cosmetic thread
        patternedCount = thisCThread.<b>GetPatternedTransformsCount</b>()
        Debug.Print &quot;         Pattern count = &quot; &amp; patternedCount
        vPatternedXform = thisCThread.<b>PatternedTransforms</b>()
        If Not IsEmpty(vPatternedXform) Then
            For i = LBound(vPatternedXform) To UBound(vPatternedXform)
                Set transform = vPatternedXform(i)
                Set mTransPt = mBasePt.<b>MultiplyTransform</b>(transform)
                vTransPt = mTransPt.<b>ArrayData</b>()
                transPtX = vTransPt(0)
                transPtY = vTransPt(1)
                transPtZ = vTransPt(2)
                Debug.Print &quot;             Pattern &quot; &amp; Str(i + 1) &amp; &quot; (&quot; &amp; Format(transPtX, &quot;###0.0#####&quot;) &amp; &quot;, &quot; &amp; Format(transPtY, &quot;###0.0#####&quot;) &amp; &quot;, &quot; &amp; Format(transPtZ, &quot;###0.0#####&quot;) &amp; &quot;)&quot;
                ' The transform information should be sufficient
                ' for getting the necessary geometry
                ' information for this cosmetic thread and
                ' its patterned cosmetic threads
                ' The next step  attempts to select the edge used for
                ' patterned cosmetic threads to help verify that the
                ' transform information is accurate and that
                ' an edge could be obtained, if necessary
                ' Selections depend on whether the edge is
                ' actually visible in this orientation and this display state
                append = True
                boolstatus = myModel.<b>Extension</b>.<b>SelectByID2</b>(&quot;&quot;, &quot;EDGE&quot;, transPtX, transPtY, transPtZ, append, 0, myCallout, 0)
                If (boolstatus = 0) Then
                    Debug.Print &quot;                 Selection failed?&quot;
               End If
            Next i
        End If
    End If</pre>
<pre>End Sub</pre>

</body>

</html>
