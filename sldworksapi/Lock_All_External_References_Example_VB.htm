<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Lock All External References Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">

<meta name=MS-HKWD content="VBA examples,external references">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2162>
<meta name=layout-width content=786>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Lock All External References Example (VBA)</h1>

<p>This example shows how to lock all external references in a part or 
 assembly in reverse chronological order.</p>
<pre>'---------------------------------------
' Preconditions:
' 1. Open a part or assembly.
' 1. Open the Immediate window.
'
' Postconditions:
' 1. Locks all external references.
' 2. Examine the Immediate window.
'---------------------------------------
Option Explicit</pre>
<pre>Sub ProcessModel(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, sPadStr As String)
    Debug.Print sPadStr &amp; &quot;  Locking: &quot; &amp; swModel.GetPathName
    swModel.<b>LockAllExternalReferences</b>
End Sub</pre>
<pre>Sub ProcessComponent(swApp As SldWorks.SldWorks, swComp As SldWorks.Component2, sPadStr As String)
    Dim vChildCompArr As Variant
    Dim vChildComp As Variant
    Dim swChildComp As SldWorks.Component2
    Dim swChildModel As SldWorks.ModelDoc2</pre>
<pre>    vChildCompArr = swComp.<b>GetChildren</b>
    For Each vChildComp In vChildCompArr
        Set swChildComp = vChildComp
        Debug.Print sPadStr &amp; swChildComp.<b>Name2</b>
        ProcessComponent swApp, swChildComp, sPadStr &amp; &quot;  &quot;
        Set swChildModel = swChildComp.<b>GetModelDoc</b>
        ProcessModel swApp, swChildModel, sPadStr
    Next vChildComp
End Sub</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swAssy As SldWorks.AssemblyDoc
    Dim swConfigMgr As SldWorks.ConfigurationManager
    Dim swConf As SldWorks.Configuration
    Dim swRootComp As SldWorks.Component2
    Dim nStatus As Long
    Dim bRet As Boolean</pre>
<pre>    Set swApp = Application.SldWorks
    Set swModel = swApp.<b>ActiveDoc</b>
    Set swConfigMgr = swModel.<b>ConfigurationManager</b>
    Set swConf = swConfigMgr.<b>ActiveConfiguration</b>
    Set swRootComp = swConf.<b>GetRootComponent</b></pre>
<pre>    Debug.Print &quot;File = &quot; &amp; swModel.<b>GetPathName</b></pre>
<pre>    Select Case swModel.<b>GetType</b>
        Case swDocPART
            ProcessModel swApp, swModel, &quot;  &quot;
        Case swDocASSEMBLY
            Set swAssy = swModel
            nStatus = swAssy.<b>ResolveAllLightWeightComponents</b>(False)
            Set swRootComp = swConf.<b>GetRootComponent</b>
            ProcessComponent swApp, swRootComp, &quot;  &quot;
        Case Else
            Exit Sub
    End Select</pre>
<pre>End Sub

</pre>

</body>

</html>
