<html>

<head>
<title>Detect Interferences Using a Transform Example (VBA)</title>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<link rel="stylesheet" type="text/css" href="ApiHelp.css">
</head>
<meta name=MS-HKWD content="VBA examples,interference detection">

<body>
<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>
<h1>Detect Interferences Using a Transform Example (VBA)</h1>
<p>This example shows how to specify a transform to detect interferences.</p>

<p class="APICODE">
'----------------------------------------------------------------------------<br>
' Preconditions:<br>
' 1. Open <i>public_documents</i><b>\samples\tutorial\api\InterferenceAssem.sldasm</b>.<br>
' 2. Uncomment one of the userOpt assignments.<br>
'<br>
' Postconditions:<br>
' 1. When the macro stops, observe the position of the components in the <br>
'&nbsp;&nbsp;&nbsp; graphics area.<br>
' 2. Press F5 to continue.<br>
' 3. Inspect the Immediate Window for interfering components.<br>
'<br>
' NOTE: Because the model is used elsewhere,<br>
' do not save changes when closing it.<br>
' ---------------------------------------------------------------------------</p>
<p class="APICODE">Dim swApp As SldWorks.SldWorks<br>
Dim swDoc As SldWorks.ModelDoc2<br>
Dim swADoc As SldWorks.AssemblyDoc<br>
Dim swSM As SldWorks.SelectionMgr<br>
Dim swIDM As InterferenceDetectionMgr<br>
Dim swComp() As SldWorks.Component2<br>
Dim varComp As Variant<br>
Dim numOfComp As Long<br>
Dim swCompTrans() As SldWorks.MathTransform<br>
Dim varCompTrans As Variant<br>
Dim isInterfering As Boolean<br>
Dim outIntComp As Variant<br>
Dim outIntFaces As Variant<br>
Dim gposX As Double<br>
Dim gposY As Double<br>
Dim I As Long</p>
<p class="APICODE">Option Explicit</p>
<p class="APICODE">' Uncomment one of the following lines to 
transform the components<br>
&nbsp;&nbsp;&nbsp; 'Const userOpt = 0 'make components coincident<br>
&nbsp;&nbsp;&nbsp; Const userOpt = 1 'make components intersecting</p>
<p class="APICODE">Sub main()<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Set swApp = Application.SldWorks<br>
&nbsp;&nbsp;&nbsp; Set swDoc = swApp.ActiveDoc<br>
&nbsp;&nbsp;&nbsp; Set swADoc = swDoc<br>
&nbsp;&nbsp;&nbsp; Set swSM = swDoc.SelectionManager<br>
&nbsp;&nbsp;&nbsp; SetPosAsPerOption<br>
&nbsp;&nbsp;&nbsp; SelectAllComponent<br>
&nbsp;&nbsp;&nbsp; isInterfering = False<br>
&nbsp;&nbsp;&nbsp; numOfComp = swSM.GetSelectedObjectCount<br>
&nbsp;&nbsp;&nbsp; If (numOfComp) Then<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSelectedComp<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintComponentName varComp<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CreateSameTransMatAsCompCount<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ChangePosOfCompAsPerOption<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; varCompTrans = 
swCompTrans<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set swIDM = 
swADoc.<b>InterferenceDetectionManager</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; swIDM.<b>TreatCoincidenceAsInterference</b> 
= True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isInterfering = 
swIDM.<b>GetComponentsTransformInterference</b>((varComp), (varCompTrans), outIntComp)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stop ' Observe 
transformation of objects for interference detection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; swIDM.<b>Done</b> ' 
Interference detection stopped<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintInterferenceInfo<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; varComp = Empty<br>
&nbsp;&nbsp;&nbsp; Else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox (&quot;Select components&quot;)<br>
&nbsp;&nbsp;&nbsp; End If</p>
<p class="APICODE">End Sub<br>
Sub SetPosAsPerOption()<br>
&nbsp;&nbsp;&nbsp; If (userOpt = 0) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gposX = 100 / 1000<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gposY = -50 / 1000<br>
&nbsp;&nbsp;&nbsp; ElseIf (userOpt = 1) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gposX = 70 / 1000<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gposY = -50 / 1000<br>
&nbsp;&nbsp;&nbsp; End If<br>
End Sub<br>
Sub SelectAllComponent()<br>
&nbsp;&nbsp;&nbsp; Dim boolstatus As Boolean<br>
&nbsp;&nbsp;&nbsp; boolstatus = 
swDoc.Extension.SelectByID2(&quot;SquarePad_Red-1@InterferenceAssem&quot;, &quot;COMPONENT&quot;, 0, 
0, 0, False, 0, Nothing, 0)<br>
&nbsp;&nbsp;&nbsp; boolstatus = 
swDoc.Extension.SelectByID2(&quot;SquarePad_Green-1@InterferenceAssem&quot;, &quot;COMPONENT&quot;, 
0, 0, 0, True, 0, Nothing, 0)<br>
&nbsp;&nbsp;&nbsp; boolstatus = 
swDoc.Extension.SelectByID2(&quot;SquarePad_Blue-1@InterferenceAssem&quot;, &quot;COMPONENT&quot;, 
0, 0, 0, True, 0, Nothing, 0)<br>
&nbsp;&nbsp;&nbsp; boolstatus = 
swDoc.Extension.SelectByID2(&quot;SquarePad_Orange-1@InterferenceAssem&quot;, &quot;COMPONENT&quot;, 
0, 0, 0, True, 0, Nothing, 0)<br>
&nbsp;&nbsp;&nbsp; boolstatus = 
swDoc.Extension.SelectByID2(&quot;SquarePad_SkyBlue-1@InterferenceAssem&quot;, 
&quot;COMPONENT&quot;, 0, 0, 0, True, 0, Nothing, 0)<br>
&nbsp;&nbsp;&nbsp; boolstatus = 
swDoc.Extension.SelectByID2(&quot;SquarePad_Yellow-1@InterferenceAssem&quot;, &quot;COMPONENT&quot;, 
0, 0, 0, True, 0, Nothing, 0)<br>
&nbsp;&nbsp;&nbsp; boolstatus = 
swDoc.Extension.SelectByID2(&quot;SquarePad_Pink-1@InterferenceAssem&quot;, &quot;COMPONENT&quot;, 
0, 0, 0, True, 0, Nothing, 0)<br>
End Sub<br>
Sub PrintInterferenceInfo()<br>
&nbsp;&nbsp;&nbsp; If (isInterfering) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print (&quot;Interfering 
components:&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print (&quot;&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For I = 0 To UBound(outIntComp)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim swOutComp 
As SldWorks.Component2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set swOutComp 
= outIntComp(I)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print 
(swOutComp.Name2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
swOutComp.Select4 True, Nothing, False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set swOutComp 
= Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next I<br>
&nbsp;&nbsp;&nbsp; Else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print (&quot;No interference&quot;)<br>
&nbsp;&nbsp;&nbsp; End If<br>
End Sub<br>
Sub getSelectedComp()<br>
&nbsp;&nbsp;&nbsp; ReDim swComp(numOfComp - 1)<br>
&nbsp;&nbsp;&nbsp; For I = 1 To numOfComp<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set swComp(I - 1) = 
swSM.GetSelectedObject6(I, -1)<br>
&nbsp;&nbsp;&nbsp; Next I<br>
&nbsp;&nbsp;&nbsp; varComp = swComp<br>
End Sub<br>
Sub PrintComponentName(varComp As Variant)<br>
&nbsp;&nbsp;&nbsp; If Not (IsEmpty(varComp)) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If userOpt = 0 Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print 
(&quot;Detect interferences between coincident components:&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print 
(&quot;&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print 
(&quot;Detect interferences between intersecting components:&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print 
(&quot;&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For I = LBound(varComp) To 
UBound(varComp)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim swComp As 
SldWorks.Component2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set swComp = 
varComp(I)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Debug.Print (&quot;Component name : &quot; &amp; swComp.Name2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set swComp = 
Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next I<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; Debug.Print (&quot;&quot;)<br>
End Sub<br>
Sub CreateSameTransMatAsCompCount()<br>
&nbsp;&nbsp;&nbsp; ReDim swCompTrans(numOfComp - 1)<br>
&nbsp;&nbsp;&nbsp; If Not (IsEmpty(varComp)) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For I = LBound(varComp) To 
UBound(varComp)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim swComp As 
SldWorks.Component2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set swComp = 
varComp(I)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set 
swCompTrans(I) = swComp.Transform2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set swComp = 
Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next I<br>
&nbsp;&nbsp;&nbsp; End If<br>
End Sub<br>
Sub ChangePosOfCompAsPerOption()<br>
&nbsp;&nbsp;&nbsp; ChangeRefPosOfComp gposX, gposY<br>
End Sub</p>
<p class="APICODE">Sub ChangePosOfComp(compNum As Long, pos As Double)<br>
&nbsp;&nbsp;&nbsp; Dim varData As Variant<br>
&nbsp;&nbsp;&nbsp; varData = swCompTrans(compNum).ArrayData<br>
&nbsp;&nbsp;&nbsp; varData(9) = pos<br>
&nbsp;&nbsp;&nbsp; swCompTrans(compNum).ArrayData = varData<br>
End Sub</p>
<p class="APICODE">Sub ChangeRefPosOfComp(posX As Double, posY As Double)<br>
&nbsp;&nbsp;&nbsp; If Not (IsEmpty(varComp)) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For I = LBound(varComp) To 
UBound(varComp)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If (I &gt; 0) 
Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Dim varData As Variant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
varData = swCompTrans(I).ArrayData<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
varData(9) = posX * I<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
varData(10) = posY * I<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
swCompTrans(I).ArrayData = varData<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
If (userOpt = 2) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
swComp(I).Transform2 = swCompTrans(I)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
swDoc.ForceRebuild3 True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
End If<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next I<br>
&nbsp;&nbsp;&nbsp; End If<br>
End Sub</p>

</body>

</html>
