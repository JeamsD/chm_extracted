<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Create Imported Surface Body from Sketch Example (C#)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta NAME=MS-HAID CONTENT=EXCreatedImportedSurfaceBodyFromSketch>
<meta name=MS-HKWD content="Imported surfaces">
<meta name=MS-HKWD content="C# examples">
<meta name=MS-HKWD content="C# examples,bodies">
<meta name=MS-HKWD content="Sketch (see also ISketch Interface)">
<meta name=MS-HKWD content="Surface (see also ISurface Interface)">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=5843>
<meta name=layout-width content=750>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Create Imported Surface Body from Sketch Example (C#)</h1>

<p>This example shows how to create an imported body surface from a sketch.</p>

<p>&nbsp;</p>

<p class=apiCode>'--------------------------------------</p>

<p class=apiCode>'</p>

<p class=apiCode>' Preconditions: A circular sketch is selected.</p>

<p class=apiCode>'</p>

<p class=apiCode>' Postconditions: A cylindrical imported surface body 
 is created.</p>

<p class=apiCode>'</p>

<p class=apiCode>'--------------------------------------</p>

<p class=apiCode>using System;</p>

<p class=apiCode>namespace BodyFromSketchProfile</p>

<p class=apiCode>{</p>

<p class=apiCode
	style="margin-left: 49px;">/// &lt;summary&gt;</p>

<p class=apiCode
	style="margin-left: 49px;">/// Summary description for Class1</p>

<p class=apiCode
	style="margin-left: 49px;">/// &lt;/summary&gt;</p>

<p class=apiCode
	style="margin-left: 49px;">class Application</p>

<p class=apiCode
	style="margin-left: 49px;">{</p>

<p class=apiCode
	style="margin-left: 89px;">static double ExtrudeDepth = 0.1;</p>

<p class=apiCode
	style="margin-left: 89px;">/// &lt;summary&gt;</p>

<p class=apiCode
	style="margin-left: 89px;">/// Main entry point for the application</p>

<p class=apiCode
	style="margin-left: 89px;">/// &lt;/summary&gt;</p>

<p class=apiCode
	style="margin-left: 89px;">[STAThread]</p>

<p class=apiCode
	style="margin-left: 89px;">static void Main(string[] args)</p>

<p class=apiCode
	style="margin-left: 89px;">{</p>

<p class=apiCode
	style="margin-left: 129px;">bool bRetval;</p>

<p class=apiCode
	style="margin-left: 129px;">SldWorks.ISldWorks swApp;</p>

<p class=apiCode
	style="margin-left: 129px;">SldWorks.IModelDoc2 swDoc;</p>

<p class=apiCode
	style="margin-left: 129px;">SldWorks.IPartDoc swPart;</p>

<p class=apiCode
	style="margin-left: 129px;">SldWorks.IBody2 swBody;</p>

<p class=apiCode
	style="margin-left: 129px;">SldWorks.ISketch swSketch;</p>

<p class=apiCode
	style="margin-left: 129px;">SldWorks.IFeature swFeature;</p>

<p class=apiCode
	style="margin-left: 129px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 129px;">swApp = new SldWorks.SldWorksClass();</p>

<p class=apiCode
	style="margin-left: 129px;">swDoc = swApp.<span style="font-weight: bold;">IActiveDoc2</span>;</p>

<p class=apiCode
	style="margin-left: 129px;">swPart = (SldWorks.IPartDoc) swDoc;</p>

<p class=apiCode
	style="margin-left: 129px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 129px;">SldWorks.ISelectionMgr swSelMgr;</p>

<p class=apiCode
	style="margin-left: 129px;">swSelMgr = swDoc.<span style="font-weight: bold;">ISelectionManager</span>;</p>

<p class=apiCode
	style="margin-left: 129px;">swFeature = (SldWorks.IFeature) swSelMgr.<span 
 style="font-weight: bold;">GetSelectedObject6</span>(1,0);</p>

<p class=apiCode
	style="margin-left: 129px;">swSketch = (SldWorks.ISketch) swFeature.<span 
 style="font-weight: bold;">GetSpecificFeature2</span>();</p>

<p class=apiCode
	style="margin-left: 129px;">if (swSketch != null)</p>

<p class=apiCode
	style="margin-left: 129px;">{</p>

<p class=apiCode
	style="margin-left: 169px;">SldWorks.IEnumSketchSegments swSegs;</p>

<p class=apiCode
	style="margin-left: 169px;">swSegs = swSketch.IEnumSketchSegments();</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">int nFetched = 0;</p>

<p class=apiCode
	style="margin-left: 169px;">int segcount = 0;</p>

<p class=apiCode
	style="margin-left: 169px;">SldWorks.SketchSegment swSeg;</p>

<p class=apiCode
	style="margin-left: 169px;">System.Collections.ArrayList ProfileSegs 
 = new System.Collections.ArrayList();</p>

<p class=apiCode
	style="margin-left: 169px;">System.Collections.ArrayList BodySurfaces 
 = new System.Collections.ArrayList();</p>

<p class=apiCode
	style="margin-left: 169px;">SldWorks.ISurface swSurface;</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">swSegs.<span style="font-weight: bold;">Next</span>(1, 
 out swSeg, ref nFetched);</p>

<p class=apiCode
	style="margin-left: 169px;">while (nFetched != 0)</p>

<p class=apiCode
	style="margin-left: 169px;">{</p>

<p class=apiCode
	style="margin-left: 209px;">if (swSeg.<span style="font-weight: bold;">ConstructionGeometry</span> 
 == false)</p>

<p class=apiCode
	style="margin-left: 209px;">{</p>

<p class=apiCode
	style="margin-left: 249px;">swBody = swPart.<span style="font-weight: bold;">ICreateNewBody2</span>();</p>

<p class=apiCode
	style="margin-left: 249px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 249px;">segcount++;</p>

<p class=apiCode
	style="margin-left: 249px;">SldWorks.ISketchPoint swStartPt;</p>

<p class=apiCode
	style="margin-left: 249px;">SldWorks.ISketchPoint swEndPt;</p>

<p class=apiCode
	style="margin-left: 249px;">SldWorks.ICurve swCurve = null;</p>

<p class=apiCode
	style="margin-left: 249px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 249px;">switch (swSeg.<span style="font-weight: bold;">GetType</span>())</p>

<p class=apiCode
	style="margin-left: 249px;">{</p>

<p class=apiCode
	style="margin-left: 289px;">case (int)SwConst.swSketchSegments_e.swSketchARC:</p>

<p class=apiCode
	style="margin-left: 289px;">{</p>

<p class=apiCode
	style="margin-left: 289px;">SldWorks.ISketchArc swSkArc;</p>

<p class=apiCode
	style="margin-left: 289px;">swSkArc = (SldWorks.ISketchArc) swSeg;</p>

<p class=apiCode
	style="margin-left: 289px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 289px;">SldWorks.ISketchPoint swCenterPt;</p>

<p class=apiCode
	style="margin-left: 289px;">double [] normal;</p>

<p class=apiCode
	style="margin-left: 289px;">double radius;</p>

<p class=apiCode
	style="margin-left: 289px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 289px;">swCenterPt = swSkArc.<span style="font-weight: bold;">IGetCenterPoint2</span>();</p>

<p class=apiCode
	style="margin-left: 289px;">swStartPt = swSkArc.<span style="font-weight: bold;">IGetStartPoint2</span>();</p>

<p class=apiCode
	style="margin-left: 289px;">swEndPt = swSkArc.<span style="font-weight: bold;">IGetEndPoint2</span>();</p>

<p class=apiCode
	style="margin-left: 289px;">normal = (double[])swSkArc.<span style="font-weight: bold;">GetNormalVector</span>();</p>

<p class=apiCode
	style="margin-left: 289px;">radius = swSkArc.<span style="font-weight: bold;">GetRadius</span>();</p>

<p class=apiCode
	style="margin-left: 289px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 289px;">double []center = new double[3];</p>

<p class=apiCode
	style="margin-left: 289px;">double []startpt = new double[3];</p>

<p class=apiCode
	style="margin-left: 289px;">double []endpt = new double[3];</p>

<p class=apiCode
	style="margin-left: 289px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 289px;">center[0] = swCenterPt.<span style="font-weight: bold;">X</span>;</p>

<p class=apiCode
	style="margin-left: 289px;">center[1] = swCenterPt.<span style="font-weight: bold;">Y</span>;</p>

<p class=apiCode
	style="margin-left: 289px;">center[2] = swCenterPt.<span style="font-weight: bold;">Z</span>;</p>

<p class=apiCode
	style="margin-left: 289px;">startpt[0] = swStartPt.<span style="font-weight: bold;">X</span>;</p>

<p class=apiCode
	style="margin-left: 289px;">startpt[1] = swStartPt.<span style="font-weight: bold;">Y</span>;</p>

<p class=apiCode
	style="margin-left: 289px;">startpt[2] = swStartPt.<span style="font-weight: bold;">Z</span>;</p>

<p class=apiCode
	style="margin-left: 289px;">endpt[0] = swEndPt.<span style="font-weight: bold;">X</span>;</p>

<p class=apiCode
	style="margin-left: 289px;">endpt[1] = swEndPt.<span style="font-weight: bold;">Y</span>;</p>

<p class=apiCode
	style="margin-left: 289px;">endpt[2] = swEndPt.<span style="font-weight: bold;">Z</span>;</p>

<p class=apiCode
	style="margin-left: 289px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 289px;">swCurve = swBody.<span style="font-weight: bold;">IAddProfileArc</span>(center, 
 normal, radius, startpt, endpt);</p>

<p class=apiCode
	style="margin-left: 289px;">break;</p>

<p class=apiCode
	style="margin-left: 249px;">}</p>

<p class=apiCode
	style="margin-left: 249px;">case (int)SwConst.swSketchSegments_e.swSketchLINE:</p>

<p class=apiCode
	style="margin-left: 249px;">{</p>

<p class=apiCode
	style="margin-left: 249px;">SldWorks.ISketchLine swSkLine;</p>

<p class=apiCode
	style="margin-left: 249px;">swSkLine = (SldWorks.ISketchLine) swSeg;</p>

<p class=apiCode
	style="margin-left: 249px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 249px;">swStartPt = swSkLine.<span style="font-weight: bold;">IGetStartPoint2</span>();</p>

<p class=apiCode
	style="margin-left: 249px;">swEndPt = swSkLine.<span style="font-weight: bold;">IGetEndPoint2</span>();</p>

<p class=apiCode
	style="margin-left: 249px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 249px;">double []root = new double[3];</p>

<p class=apiCode
	style="margin-left: 249px;">double []dir = new double[3];</p>

<p class=apiCode
	style="margin-left: 249px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 249px;">root[0] = swStartPt.X;</p>

<p class=apiCode
	style="margin-left: 249px;">root[1] = swStartPt.Y;</p>

<p class=apiCode
	style="margin-left: 249px;">root[2] = swStartPt.Z;</p>

<p class=apiCode
	style="margin-left: 249px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 249px;">dir[0] = swEndPt.X - root[0];</p>

<p class=apiCode
	style="margin-left: 249px;">dir[1] = swEndPt.Y - root[1];</p>

<p class=apiCode
	style="margin-left: 249px;">dir[2] = swEndPt.Z - root[2];</p>

<p class=apiCode
	style="margin-left: 249px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 249px;">swCurve = swBody.<span style="font-weight: bold;">IAddProfileLine</span>(root, 
 dir);</p>

<p class=apiCode
	style="margin-left: 249px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 249px;">break;</p>

<p class=apiCode
	style="margin-left: 209px;">}</p>

<p class=apiCode
	style="margin-left: 209px;">default:</p>

<p class=apiCode
	style="margin-left: 249px;">System.Diagnostics.Debug.Assert(false, 
 &quot;Unhandled sketch segment type&quot;);</p>

<p class=apiCode
	style="margin-left: 249px;">break;</p>

<p class=apiCode
	style="margin-left: 169px;">}</p>

<p class=apiCode
	style="margin-left: 169px;">// Have the curve and the start and end 
 points</p>

<p class=apiCode
	style="margin-left: 169px;">// Create the side of the extrusion</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">ProfileSegment curSeg = new ProfileSegment(swSeg, 
 swCurve);</p>

<p class=apiCode
	style="margin-left: 169px;">double []surfeval;</p>

<p class=apiCode
	style="margin-left: 169px;">double []extruAxis = new double[3];</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">extruAxis[0] = 0.0;</p>

<p class=apiCode
	style="margin-left: 169px;">extruAxis[1] = 0.0;</p>

<p class=apiCode
	style="margin-left: 169px;">extruAxis[2] = 1.0;</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">ProfileSegs.<span style="font-weight: bold;">Add</span>(curSeg);</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">swSurface = swBody.<span style="font-weight: bold;">ICreateExtrusionSurface</span>((SldWorks.Curve)swCurve, 
 extruAxis);</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">//Create a trimming loop for the surface</p>

<p class=apiCode
	style="margin-left: 169px;">int nCurves = 4;</p>

<p class=apiCode
	style="margin-left: 169px;">int []Order = {2, 2, 2, 2};</p>

<p class=apiCode
	style="margin-left: 169px;">int []Dim = {2, 2, 2, 2};</p>

<p class=apiCode
	style="margin-left: 169px;">int []Periodic = {0, 0, 0, 0};</p>

<p class=apiCode
	style="margin-left: 169px;">int []nKnots = {4, 4, 4, 4};</p>

<p class=apiCode
	style="margin-left: 169px;">int []nCtrlPts = {2, 2, 2, 2};</p>

<p class=apiCode
	style="margin-left: 169px;">double []Knots = {0, 0, 1, 1, 0, 0, 1, 
 1, 0, 0, 1, 1, 0, 0, 1, 1};</p>

<p class=apiCode
	style="margin-left: 169px;">double []CtrlPts = new double[16];</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">double x = curSeg.iStartPt.<span style="font-weight: bold;">X</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">double y = curSeg.iStartPt.<span style="font-weight: bold;">Y</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">double z = curSeg.iStartPt.<span style="font-weight: bold;">Z</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">surfeval = (double[])swSurface.<span style="font-weight: bold;">GetClosestPointOn</span>(x, 
 y, z);</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[0] = surfeval[3];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[1] = surfeval[4];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[14] = surfeval[3];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[15] = surfeval[4];</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">x = curSeg.iEndPt.<span style="font-weight: bold;">X</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">y = curSeg.iEndPt.<span style="font-weight: bold;">Y</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">z = curSeg.iEndPt.<span style="font-weight: bold;">Z</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">surfeval = (double[])swSurface.<span style="font-weight: bold;">GetClosestPointOn</span>(x, 
 y, z);</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[2] = surfeval[3];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[3] = surfeval[4];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[4] = surfeval[3];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[5] = surfeval[4];</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">x = curSeg.iEndPt.<span style="font-weight: bold;">X</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">y = curSeg.iEndPt.<span style="font-weight: bold;">Y</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">z = curSeg.iEndPt.<span style="font-weight: bold;">Z</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">surfeval = (double[])swSurface.<span style="font-weight: bold;">GetClosestPointOn</span>(x, 
 y, z + ExtrudeDepth);</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[6] = surfeval[3];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[7] = surfeval[4];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[8] = surfeval[3];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[9] = surfeval[4];</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">x = curSeg.iStartPt.<span style="font-weight: bold;">X</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">y = curSeg.iStartPt.<span style="font-weight: bold;">Y</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">z = curSeg.iStartPt.<span style="font-weight: bold;">Z</span>;</p>

<p class=apiCode
	style="margin-left: 169px;">surfeval = (double[])swSurface.<span style="font-weight: bold;">GetClosestPointOn</span>(x, 
 y, z + ExtrudeDepth);</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[10] = surfeval[3];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[11] = surfeval[4];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[12] = surfeval[3];</p>

<p class=apiCode
	style="margin-left: 169px;">CtrlPts[13] = surfeval[4];</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">swSurface.<span style="font-weight: bold;">AddTrimmingLoop</span>(nCurves, 
 Order, Dim, Periodic, nKnots, nCtrlPts, Knots, CtrlPts);</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">bRetval = swBody.<span style="font-weight: bold;">CreateTrimmedSurface</span>();</p>

<p class=apiCode
	style="margin-left: 169px;">bRetval = swBody.<span style="font-weight: bold;">CreateBodyFromSurfaces</span>();</p>

<p class=apiCode
	style="margin-left: 129px;">}</p>

<p class=apiCode
	style="margin-left: 129px;">swSegs.Next(1, out swSeg, ref nFetched);</p>

<p class=apiCode
	style="margin-left: 96px;"><span style="margin-left: 129px;">}</span></p>

<p class=apiCode
	style="margin-left: 49px;">}</p>

<p class=apiCode
	style="margin-left: 49px;">}// Main</p>

<p class=apiCode>}// Application</p>

<p class=apiCode>class ProfileSegment</p>

<p class=apiCode
	style="margin-left: 49px;">{</p>

<p class=apiCode
	style="margin-left: 49px;">public SldWorks.ISketchSegment iSkSeg;</p>

<p class=apiCode
	style="margin-left: 49px;">public SldWorks.ICurve iCurve;</p>

<p class=apiCode
	style="margin-left: 49px;">public SldWorks.ISketchPoint iStartPt;</p>

<p class=apiCode
	style="margin-left: 49px;">public SldWorks.ISketchPoint iEndPt;</p>

<p class=apiCode
	style="margin-left: 49px;">public ProfileSegment(SldWorks.ISketchSegment 
 swSkSeg, SldWorks.ICurve swCurve)</p>

<p class=apiCode
	style="margin-left: 49px;">{</p>

<p class=apiCode
	style="margin-left: 89px;">iSkSeg = swSkSeg;</p>

<p class=apiCode
	style="margin-left: 89px;">iCurve = swCurve;</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 89px;">switch (iSkSeg.<span style="font-weight: bold;">GetType</span>())</p>

<p class=apiCode
	style="margin-left: 89px;">{</p>

<p class=apiCode
	style="margin-left: 129px;">case (int)SwConst.swSketchSegments_e.swSketchARC:</p>

<p class=apiCode
	style="margin-left: 129px;">{</p>

<p class=apiCode
	style="margin-left: 169px;">SldWorks.ISketchArc swSkArc;</p>

<p class=apiCode
	style="margin-left: 169px;">swSkArc = (SldWorks.ISketchArc) iSkSeg;</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">iStartPt = swSkArc.<span style="font-weight: bold;">IGetStartPoint2</span>();</p>

<p class=apiCode
	style="margin-left: 169px;">iEndPt = swSkArc.<span style="font-weight: bold;">IGetEndPoint2</span>();</p>

<p class=apiCode
	style="margin-left: 169px;">break;</p>

<p class=apiCode
	style="margin-left: 129px;">}</p>

<p class=apiCode>&nbsp;</p>

<p class=apiCode
	style="margin-left: 129px;">case (int)SwConst.swSketchSegments_e.swSketchLINE:</p>

<p class=apiCode
	style="margin-left: 129px;">{</p>

<p class=apiCode
	style="margin-left: 169px;">SldWorks.ISketchLine swSkLine;</p>

<p class=apiCode
	style="margin-left: 169px;">swSkLine = (SldWorks.ISketchLine) iSkSeg;</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">iStartPt = swSkLine.<span style="font-weight: bold;">IGetStartPoint2</span>();</p>

<p class=apiCode
	style="margin-left: 169px;">iEndPt = swSkLine.<span style="font-weight: bold;">IGetEndPoint2</span>();</p>

<p class=apiCode
	style="margin-left: 169px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 169px;">break;</p>

<p class=apiCode
	style="margin-left: 129px;">}</p>

<p class=apiCode
	style="margin-left: 129px;">default:</p>

<p class=apiCode
	style="margin-left: 169px;">System.Diagnostics.Debug.Assert(false, 
 &quot;Unhandled sketch segment type&quot;);</p>

<p class=apiCode
	style="margin-left: 169px;">break;</p>

<p class=apiCode
	style="margin-left: 84px;"><span style="margin-left: 129px;">}</span></p>

<p class=apiCode
	style="margin-left: 48px;">}</p>

<p class=apiCode
	style="margin-left: 0px;"><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode
	style="margin-left: 12px;"><span style="margin-left: 49px;">class Vector</span></p>

<p class=apiCode>{</p>

<p class=apiCode
	style="margin-left: 49px;">private</p>

<p class=apiCode
	style="margin-left: 89px;">double []coords = new double[3];</p>

<p class=apiCode
	style="margin-left: 89px;">&nbsp;</p>

<p class=apiCode
	style="margin-left: 49px;">public Vector(double x, double y, double 
 z)</p>

<p class=apiCode
	style="margin-left: 49px;">{</p>

<p class=apiCode
	style="margin-left: 89px;">coords[0] = x; coords[1] = y; coords[2] 
 = z;</p>

<p class=apiCode
	style="margin-left: 49px;">}</p>

<p class=apiCode>}</p>

<p class=apiCode>}// BodyFromSketchProfile</p>

</body>

</html>
