<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Create Parabola Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HAID content=EXCreateParabola>
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=4922>
<meta name=layout-width content=777>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./ApiHelp.css">



</head>
<meta name=MS-HKWD content="VBA examples,parabolas">
<!--(Body)==========================================================-->


<body>
<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>
<h1>Create Parabola Example (VBA)</h1>

<p>This example shows how to create a parabola and get its corresponding equation.</p>

<p class="APICODE">
'----------------------------------------------------------------------------<br>
' Preconditions: Verify that the specified template exists.<br>
'<br>
' Postconditions:<br>
' 1. Inserts a sketch.<br>
' 2. Creates a parabola.<br>
' 3. Inspect the Immediate window for the parabolic equation.<br>
'----------------------------------------------------------------------------</p>
<p class="APICODE">Const pi As Double = 3.14159265<br>
Option Explicit</p>
<p class="APICODE">Sub main()</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim swApp As SldWorks.SldWorks<br>
&nbsp;&nbsp;&nbsp; Dim swModel As SldWorks.ModelDoc2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Set swApp = Application.SldWorks<br>
&nbsp;&nbsp;&nbsp; Set swModel = swApp.<b>NewDocument</b>(&quot;C:\ProgramData\SOLIDWORKS\SOLIDWORKS 
2016\templates\Part.prtdot&quot;, 0, 0, 0)<br>
&nbsp;&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; If swModel Is Nothing Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; swApp.<b>SendMsgToUser2</b> &quot;A part 
document must be active.&quot;, swMbWarning, swMbOk<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub<br>
&nbsp;&nbsp;&nbsp; End If</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim modelType As Long<br>
&nbsp;&nbsp;&nbsp; modelType = swModel.<b>GetType</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; If modelType &lt;&gt; SwConst.swDocPART Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; swApp.<b>SendMsgToUser2</b> &quot;A part 
document must be active.&quot;, swMbWarning, swMbOk<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; 'Select a plane on which to sketch<br>
&nbsp;&nbsp;&nbsp; If SelectPlane(swModel) = False Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox &quot;Could not select plane.&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; 'Get point data<br>
&nbsp;&nbsp;&nbsp; Dim pFocal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As 
SldWorks.SketchPoint<br>
&nbsp;&nbsp;&nbsp; Dim pApex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As 
SldWorks.SketchPoint<br>
&nbsp;&nbsp;&nbsp; Dim pStart&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As 
SldWorks.SketchPoint<br>
&nbsp;&nbsp;&nbsp; Dim pEnd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; As 
SldWorks.SketchPoint<br>
&nbsp;&nbsp;&nbsp; Dim swSkMgr&nbsp;&nbsp;&nbsp;&nbsp; As SldWorks.SketchManager<br>
&nbsp;&nbsp;&nbsp; Set swSkMgr = swModel.<b>SketchManager</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim swSelMgr As SldWorks.SelectionMgr<br>
&nbsp;&nbsp;&nbsp; Set swSelMgr = swModel.<b>SelectionManager</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim swSketch As Sketch<br>
&nbsp;&nbsp;&nbsp; swSkMgr.<b>InsertSketch</b> True<br>
&nbsp;&nbsp;&nbsp; Set swSketch = swSkMgr.<b>ActiveSketch</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; ' Focal point<br>
&nbsp;&nbsp;&nbsp; Set pFocal = swSkMgr.<b>CreatePoint</b>(0, 
-0.025930732990048, 0)<br>
&nbsp;&nbsp;&nbsp; ' Apex point<br>
&nbsp;&nbsp;&nbsp; Set pApex = swSkMgr.<b>CreatePoint</b>(1.10754938634727E-02, 
-4.85199777778575E-02, 0)<br>
&nbsp;&nbsp;&nbsp; ' Start point<br>
&nbsp;&nbsp;&nbsp; Set pStart = swSkMgr.<b>CreatePoint</b>(0.057136404168939, 
8.69770346454566E-02, 0)<br>
&nbsp;&nbsp;&nbsp; ' End point<br>
&nbsp;&nbsp;&nbsp; Set pEnd = swSkMgr.<b>CreatePoint</b>(-0.120690397734139, 
-4.65528735997846E-03, 0)<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim vPoint As Variant<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; ' Make sure a sketch is active<br>
&nbsp;&nbsp;&nbsp; If swSketch Is Nothing Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox &quot;Please sketch a focal point, 
apex point, start point, and end point.&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; vPoint = swSketch.<b>GetSketchPoints2</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; ' Make sure the sketch has the necessary 
points<br>
&nbsp;&nbsp;&nbsp; If UBound(vPoint) &lt;= 2 Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox &quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
You did not sketch enough points to define the parabola.&quot; &amp; vbNewLine &amp; &quot; Please 
sketch a focal point, apex point, start point, and end point.&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim SkParabola As SldWorks.SketchParabola<br>
&nbsp;&nbsp;&nbsp; Set SkParabola = swModel.<b>SketchManager</b>.<b>CreateParabola</b>(pFocal.X, 
pFocal.Y, 0, pApex.X, pApex.Y, 0, pStart.X, pStart.Y, 0, pEnd.X, pEnd.Y, 0)<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; swModel.<b>ViewZoomtofit2</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; 'Extract information about the parabola<br>
&nbsp;&nbsp;&nbsp; Set pApex = SkParabola.<b>GetApexPoint2</b><br>
&nbsp;&nbsp;&nbsp; Set pStart = SkParabola.<b>GetStartPoint2</b><br>
&nbsp;&nbsp;&nbsp; Set pEnd = SkParabola.<b>GetEndPoint2</b><br>
&nbsp;&nbsp;&nbsp; Set pFocal = SkParabola.<b>GetFocalPoint2</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Apex&nbsp; Point&nbsp;&nbsp; = (&quot; &amp; pApex.<b>X</b> * 1000 &amp; &quot;, &quot; &amp; pApex.<b>Y</b> 
* 1000 &amp; &quot;, &quot; &amp; pApex.<b>Z</b> * 1000 &amp; &quot;) mm&quot;<br>
&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start Point&nbsp;&nbsp; 
= (&quot; &amp; pStart.<b>X</b> * 1000 &amp; &quot;, &quot; &amp; pStart.<b>Y</b> * 1000 &amp; &quot;, &quot; &amp; pStart.<b>Z</b> 
* 1000 &amp; &quot;) mm&quot;<br>
&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End Point&nbsp;&nbsp; 
= (&quot; &amp; pEnd.<b>X</b> * 1000 &amp; &quot;, &quot; &amp; pEnd.<b>Y</b> * 1000 &amp; &quot;, &quot; &amp; pEnd.Z * 1000 
&amp; &quot;) mm&quot;<br>
&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Focal Point&nbsp;&nbsp; 
= (&quot; &amp; pFocal.<b>X</b> * 1000 &amp; &quot;, &quot; &amp; pFocal.<b>Y</b> * 1000 &amp; &quot;, &quot; &amp; pFocal.<b>Z</b> 
* 1000 &amp; &quot;) mm&quot;<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; ' Define point parameters<br>
&nbsp;&nbsp;&nbsp; If Not pFocal.<b>Z</b> = 0 Or Not pApex.<b>Z</b> = 0 Or Not 
pStart.<b>Z</b> = 0 Or Not pEnd.<b>Z</b> = 0 Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox &quot;Need a 2D sketch.&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; ' Algebraic equation of parabola<br>
&nbsp;&nbsp;&nbsp; Dim h As Double<br>
&nbsp;&nbsp;&nbsp; Dim p As Double<br>
&nbsp;&nbsp;&nbsp; Dim k As Double<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; h = pApex.<b>X</b><br>
&nbsp;&nbsp;&nbsp; k = pApex.<b>Y</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; ' Correct anomalies when the parabola is 
aligned with the x and y axes<br>
&nbsp;&nbsp;&nbsp; If pFocal.<b>Y</b> = pApex.<b>Y</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If pFocal.<b>X</b> &gt; pApex.<b>X</b> 
Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = 
Sqr((pFocal.<b>Y</b> - pApex.<b>Y</b>) ^ 2 + (pFocal.<b>X</b> - pApex.<b>X</b>) 
^ 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = -(Sqr((pFocal.<b>Y</b> 
- pApex.<b>Y</b>) ^ 2 + (pFocal.<b>X</b> - pApex.<b>X</b>) ^ 2))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; If pFocal.<b>X</b> = pApex.<b>X</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If pFocal.<b>Y</b> &gt; pApex.<b>Y</b> 
Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = 
Sqr((pFocal.<b>Y</b> - pApex.<b>Y</b>) ^ 2 + (pFocal.<b>X</b> - pApex.<b>X</b>) 
^ 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = -(Sqr((pFocal.<b>Y</b> 
- pApex.<b>Y</b>) ^ 2 + (pFocal.<b>X</b> - pApex.<b>X</b>) ^ 2))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; If pFocal.<b>X</b> &lt;&gt; pApex.<b>X</b> And 
pFocal.<b>Y</b> &lt;&gt; pApex.<b>Y</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = (Sqr((pFocal.<b>Y</b> - pApex.<b>Y</b>) 
^ 2 + (pFocal.<b>X</b> - pApex.<b>X</b>) ^ 2))<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim a As Double<br>
&nbsp;&nbsp;&nbsp; Dim b As Double<br>
&nbsp;&nbsp;&nbsp; Dim c As Double<br>
&nbsp;&nbsp;&nbsp; Dim c1 As Double<br>
&nbsp;&nbsp;&nbsp; Dim c2 As Double<br>
&nbsp;&nbsp;&nbsp; Dim c3 As Double<br>
&nbsp;&nbsp;&nbsp; Dim c4 As Double<br>
&nbsp;&nbsp;&nbsp; Dim c5 As Double<br>
&nbsp;&nbsp;&nbsp; Dim c6 As Double<br>
&nbsp;&nbsp;&nbsp; Dim theta As Double<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; ' Obtain the correct value for theta as 
the parabola rotates<br>
&nbsp;&nbsp;&nbsp; If pFocal.<b>X</b> &lt;&gt; pApex.<b>X</b> And pFocal.<b>Y</b> &lt;&gt; 
pApex.<b>Y</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a = 1 / (4 * p)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = -k / (2 * p)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c = (k * k / (4 * p)) + h<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Theta in first 
quadrant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If pFocal.<b>Y</b> &gt; pApex.<b>Y</b> 
And pFocal.<b>X</b> &gt; pApex.<b>X</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theta = 
Atn((pFocal.<b>Y</b> - pApex.<b>Y</b>) / (pFocal.<b>X</b> - pApex.<b>X</b>))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Theta in second 
quadrant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If pFocal.<b>Y</b> &gt; pApex.<b>Y</b> 
And pFocal.<b>X</b> &lt; pApex.<b>X</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theta = (Atn((pFocal.<b>Y</b> 
- pApex.<b>Y</b>) / (pFocal.<b>X</b> - pApex.<b>X</b>))) + pi<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Theta in the 
third quadrant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If pFocal.<b>Y</b> &lt; pApex.<b>Y</b> 
And pFocal.<b>X</b> &lt; pApex.<b>X</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theta = (Atn((pFocal.<b>Y</b> 
- pApex.<b>Y</b>) / (pFocal.<b>X</b> - pApex.<b>X</b>))) + pi<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Theta in the 
fourth quadrant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If pFocal.<b>Y</b> &lt; pApex.<b>Y</b> 
And pFocal.<b>X</b> &gt; pApex.<b>X</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theta = (Atn((pFocal.<b>Y</b> 
- pApex.<b>Y</b>) / (pFocal.<b>X</b> - pApex.<b>X</b>))) + (2 * pi)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c1 = Round(a * (Sin(theta)) 
^ 2, 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c2 = Round(-a * Sin(2 * theta), 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c3 = Round(a * (Cos(theta)) ^ 2, 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c4 = Round((-b * Sin(theta)) - 
Cos(theta), 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c5 = Round((b * Cos(theta)) - 
Sin(theta), 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c6 = Round(c, 2)<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print 
&quot;Equation of the parabola: &quot; &amp; c1 &amp; &quot;x^2 + &quot; &amp; c2 &amp; &quot;xy + &quot; &amp; c3 &amp; &quot;y^2 + &quot; &amp; c4 
&amp; &quot;x + &quot; &amp; c5 &amp; &quot;y + &quot; &amp; c6 &amp; &quot; = 0&quot;<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; ' If the parabola has a vertical axis of 
symmetry<br>
&nbsp;&nbsp;&nbsp; If pFocal.<b>X</b> = pApex.<b>X</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a = 1 / (4 * p)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = -h / (2 * p)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c = (h ^ 2 / (4 * p)) + k<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c1 = Round(a, 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c4 = Round(b, 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c6 = Round(c, 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print &quot;Equation of the 
parabola: y = &quot; &amp; c1 &amp; &quot;x^2 + &quot; &amp; c4 &amp; &quot;x + &quot; &amp; c6<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; ' If the parabola has a horizontal axis of 
symmetry<br>
&nbsp;&nbsp;&nbsp; If pFocal.<b>Y</b> = pApex.<b>Y</b> Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a = 1 / (4 * p)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = -k / (2 * p)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c = (k * k / (4 * p)) + h<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c3 = Round(a, 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c5 = Round(b, 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c6 = Round(c, 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print &quot;Equation of the 
parabola: x =&quot; &amp; c3 &amp; &quot;y^2 + &quot; &amp; c5 &amp; &quot;y + &quot; &amp; c6<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp; swSkMgr.<b>InsertSketch</b> True</p>
<p class="APICODE">End Sub<br>
</p>
<p class="APICODE">Public Function SelectPlane(Plane As SldWorks.ModelDoc2) As 
Boolean</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim featureTemp As Feature<br>
&nbsp;&nbsp;&nbsp; Set featureTemp = Plane.<b>FirstFeature</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; While Not featureTemp Is Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim sFeatureName As String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sFeatureName = featureTemp.<b>GetTypeName2</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If sFeatureName = 
&quot;RefPlane&quot; Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; featureTemp.<b>Select2</b> 
True, 0<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SelectPlane = 
True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Function<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set featureTemp = 
featureTemp.<b>GetNextFeature</b><br>
&nbsp;&nbsp;&nbsp; </p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Wend</p>
<p class="APICODE">End Function</p>

</body>

</html>
