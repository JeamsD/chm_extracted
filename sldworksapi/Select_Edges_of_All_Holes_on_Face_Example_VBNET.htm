<html>

<head>
<title>Select Edges of All Holes on Face Example (VB.NET)</title>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<link rel="stylesheet" type="text/css" href="ApiHelp.css">
</head>
<meta name=MS-HKWD content="VB.NET examples,holes">

<body>
<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>
<h1>Select Edges of All Holes on Face Example (VB.NET)</h1>

<p>This example shows how to select the edges on all circular holes on 
 a face.</p>

<p class=apiCode><font face="Verdana" style="font-size: 8pt"><b>NOTE</b>: </font><!--kadov_tag{{</spaces>}}-->
<font face="Verdana" style="font-size: 8pt">A 
 circular hole can be defined in a many ways; for example, <!--kadov_tag{{</spaces>}}-->a 
 circle inside an extruded sketch or a circle that is part&nbsp;<!--kadov_tag{{</spaces>}}-->of 
 a cut-extrude feature. Thus, there is no ready way to <!--kadov_tag{{</spaces>}}-->detect 
 a hole solely based on the feature information. <!--kadov_tag{{</spaces>}}-->However, 
 by directly examining the geometry and topology of <!--kadov_tag{{</spaces>}}-->the 
 model, it is possible to deduce holes. <!--kadov_tag{{</spaces>}}-->This 
 code uses many of the geometry- and&nbsp;<!--kadov_tag{{</spaces>}}-->topology-related objects and methods to traverse a face <!--kadov_tag{{</spaces>}}-->and 
 look for circular holes. </font></p>
<font SIZE="2" COLOR="#008000">
<p><font face="Courier New" size="2">
'------------------------------------------------------------------<br>
' Preconditions: Verify that the specified part to open exists.<br>
'<br>
' Postconditions:<br>
' 1. Opens the specified part document.<br>
' 2. Changes the view orientation to <b>Back</b>.<br>
' 3. Selects a face.<br>
' 4. Examines the geometry and topology of the selected face and<br>
'&nbsp;&nbsp;&nbsp; identifies the holes in the face.<br>
' 5. Deselects the face.<br>
' 6. Selects all edges of all circular holes on the face.<br>
' 7. Examine the graphics area.<br>
'<br>
' NOTE: Because the part is used elsewhere, do not save changes.<br>
'------------------------------------------------------------------</font></p>
</font>
<pre style="font-family: Courier New; font-size: 13; color: black; background: white"><span style="color:blue;">Imports</span>&nbsp;SolidWorks.Interop.sldworks
<span style="color:blue;">Imports</span>&nbsp;SolidWorks.Interop.swconst
<span style="color:blue;">Imports</span>&nbsp;System.Runtime.InteropServices
<span style="color:blue;">Imports</span>&nbsp;System
<span style="color:blue;">Imports</span>&nbsp;System.Diagnostics
 
<span style="color:blue;">Partial</span>&nbsp;<span style="color:blue;">Class</span>&nbsp;<span style="color:#2b91af;">SolidWorksMacro</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Public</span>&nbsp;<span style="color:blue;">Sub</span>&nbsp;main()
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swModel&nbsp;<span style="color:blue;">As</span>&nbsp;ModelDoc2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swModelDocExt&nbsp;<span style="color:blue;">As</span>&nbsp;ModelDocExtension
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swSelMgr&nbsp;<span style="color:blue;">As</span>&nbsp;SelectionMgr
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swSelData&nbsp;<span style="color:blue;">As</span>&nbsp;SelectData
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swFace&nbsp;<span style="color:blue;">As</span>&nbsp;Face2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;fileName&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">String</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;errors&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Integer</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;warnings&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Integer</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;bRet&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Boolean</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swApp&nbsp;=&nbsp;CreateObject(<span style="color:#a31515;">&quot;SldWorks.Application&quot;</span>)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName&nbsp;=&nbsp;<span style="color:#a31515;">&quot;C:\Users\Public\Documents\SOLIDWORKS\SOLIDWORKS 2018\samples\tutorial\advdrawings\gear-&nbsp;caddy.sldprt&quot;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swModel&nbsp;=&nbsp;swApp.<b>OpenDoc6</b>(fileName,&nbsp;swDocumentTypes_e.swDocPART,&nbsp;swOpenDocOptions_e.swOpenDocOptions_Silent,&nbsp;<span style="color:#a31515;">&quot;&quot;</span>,&nbsp;errors,&nbsp;warnings)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swModel.<b>ShowNamedView2</b>(<span style="color:#a31515;">&quot;*Back&quot;</span>,&nbsp;2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swModelDocExt&nbsp;=&nbsp;swModel.<b>Extension</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bRet&nbsp;=&nbsp;swModelDocExt.<b>SelectByID2</b>(<span style="color:#a31515;">&quot;&quot;</span>,&nbsp;<span style="color:#a31515;">&quot;FACE&quot;</span>,&nbsp;0.0290197084065686,&nbsp;0.0111645373580202,&nbsp;0,&nbsp;<span style="color:blue;">False</span>,&nbsp;0,&nbsp;<span style="color:blue;">Nothing</span>,&nbsp;0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swSelMgr&nbsp;=&nbsp;swModel.<b>SelectionManager</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swFace&nbsp;=&nbsp;swSelMgr.<b>GetSelectedObject6</b>(1,&nbsp;-1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swSelData&nbsp;=&nbsp;swSelMgr.<b>CreateSelectData</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swModel.<b>ClearSelection2</b>(<span style="color:blue;">True</span>)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SelectHoleEdges(swFace,&nbsp;swSelData)
 
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">Sub</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Function</span>&nbsp;GetFaceNormalAtMidCoEdge(<span style="color:blue;">ByVal</span>&nbsp;swCoEdge&nbsp;<span style="color:blue;">As</span>&nbsp;CoEdge)&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swFace&nbsp;<span style="color:blue;">As</span>&nbsp;Face2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swSurface&nbsp;<span style="color:blue;">As</span>&nbsp;Surface
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swLoop&nbsp;<span style="color:blue;">As</span>&nbsp;Loop2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;varParams()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;varPoint()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;dblMidParam&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;dblNormal(2)&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;bFaceSenseReversed&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Boolean</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varParams&nbsp;=&nbsp;swCoEdge.<b>GetCurveParams</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">If</span>&nbsp;varParams(6)&nbsp;&gt;&nbsp;varParams(7)&nbsp;<span style="color:blue;">Then</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblMidParam&nbsp;=&nbsp;(varParams(6)&nbsp;-&nbsp;varParams(7))&nbsp;/&nbsp;2&nbsp;+&nbsp;varParams(7)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Else</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblMidParam&nbsp;=&nbsp;(varParams(7)&nbsp;-&nbsp;varParams(6))&nbsp;/&nbsp;2&nbsp;+&nbsp;varParams(6)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">If</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varPoint&nbsp;=&nbsp;swCoEdge.<b>Evaluate</b>(dblMidParam)
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;Get&nbsp;the&nbsp;face&nbsp;of&nbsp;the&nbsp;given&nbsp;coedge</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;Check&nbsp;for&nbsp;the&nbsp;sense&nbsp;of&nbsp;the&nbsp;face</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swLoop&nbsp;=&nbsp;swCoEdge.<b>GetLoop</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swFace&nbsp;=&nbsp;swLoop.<b>GetFace</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swSurface&nbsp;=&nbsp;swFace.<b>GetSurface</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bFaceSenseReversed&nbsp;=&nbsp;swFace.<b>FaceInSurfaceSense</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varParams&nbsp;=&nbsp;swSurface.<b>EvaluateAtPoint</b>(varPoint(0),&nbsp;varPoint(1),&nbsp;varPoint(2))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">If</span>&nbsp;bFaceSenseReversed&nbsp;<span style="color:blue;">Then</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;Negate&nbsp;the&nbsp;surface&nbsp;normal&nbsp;as&nbsp;it&nbsp;is&nbsp;opposite&nbsp;from&nbsp;the&nbsp;face&nbsp;normal</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblNormal(0)&nbsp;=&nbsp;-varParams(0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblNormal(1)&nbsp;=&nbsp;-varParams(1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblNormal(2)&nbsp;=&nbsp;-varParams(2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Else</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblNormal(0)&nbsp;=&nbsp;varParams(0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblNormal(1)&nbsp;=&nbsp;varParams(1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblNormal(2)&nbsp;=&nbsp;varParams(2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">If</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetFaceNormalAtMidCoEdge&nbsp;=&nbsp;dblNormal
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">Function</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Function</span>&nbsp;GetTangentAtMidCoEdge(<span style="color:blue;">ByVal</span>&nbsp;swCoEdge&nbsp;<span style="color:blue;">As</span>&nbsp;CoEdge)&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;varParams()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;dblMidParam&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;dblTangent(2)&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double
</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varParams&nbsp;=&nbsp;swCoEdge.<b>GetCurveParams</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">If</span>&nbsp;varParams(6)&nbsp;&gt;&nbsp;varParams(7)&nbsp;<span style="color:blue;">Then</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblMidParam&nbsp;=&nbsp;(varParams(6)&nbsp;-&nbsp;varParams(7))&nbsp;/&nbsp;2.0#&nbsp;+&nbsp;varParams(7)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Else</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblMidParam&nbsp;=&nbsp;(varParams(7)&nbsp;-&nbsp;varParams(6))&nbsp;/&nbsp;2.0#&nbsp;+&nbsp;varParams(6)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">If</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varParams&nbsp;=&nbsp;swCoEdge.<b>Evaluate</b>(dblMidParam)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblTangent(0)&nbsp;=&nbsp;varParams(3)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblTangent(1)&nbsp;=&nbsp;varParams(4)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblTangent(2)&nbsp;=&nbsp;varParams(5)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetTangentAtMidCoEdge&nbsp;=&nbsp;dblTangent
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">Function</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Function</span>&nbsp;GetCrossProduct(<span style="color:blue;">ByVal</span>&nbsp;varVec1()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>,&nbsp;<span style="color:blue;">ByVal</span>&nbsp;varVec2()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>)&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;dblCross(2)&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblCross(0)&nbsp;=&nbsp;varVec1(1)&nbsp;*&nbsp;varVec2(2)&nbsp;-&nbsp;varVec1(2)&nbsp;*&nbsp;varVec2(1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblCross(1)&nbsp;=&nbsp;varVec1(2)&nbsp;*&nbsp;varVec2(0)&nbsp;-&nbsp;varVec1(0)&nbsp;*&nbsp;varVec2(2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblCross(2)&nbsp;=&nbsp;varVec1(0)&nbsp;*&nbsp;varVec2(1)&nbsp;-&nbsp;varVec1(1)&nbsp;*&nbsp;varVec2(0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetCrossProduct&nbsp;=&nbsp;dblCross
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">Function</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Function</span>&nbsp;VectorsAreEqual(<span style="color:blue;">ByVal</span>&nbsp;varVec1()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>,&nbsp;<span style="color:blue;">ByVal</span>&nbsp;varVec2()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>)&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Boolean</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;dblMag&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;dblDot&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;dblUnit1(2)&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;dblUnit2(2)&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblMag&nbsp;=&nbsp;(varVec1(0)&nbsp;*&nbsp;varVec1(0)&nbsp;+&nbsp;varVec1(1)&nbsp;*&nbsp;varVec1(1)&nbsp;+&nbsp;varVec1(2)&nbsp;*&nbsp;varVec1(2))&nbsp;^&nbsp;0.5
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblUnit1(0)&nbsp;=&nbsp;varVec1(0)&nbsp;/&nbsp;dblMag&nbsp;:&nbsp;dblUnit1(1)&nbsp;=&nbsp;varVec1(1)&nbsp;/&nbsp;dblMag&nbsp;:&nbsp;dblUnit1(2)&nbsp;=&nbsp;varVec1(2)&nbsp;/&nbsp;dblMag
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblMag&nbsp;=&nbsp;(varVec2(0)&nbsp;*&nbsp;varVec2(0)&nbsp;+&nbsp;varVec2(1)&nbsp;*&nbsp;varVec2(1)&nbsp;+&nbsp;varVec2(2)&nbsp;*&nbsp;varVec2(2))&nbsp;^&nbsp;0.5
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblUnit2(0)&nbsp;=&nbsp;varVec2(0)&nbsp;/&nbsp;dblMag&nbsp;:&nbsp;dblUnit2(1)&nbsp;=&nbsp;varVec2(1)&nbsp;/&nbsp;dblMag&nbsp;:&nbsp;dblUnit2(2)&nbsp;=&nbsp;varVec2(2)&nbsp;/&nbsp;dblMag
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblDot&nbsp;=&nbsp;dblUnit1(0)&nbsp;*&nbsp;dblUnit2(0)&nbsp;+&nbsp;dblUnit1(1)&nbsp;*&nbsp;dblUnit2(1)&nbsp;+&nbsp;dblUnit1(2)&nbsp;*&nbsp;dblUnit2(2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dblDot&nbsp;=&nbsp;<span style="color:#2b91af;">Math</span>.Abs(dblDot&nbsp;-&nbsp;1.0#)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;Compare&nbsp;within&nbsp;a&nbsp;tolerance</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">If</span>&nbsp;dblDot&nbsp;&lt;&nbsp;0.0000000001&nbsp;<span style="color:blue;">Then</span>&nbsp;<span style="color:green;">'1.0e-10</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorsAreEqual&nbsp;=&nbsp;<span style="color:blue;">True</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Else</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VectorsAreEqual&nbsp;=&nbsp;<span style="color:blue;">False</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">If</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">Function</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Sub</span>&nbsp;SelectHoleEdges(<span style="color:blue;">ByVal</span>&nbsp;swFace&nbsp;<span style="color:blue;">As</span>&nbsp;Face2,&nbsp;<span style="color:blue;">ByVal</span>&nbsp;swSelData&nbsp;<span style="color:blue;">As</span>&nbsp;SelectData)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swThisLoop&nbsp;<span style="color:blue;">As</span>&nbsp;Loop2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swThisCoEdge&nbsp;<span style="color:blue;">As</span>&nbsp;CoEdge
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swPartnerCoEdge&nbsp;<span style="color:blue;">As</span>&nbsp;CoEdge
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swEntity&nbsp;<span style="color:blue;">As</span>&nbsp;Entity
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;varThisNormal()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;varPartnerNormal()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;varCrossProduct()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;varTangent()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Double</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;vEdgeArr()&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Object</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swEdge&nbsp;<span style="color:blue;">As</span>&nbsp;Edge
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;swCurve&nbsp;<span style="color:blue;">As</span>&nbsp;Curve
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Dim</span>&nbsp;bRet&nbsp;<span style="color:blue;">As</span>&nbsp;<span style="color:blue;">Boolean</span>
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swThisLoop&nbsp;=&nbsp;swFace.<b>GetFirstLoop</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Do</span>&nbsp;<span style="color:blue;">While</span>&nbsp;<span style="color:blue;">Not</span>&nbsp;swThisLoop&nbsp;<span style="color:blue;">Is</span>&nbsp;<span style="color:blue;">Nothing</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;Hole&nbsp;is&nbsp;inner&nbsp;loop</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;Circular&nbsp;or&nbsp;elliptical&nbsp;hole&nbsp;has&nbsp;only&nbsp;one&nbsp;edge</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">If</span>&nbsp;swThisLoop.<b>IsOuter</b>&nbsp;=&nbsp;<span style="color:blue;">False</span>&nbsp;<span style="color:blue;">And</span>&nbsp;1&nbsp;=&nbsp;swThisLoop.<b>GetEdgeCount</b>&nbsp;<span style="color:blue;">Then</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swThisCoEdge&nbsp;=&nbsp;swThisLoop.<b>GetFirstCoEdge</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swPartnerCoEdge&nbsp;=&nbsp;swThisCoEdge.<b>GetPartner</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varThisNormal&nbsp;=&nbsp;GetFaceNormalAtMidCoEdge(swThisCoEdge)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varPartnerNormal&nbsp;=&nbsp;GetFaceNormalAtMidCoEdge(swPartnerCoEdge)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">If</span>&nbsp;<span style="color:blue;">Not</span>&nbsp;VectorsAreEqual(varThisNormal,&nbsp;varPartnerNormal)&nbsp;<span style="color:blue;">Then</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;There&nbsp;is&nbsp;a&nbsp;sufficient&nbsp;change&nbsp;between&nbsp;the&nbsp;two&nbsp;faces&nbsp;to&nbsp;determine</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;what&nbsp;kind&nbsp;of&nbsp;transition&nbsp;is&nbsp;being&nbsp;made</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varCrossProduct&nbsp;=&nbsp;GetCrossProduct(varThisNormal,&nbsp;varPartnerNormal)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varTangent&nbsp;=&nbsp;GetTangentAtMidCoEdge(swThisCoEdge)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">If</span>&nbsp;VectorsAreEqual(varCrossProduct,&nbsp;varTangent)&nbsp;<span style="color:blue;">Then</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;Hole</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vEdgeArr&nbsp;=&nbsp;swThisLoop.<b>GetEdges</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af;">Debug</span>.Assert(0&nbsp;=&nbsp;UBound(vEdgeArr))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swEdge&nbsp;=&nbsp;vEdgeArr(0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swCurve&nbsp;=&nbsp;swEdge.<b>GetCurve</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;Ignore&nbsp;elliptical&nbsp;holes</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">If</span>&nbsp;swCurve.<b>IsCircle</b>&nbsp;<span style="color:blue;">Then</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swEntity&nbsp;=&nbsp;swEdge
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bRet&nbsp;=&nbsp;swEntity.<b>Select4</b>(<span style="color:blue;">True</span>,&nbsp;swSelData)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#2b91af;">Debug</span>.Assert(bRet)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">If</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">If</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">If</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">If</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'&nbsp;Move&nbsp;on&nbsp;to&nbsp;the&nbsp;next</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swThisLoop&nbsp;=&nbsp;swThisLoop.<b>GetNext</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Loop</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">Sub</span>
 
 
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'''&nbsp;</span><span style="color:gray;">&lt;summary&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'''&nbsp;The&nbsp;SldWorks&nbsp;swApp&nbsp;variable&nbsp;is&nbsp;pre-assigned&nbsp;for&nbsp;you.</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:green;">'''&nbsp;</span><span style="color:gray;">&lt;/summary&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:blue;">Public</span>&nbsp;swApp&nbsp;<span style="color:blue;">As</span>&nbsp;SldWorks
 
 
<span style="color:blue;">End</span>&nbsp;<span style="color:blue;">Class</span></pre>

</body>

</html>
