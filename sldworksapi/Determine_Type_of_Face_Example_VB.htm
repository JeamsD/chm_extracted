<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Determine Type of Face Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=date content="06 13, 2002 8:10:08 AM">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=4665>
<meta name=layout-width content=628>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">

 <META NAME="MS-HKWD" CONTENT="VBA examples,faces">
</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Determine Type of Face Example (VBA)</h1>

<p>This example shows how to identify holes, bosses, and tangent faces 
 on a selected face.</p>
<p><b>NOTE:</b> To determine the type of face, start from a selected face and use IFace2::GetFirstLoop 
 to get the first loop in the face. For every loop on the face (use ILoop2::GetNext), 
 if the loop is not the outer loop (ILoop2::IsOuter equals false), then 
 get the coedge for this loop and the partner coedge for the coedge. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>For each coedge, get the face normal at the middle of the coedge. <!--kadov_tag{{</spaces>}}-->This 
 is found by obtaining the middle of the coedge with a call to ICoEdge::GetCurveParams, 
and a call to ICoEdge::Evaluate on the midpoint of the coedge to get the 
 point’s coordinates. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p>The normal is returned by a call to ISurface::EvaluateAtPoint at the 
 point in the middle of the coedge. If the normals for the two faces are 
 equal, then there is a tangent face (fillet) on the selected face. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->If 
 the normals are not equal, then if the cross product of the two normals 
 is equal to the tangent of the face, there is a hole at the coedge. <!--kadov_tag{{</spaces>}}-->Otherwise, 
 if there is a loop that is not the outer loop that does not meet any of 
 the other conditions, it is a boss. <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>
<pre>'----------------------------------------------
' Preconditions:
' 1. Open <i>public_documents</i><b>\samples\tutorial\api\block.sldprt</b>.
' 2. Select either face that contains a hole.
'
' Postconditions:
' 1. Identifies the hole in the selected face
'    and displays a message box.
' 2. Click <b>OK</b> to close the message box.
'
' NOTE: If you run this macro and select a face
' that does not have a hole, boss, or tangent face,
' then a message box is not displayed.
'------------------------------------------------
Option Explicit</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swDoc As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swFace As SldWorks.Face2
    Dim swSelData As SldWorks.SelectData</pre>
<pre>    Set swApp = GetObject(, &quot;SldWorks.Application&quot;)
    Set swDoc = swApp.<b>ActiveDoc</b></pre>
<pre>    'Verify that a face is selected
    Set swSelMgr = swDoc.<b>SelectionManager</b>
    If swSelMgr.GetSelectedObjectCount &lt;&gt; 1 Then Exit Sub
    If swSelMgr.<b>GetSelectedObjectType2</b>(1) &lt;&gt; swSelFACES Then Exit Sub</pre>
<pre>    'Get the selected face
    Set swFace = swSelMgr.<b>GetSelectedObject6</b>(1, -1)
    Set swSelData = swSelMgr.<b>CreateSelectData</b></pre>
<pre>    'Find the holes and bosses in the selected face
    Call FindHolesAndBosses(swFace, swSelData)</pre>
<pre>End Sub</pre>
<pre>'This subroutine locates all holes, bosses,
'and tangent faces in the selected face
Sub FindHolesAndBosses(swFace, swSelData)
    Dim swThisLoop As SldWorks.Loop2
    Dim swThisCoEdge As SldWorks.CoEdge
    Dim swPartnerFace As SldWorks.Face2
    Dim swPartnerLoop As SldWorks.Loop2
    Dim swPartnerCoEdge As SldWorks.CoEdge
    Dim swEntity As SldWorks.Entity
    Dim varThisNormal As Variant
    Dim varPartnerNormal As Variant
    Dim varCrossProduct As Variant
    Dim varTangent As Variant</pre>
<pre>    Set swThisLoop = swFace.<b>GetFirstLoop</b></pre>
<pre>    'For every loop on the face
    Do While Not swThisLoop Is Nothing
        If swThisLoop.<b>IsOuter</b> = False Then
            Set swThisCoEdge = swThisLoop.<b>GetFirstCoEdge</b>
            Set swPartnerCoEdge = swThisCoEdge.<b>GetPartner</b>
            varThisNormal = GetFaceNormalAtMidCoEdge(swThisCoEdge)
            varPartnerNormal = GetFaceNormalAtMidCoEdge(swPartnerCoEdge)
            If VectorsAreEqual(varThisNormal, varPartnerNormal) Then
               ' The neighboring face is tangent to the
               ' selected face; additional code is necessary for
               ' determining how the surface moves away from the
               ' selected face
                Set swPartnerLoop = swPartnerCoEdge.<b>GetLoop</b>
                Set swPartnerFace = swPartnerLoop.<b>GetFace</b>
                Set swEntity = swPartnerFace
                swEntity.<b>Select4</b> False, swSelData
                MsgBox &quot;This face is tangent.&quot;
            Else
               ' There is a sufficient change between
               ' the two faces to determine the kind of transition
               ' being made
                varCrossProduct = GetCrossProduct(varThisNormal, varPartnerNormal)
                varTangent = GetTangentAtMidCoEdge(swThisCoEdge)
                If VectorsAreEqual(varCrossProduct, varTangent) Then
                    'Hole
                    Set swPartnerLoop = swPartnerCoEdge.<b>GetLoop</b>
                    Set swPartnerFace = swPartnerLoop.<b>GetFace</b>
                    Set swEntity = swPartnerFace
                    swEntity.<b>Select4</b> False, swSelData
                    MsgBox &quot;This face is a hole.&quot;
                Else
                    'Boss
                    Set swPartnerLoop = swPartnerCoEdge.<b>GetLoop</b>
                    Set swPartnerFace = swPartnerLoop.<b>GetFace</b>
                    Set swEntity = swPartnerFace
                    swEntity.<b>Select4</b> False, swSelData
                    MsgBox &quot;This face is a boss.&quot;
                End If
            End If
        End If
        Set swThisLoop = swThisLoop.<b>GetNext</b>
    Loop
End Sub</pre>
<pre>'This function returns the face normal from the provided coedge
Function GetFaceNormalAtMidCoEdge(swCoEdge As CoEdge) As Variant
    Dim swFace As SldWorks.Face2
    Dim swSurface As SldWorks.Surface
    Dim swLoop As SldWorks.Loop2
    Dim varParams As Variant
    Dim varPoint As Variant
    Dim dblMidParam As Double
    Dim dblNormal(2) As Double
    Dim bFaceSenseReversed As Boolean</pre>
<pre>    varParams = swCoEdge.<b>GetCurveParams</b>
    If varParams(6) &gt; varParams(7) Then
        dblMidParam = (varParams(6) - varParams(7)) / 2 + varParams(7)
    Else
        dblMidParam = (varParams(7) - varParams(6)) / 2 + varParams(6)
    End If
    varPoint = swCoEdge.<b>Evaluate</b>(dblMidParam)</pre>
<pre>    ' Get the face of the given coedge; remember to check
    ' for the sense of the face
    Set swLoop = swCoEdge.<b>GetLoop</b>
    Set swFace = swLoop.<b>GetFace</b>
    Set swSurface = swFace.<b>GetSurface</b>
    bFaceSenseReversed = swFace.<b>FaceInSurfaceSense</b>
    varParams = swSurface.<b>EvaluateAtPoint</b>(varPoint(0), varPoint(1), varPoint(2))
    If bFaceSenseReversed Then
        ' Negate the surface normal as it is opposite from the face normal
        dblNormal(0) = -varParams(0)
        dblNormal(1) = -varParams(1)
        dblNormal(2) = -varParams(2)
    Else
        dblNormal(0) = varParams(0)
        dblNormal(1) = varParams(1)
        dblNormal(2) = varParams(2)
    End If
    GetFaceNormalAtMidCoEdge = dblNormal
End Function</pre>
<pre>'Get the tangent vector for the provided coedge
Function GetTangentAtMidCoEdge(swCoEdge As Variant) As Variant
    Dim varParams As Variant
    Dim dblMidParam As Double
    Dim dblTangent(2) As Double</pre>
<pre>    varParams = swCoEdge.<b>GetCurveParams</b>
    If varParams(6) &gt; varParams(7) Then
        dblMidParam = (varParams(6) - varParams(7)) / 2 + varParams(7)
    Else
        dblMidParam = (varParams(7) - varParams(6)) / 2 + varParams(6)
    End If</pre>
<pre>    varParams = swCoEdge.<b>Evaluate</b>(dblMidParam)
    dblTangent(0) = varParams(3)
    dblTangent(1) = varParams(4)
    dblTangent(2) = varParams(5)
    GetTangentAtMidCoEdge = dblTangent
End Function</pre>
<pre> </pre>
<pre>'Obtain the cross product of two vectors
Function GetCrossProduct(varVec1 As Variant, varVec2 As Variant) As Variant
    Dim dblCross(2) As Double</pre>
<pre>    dblCross(0) = varVec1(1) * varVec2(2) - varVec1(2) * varVec2(1)
    dblCross(1) = varVec1(2) * varVec2(0) - varVec1(0) * varVec2(2)
    dblCross(2) = varVec1(0) * varVec2(1) - varVec1(1) * varVec2(0)
    GetCrossProduct = dblCross
End Function</pre>
<pre>'Checks whether two vectors are equal within a tolerance of 1.0 e^-10
Function VectorsAreEqual(varVec1 As Variant, varVec2 As Variant) As Boolean
    Dim dblMag As Double
    Dim dblDot As Double
    Dim dblUnit1(2) As Double
    Dim dblUnit2(2) As Double</pre>
<pre>    dblMag = (varVec1(0) * varVec1(0) + varVec1(1) * varVec1(1) + varVec1(2) * varVec1(2)) ^ 0.5
    dblUnit1(0) = varVec1(0) / dblMag: dblUnit1(1) = varVec1(1) / dblMag: dblUnit1(2) = varVec1(2) / dblMag
    dblMag = (varVec2(0) * varVec2(0) + varVec2(1) * varVec2(1) + varVec2(2) * varVec2(2)) ^ 0.5
    dblUnit2(0) = varVec2(0) / dblMag: dblUnit2(1) = varVec2(1) / dblMag: dblUnit2(2) = varVec2(2) / dblMag
    dblDot = dblUnit1(0) * dblUnit2(0) + dblUnit1(1) * dblUnit2(1) + dblUnit1(2) * dblUnit2(2)
    dblDot = Abs(dblDot - 1#)</pre>
<pre>    If dblDot &lt; 0.0000000001 Then '1.0e-10
        VectorsAreEqual = True
    Else
        VectorsAreEqual = False
    End If
End Function</pre>

</body>

</html>
