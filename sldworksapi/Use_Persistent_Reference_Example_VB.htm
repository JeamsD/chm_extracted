<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Use Persistent Reference Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,persistent reference IDs">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=4716>
<meta name=layout-width content=750>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Use Persistent Reference Example (VBA)</h1>

<p>Persistent references are a means of returning to an item between sessions 
 of SOLIDWORKS. Persistent references are similar to attributes, but are 
 easier to use. In almost all cases, persistent references can, and should, 
 be used in place of attributes. </p>

<p>This example:</p>

<ul style="list-style: disc;"
	type=disc>
	
	<li class=kadov-p>shows how to use persistent references.</li>
	
	<li class=kadov-p>is primarily diagnostic code that determines whether 
 the currently selected item has a persistent reference from which an object can 
	be retrieved.</li>
</ul>

<p class="APICODE">
'----------------------------------------------------------------------------<br>
' Preconditions:<br>
' 1. Open a part, assembly, or drawing.<br>
' 2. Select an entity.<br>
' 3. Open the Immediate window.<br>
'<br>
' Postconditions: <br>
' 1. Gets the selected entity type and its PID.<br>
' 2. Examine the Immediate window.<br>
'----------------------------------------------------------------------------</p>
<p class="APICODE">Option Explicit<br>
</p>
<p class="APICODE">Function GetStringFromID(swApp As SldWorks.SldWorks, swModel 
As SldWorks.ModelDoc2, vPIDarr As Variant) As String</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim vPID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Variant<br>
&nbsp;&nbsp;&nbsp; For Each vPID In vPIDarr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Assert vbByte = VarType(vPID)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GetStringFromID = GetStringFromID &amp; 
Format(vPID, &quot;###000&quot;)<br>
&nbsp;&nbsp;&nbsp; Next vPID</p>
<p class="APICODE">End Function</p>
<p class="APICODE">Function GetObjectFromString(swApp As SldWorks.SldWorks, 
swModel As SldWorks.ModelDoc2, IDstring As String) As Object</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim swModExt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.ModelDocExtension<br>
&nbsp;&nbsp;&nbsp; Dim ByteStream()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Byte<br>
&nbsp;&nbsp;&nbsp; Dim vPIDarr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Variant<br>
&nbsp;&nbsp;&nbsp; Dim nRetval&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Long<br>
&nbsp;&nbsp;&nbsp; Dim i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Long</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Set swModExt = swModel.<b>Extension</b><br>
&nbsp;&nbsp;&nbsp; ReDim ByteStream(Len(IDstring) / 3 - 1)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; For i = 0 To Len(IDstring) - 3 Step 3<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ByteStream(i / 3) = 
CByte(Mid(IDstring, i + 1, 3))<br>
&nbsp;&nbsp;&nbsp; Next i</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; vPIDarr = ByteStream</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Set GetObjectFromString = swModExt.<b>GetObjectByPersistReference3</b>((vPIDarr), 
nRetval)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Assert swPersistReferencedObject_Ok 
= nRetval<br>
&nbsp;&nbsp;&nbsp; Debug.Assert Not GetObjectFromString Is Nothing</p>
<p class="APICODE">End Function</p>
<p class="APICODE">Sub main()</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Dim swApp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.SldWorks<br>
&nbsp;&nbsp;&nbsp; Dim swModel&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.ModelDoc2<br>
&nbsp;&nbsp;&nbsp; Dim swModExt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.ModelDocExtension<br>
&nbsp;&nbsp;&nbsp; Dim swSelMgr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As SldWorks.SelectionMgr<br>
&nbsp;&nbsp;&nbsp; Dim swSelObj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Object<br>
&nbsp;&nbsp;&nbsp; Dim swObj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Object<br>
&nbsp;&nbsp;&nbsp; Dim vPIDarr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As Variant<br>
&nbsp;&nbsp;&nbsp; Dim sIDstring&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
As String</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Set swApp = Application.<b>SldWorks</b><br>
&nbsp;&nbsp;&nbsp; Set swModel = swApp.<b>ActiveDoc</b><br>
&nbsp;&nbsp;&nbsp; Set swModExt = swModel.<b>Extension</b><br>
&nbsp;&nbsp;&nbsp; Set swSelMgr = swModel.<b>SelectionManager</b><br>
&nbsp;&nbsp;&nbsp; Set swSelObj = swSelMgr.<b>GetSelectedObject6</b>(1, -1): 
Debug.Assert Not swSelObj Is Nothing</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; vPIDarr = swModExt.<b>GetPersistReference3</b>(swSelObj): 
Debug.Assert Not IsEmpty(vPIDarr)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;SelType = &quot; &amp; swSelMgr.<b>GetSelectedObjectType3</b>(1, 
-1)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; If IsEmpty(vPIDarr) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; ModelDocExtension::GetPersistReference3 
broken&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit Sub<br>
&nbsp;&nbsp;&nbsp; Else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; ModelDocExtension::GetPersistReference3 
exists&quot;<br>
&nbsp;&nbsp;&nbsp; End If</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; sIDstring = GetStringFromID(swApp, swModel, 
vPIDarr)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; Persist Ref = &quot; &amp; 
sIDstring</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; Set swObj = GetObjectFromString(swApp, 
swModel, sIDstring)</p>
<p class="APICODE">&nbsp;&nbsp;&nbsp; If Not Nothing Is swObj Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Assert swSelObj Is swObj<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; ModelDocExtension::GetObjectByPersistReference3 
exists&quot;<br>
&nbsp;&nbsp;&nbsp; Else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Debug.Print &quot;&nbsp; ModelDocExtension::GetObjectByPersistReference3 
broken&quot;<br>
&nbsp;&nbsp;&nbsp; End If</p>
<p class="APICODE">End Sub</p>

</body>

</html>
