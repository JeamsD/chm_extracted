<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html LANG=EN-US>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Sketch Spline Parameters Example (C++ COM)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=date content="03 18, 2002 11:44:19 AM">
<meta name=MS-HKWD content="Splines,parameters">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2501>
<meta name=layout-width content=630>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body LANG=EN-US>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API Help</span></h1>

<h1>Get Sketch Spline Parameters Example (C++ COM)</h1>

<p class=apiDescriptionText>This example shows how to get splines parameter 
 data from sketches and how to unpack that data. </p>

<p class=apiDescriptionText>The method ISketch::IGetSplineParams2 returns 
 an array, so this code must be used in an in-process DLL. Otherwise, use 
 the method ISketch::GetSplineParams2 that returns a VARIANT.</p>

<p class=apiDescriptionText>&nbsp;</p>

<p class=apiCode>// Union for use unpacking the data in the first two array 
 elements for each spline</p>

<p class=apiCode>union SplinePackedData</p>

<p class=apiCode>{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->double 
 doublevalue[2];</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->intvalue[4];</p>

<p class=apiCode>};</p>

<p class=apiCode>void GetSketchSplines(LPSKETCH pSketch,CString* Message)</p>

<p class=apiCode>{</p>

<p class=apiCode>// Assume that pSketch has been set to a valid sketch 
 already</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->CString 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Text;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->double* 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pData;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->long 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->DataSize, 
 NoSplines;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Get the spline parameters</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->if(S_OK 
 != pSketch-&gt;<span style="font-weight: bold;">GetSplineParamsCount</span>(&amp;DataSize, 
 &amp;NoSplines) )return;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->if(NoSplines==0)</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->*Message 
 += &quot; Has no spline curves\r\n&quot;;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->return;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->pData 
 = (double*)malloc(sizeof(double) * DataSize);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->if(S_OK 
 != pSketch-&gt;<span style="font-weight: bold;">IGetSplineParams2</span>(pData) 
 )return;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Format the spline parameter data</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->ExtractSplineData 
 ( DataSize, pData, Message );</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode>}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode>//////////////////////////////////////////////////////////////////////////</p>

<p class=apiCode>// Method: ExtractSplinesData</p>

<p class=apiCode>// Arguments: DataSize - Size of the array containing 
 the splines parameters</p>

<p class=apiCode>// <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pData 
 - Data array containing splines parameters</p>

<p class=apiCode>// Return: Message - A CString for returning the formatted 
 information</p>

<p class=apiCode>// Description:Extract the splines parameter data returned</p>

<p class=apiCode>// <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->from 
 GetSplineParams and format it into a</p>

<p class=apiCode>// <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->string 
 for display.</p>

<p class=apiCode>//////////////////////////////////////////////////////////////////////////</p>

<p class=apiCode>void CGetSketchesApp::ExtractSplinesData(int DataSize, 
 double* pData, CString* Message)</p>

<p class=apiCode>{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Index 
 = 0;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Dim;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Order;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->nCtrlPoints;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Periodic;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->nKnots;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->double 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Knot;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->SplinePackedData* 
 pPackedData;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->int 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->i,j;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->CString 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Line;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode>// Continue until all the data is processed, i.e. 1 loop 
 per spline</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->while 
 ( Index &lt; DataSize )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Unpack the information about the spline</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->pPackedData 
 = (SplinePackedData*)&amp;pData[Index];</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Dim 
 = pPackedData-&gt;intvalue[0];</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Order 
 = pPackedData-&gt;intvalue[1];</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->nCtrlPoints 
 = pPackedData-&gt;intvalue[2];</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Periodic 
 = pPackedData-&gt;intvalue[3];</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->nKnots 
 = Periodic ? nCtrlPoints+1 : nCtrlPoints+Order;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Format Text</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Line.Format(_T(&quot;Spline\r\nDimension 
 %d\r\nNumControlPoints %d\r\n</p>

<p class=apiCode>Num of Knots %d\r\nPeriodic %d\r\n&quot;),Dim, nCtrlPoints, 
 nKnots, Periodic);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->*Message 
 += Line;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Extract Control points</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Index+=2; 
 <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Step past packed data</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->for 
 ( i=0; i&lt;nCtrlPoints; i++ )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Assume 3 dimensions</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->double 
 CtrlPoint[3]; <!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->for 
 ( j=0; j&lt;3; j++ )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->CtrlPoint[j] 
 = pData[Index++];</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Format text (in this case assume 3 dimensions)</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Line.Format(_T(&quot;Control 
 Point: %lf %lf %lf\r\n&quot;),</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->CtrlPoint[0],</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->CtrlPoint[1],</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->CtrlPoint[2]);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->*Message 
 += Line;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Extract Knots</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->for 
 ( i=0; i&lt;nKnots; i++ )</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->{</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Knot 
 = pData[Index++];</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}--></p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->// 
 Format text</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->Line.Format(_T(&quot;Knot: 
 %lf\r\n&quot;), Knot);</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->*Message 
 += Line;</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode><!--kadov_tag{{<spaces>}}-->&nbsp;<!--kadov_tag{{</spaces>}}-->}</p>

<p class=apiCode>}</p>

</body>

</html>
