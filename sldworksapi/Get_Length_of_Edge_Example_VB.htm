<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Get Length of Edge Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,edges">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2347>
<meta name=layout-width content=789>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1>Get Length of Edge Example (VBA)</h1>

<p>This example shows how to get the length of an edge directly from the 
underlying curve and also from the display tessellation. The effect of the 
tolerance, when getting the curve tessellation, can be seen in the differences 
in the calculated lengths. This example exists primarily to show how to use 
ICurve::GetTessPts.</p>

<pre>'-----------------------------------------------
' Preconditions:
' 1. Open a part or fully resolved assembly.
' 2. Select an edge.
' 3. Open the Immediate window.
'
' Postconditions:
' 1. Gets the length of the selected edge.
' 2. Examine the Immediate window.
'-----------------------------------------------
Option Explicit</pre>
<pre>Public Const LINE_TYPE As Integer = 3001
Public Const CIRCLE_TYPE As Integer = 3002
Public Const ELLIPSE_TYPE As Integer = 3003
Public Const INTERSECTION_TYPE As Integer = 3004
Public Const BCURVE_TYPE As Integer = 3005
Public Const SPCURVE_TYPE As Integer = 3006
Public Const CONSTPARAM_TYPE As Integer = 3008
Public Const TRIMMED_TYPE As Integer = 3009</pre>
<pre>Function TessLength(vTessPts As Variant) As Double
    Dim i As Long</pre>
<pre>    For i = 0 To ((UBound(vTessPts) + 1) / 3 - 2)
        TessLength = TessLength + Sqr((vTessPts(3 * i + 0) - vTessPts(3 * i + 3)) ^ 2# + (vTessPts(3 * i + 1) - vTessPts(3 * i + 4)) ^ 2# + (vTessPts(3 * i + 2) - vTessPts(3 * i + 5)) ^ 2#)
    Next i
End Function</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swEdge As SldWorks.Edge
    Dim swCurve As SldWorks.Curve
    Dim bRet As Boolean
    Dim vCurveParam As Variant
    Dim StartPt(2) As Double
    Dim EndPt(2) As Double
    Dim vStartPt As Variant
    Dim vEndPt As Variant
    Dim vTessPts As Variant</pre>
<pre>    Set swApp = CreateObject(&quot;SldWorks.Application&quot;)
    Set swModel = swApp.<b>ActiveDoc</b>
    Set swSelMgr = swModel.<b>SelectionManager</b>
    Set swEdge = swSelMgr.<b>GetSelectedObject6</b>(1, -1)
    Set swCurve = swEdge.<b>GetCurve</b>
    vCurveParam = swEdge.<b>GetCurveParams2</b>
    StartPt(0) = vCurveParam(0)
    StartPt(1) = vCurveParam(1)
    StartPt(2) = vCurveParam(2)
    EndPt(0) = vCurveParam(3)
    EndPt(1) = vCurveParam(4)
    EndPt(2) = vCurveParam(5)
    vStartPt = StartPt
    vEndPt = EndPt</pre>
<pre>    Debug.Print &quot;CurveType   = &quot; &amp; swCurve.<b>Identity</b>
    Debug.Print &quot;CurveLength = &quot; &amp; swCurve.<b>GetLength2</b>(vCurveParam(6), vCurveParam(7)) * 1000# &amp; &quot; mm&quot;
    Debug.Print &quot;&quot;</pre>
<pre>    vTessPts = swCurve.<b>GetTessPts</b>(0.000001, 0.000001, (vStartPt), (vEndPt))
    Debug.Print &quot;TessLength(&quot; &amp; UBound(vTessPts) &amp; &quot;)  = &quot; &amp; TessLength(vTessPts) * 1000# &amp; &quot; mm&quot;</pre>
<pre>    vTessPts = swCurve.<b>GetTessPts</b>(0.00001, 0.00001, (vStartPt), (vEndPt))
    Debug.Print &quot;TessLength(&quot; &amp; UBound(vTessPts) &amp; &quot;)  = &quot; &amp; TessLength(vTessPts) * 1000# &amp; &quot; mm&quot;</pre>
<pre>    vTessPts = swCurve.<b>GetTessPts</b>(0.0001, 0.0001, (vStartPt), (vEndPt))
    Debug.Print &quot;TessLength(&quot; &amp; UBound(vTessPts) &amp; &quot;)  = &quot; &amp; TessLength(vTessPts) * 1000# &amp; &quot; mm&quot;</pre>
<pre>    vTessPts = swCurve.<b>GetTessPts</b>(0.001, 0.001, (vStartPt), (vEndPt))
    Debug.Print &quot;TessLength(&quot; &amp; UBound(vTessPts) &amp; &quot;)  = &quot; &amp; TessLength(vTessPts) * 1000# &amp; &quot; mm&quot;</pre>
<pre>    vTessPts = swCurve.<b>GetTessPts</b>(0.01, 0.01, (vStartPt), (vEndPt))
    Debug.Print &quot;TessLength(&quot; &amp; UBound(vTessPts) &amp; &quot;)  = &quot; &amp; TessLength(vTessPts) * 1000# &amp; &quot; mm&quot;
    </pre>
<pre>End Sub
</pre>

</body>

</html>
