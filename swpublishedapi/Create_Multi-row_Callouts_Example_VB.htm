<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Create Multi-row Callouts Example (VBA)</title>

<!--(Meta)==========================================================-->

<meta http-equiv=content-type content="text/html; charset=windows-1252">
<meta name=MS-HKWD content="VBA examples,callouts">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=3299>
<meta name=layout-width content=750>


<!--(Links)=========================================================-->

<link rel="StyleSheet" href="./APIHelp.css">



</head>

<!--(Body)==========================================================-->


<body>

<h1><span style="font-weight: normal; font-size: 7.5pt;">SOLIDWORKS API 
 Help</span></h1>

<h1><a name=Top></a>Create Multi-row Callouts Example (VBA)</h1>

<p>This example shows how to create&nbsp; multi-row callouts.</p>

<pre>'--------------------------------------------------------------------
' Preconditions:
' 1. Copy and paste <a href="#Modules">this code</a> in the main module.
' 2. Click <b>Insert &gt; Class</b> module and copy and paste
'    <a href="#Class">this code</a> in the class module.
' 3. Click <b>Tools &gt; References &gt; SOLIDWORKS</b> <i>version</i>
'    <b>exposed type libraries for add-in use</b>.
' 4. Open a part or a fully resolved assembly.
' 5. Select one or more geometric entities in
'    the graphics area.
'
' Postconditions: Observe the graphics area while stepping
'    through the macro (put your cursor in the main module
'    in the IDE and press F8 repeatedly) to verify that callouts
'    are attached to each geometric entity selected in
'    Preconditions step 5.
'
' NOTE: Selecting features in FeatureManager design tree is
' not currently supported.
'-----------------------------------------------------------------
<a name=Modules></a>'Main module</pre>
<pre>Option Explicit</pre>
<pre>Sub main()</pre>
<pre>    Dim swApp As SldWorks.SldWorks
    Dim swModel As SldWorks.ModelDoc2
    Dim swModelExt As SldWorks.ModelDocExtension
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim vSelPos() As Variant
    Dim swCallout() As SldWorks.Callout
    Dim nSelCount As Long
    Dim i As Long
    Dim bRet As Boolean
    Dim callH As New Class1
    Dim boolstatus As Boolean</pre>
<pre>    Set swApp = CreateObject(&quot;SldWorks.Application&quot;)
    Set swModel = swApp.<b>ActiveDoc</b>
    Set swModelExt = swModel.<b>Extension</b>
    Set swSelMgr = swModel.<b>SelectionManager</b>
    nSelCount = swSelMgr.<b>GetSelectedObjectCount2</b>(-1)</pre>
<pre>    ReDim vSelPos(nSelCount)
    ReDim swCallout(nSelCount)</pre>
<pre>    For i = 0 To nSelCount - 1
        vSelPos(i) = swSelMgr.<b>GetSelectionPoint2</b>((i + 1), -1)
    Next i</pre>
<pre>    swModel.<b>ClearSelection2</b> True</pre>
<pre>    For i = 0 To nSelCount - 1
        Set swCallout(i) = swSelMgr.<b>CreateCallout2</b>(4, callH)
        swCallout(i).<b>Label2</b>(0) = &quot;Project&quot;
        swCallout(i).<b>Label2</b>(1) = &quot;Product&quot;
        swCallout(i).<b>Label2</b>(2) = &quot;Radius&quot;
        swCallout(i).<b>Label2</b>(3) = &quot;Number&quot;
        swCallout(i).<b>Value</b>(0) = &quot;10685&quot;
        swCallout(i).<b>Value</b>(1) = &quot;Washer&quot;
        swCallout(i).<b>Value</b>(2) = &quot;30&quot;
        swCallout(i).<b>Value</b>(3) = &quot;1&quot;
        swCallout(i).<b>SetTargetPoint</b> 0, vSelPos(i)(0), vSelPos(i)(1), vSelPos(i)(2)
        swCallout(i).<b>SetTargetPoint</b> 1, vSelPos(i)(0), vSelPos(i)(1), vSelPos(i)(2)
        swCallout(i).<b>SetTargetPoint</b> 2, vSelPos(i)(0), vSelPos(i)(1), vSelPos(i)(2)
        swCallout(i).<b>SetTargetPoint</b> 3, vSelPos(i)(0), vSelPos(i)(1), vSelPos(i)(2)
        swCallout(i).<b>TextColor</b>(0) = swSystemColorsRefTriadX
        swCallout(i).<b>TextColor</b>(1) = swSystemColorsRefTriadY
        swCallout(i).<b>TextColor</b>(2) = swSystemColorsRefTriadZ
        swCallout(i).<b>TextColor</b>(3) = swSystemColorsRefTriadX
        swCallout(i).<b>OpaqueColor</b> = swSystemColorsSelectedItem4
        swCallout(i).<b>MultipleLeaders</b> = False
        bRet = swModelExt.<b>SelectByID2</b>(&quot;&quot;, &quot;&quot;, vSelPos(i)(0), vSelPos(i)(1), vSelPos(i)(2), True, 0, swCallout(i), 0)
        swCallout(i).<b>ValueInactive</b>(3) = True
    Next i</pre>
<pre>End Sub
</pre>

<p>&nbsp;</p>

<p style="text-align: center;"
	align=center><a href="#Top">Back to top</a></p>

<pre><a name="Class"></a>'Class module</pre>
<pre>Option Explicit</pre>
<pre>Implements SwCalloutHandler</pre>
<pre>Dim m_pCallout As SldWorks.Callout</pre>
<pre>Public Sub Init(clout As SldWorks.Callout)
    Set m_pCallout = clout
End Sub</pre>
<pre>Private Sub Class_Initialize()
    Debug.Print &quot;Class_Initialize&quot;
End Sub</pre>
<pre>Private Sub Class_Terminate()
    Debug.Print &quot;Class_Terminate&quot;
End Sub
</pre>
<pre>Public Function SwCalloutHandler_<b>OnStringValueChanged</b>(ByVal pManipulator As Object, ByVal Index As Long, ByVal Text As String) As Boolean
    Debug.Print Index
    Debug.Print Text
    Dim retval As Boolean
End Function</pre>

<p>&nbsp;</p>

<p style="text-align: center;"
	align=center><a href="#Top">Back to top</a></p>

<pre>&nbsp;</pre>

</body>

</html>
